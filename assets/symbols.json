{
  "version": "1.0", 
  "objects": [
    {
      "fields": [
        {
          "default": null, 
          "field": "name", 
          "type": "string", 
          "description": "The name of this data memory level, must be unique within one data memory instance."
        }, 
        {
          "default": "float", 
          "field": "type", 
          "type": "string", 
          "description": "The data type of the level [can be: 'float' or 'int'(eger) , currently only float is supported by the majority of processing components ]", 
          "allowedValues": [
            "float", 
            "int", 
            "integer"
          ]
        }, 
        {
          "default": 1, 
          "field": "isRb", 
          "type": "numeric", 
          "description": "Flag that indicates whether this level is a ring-buffer level (1) or not (0). I.e. this level stores the last 'nT' frames, and discards old data as new data comes in (if the old data has already been read by all registered readers; if this is not the case, the level will report that it is full to the writer attempting the write operation)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 100, 
          "field": "nT", 
          "type": "numeric", 
          "description": "The size of the level buffer in frames (this overwrites the 'lenSec' option)"
        }, 
        {
          "default": 0, 
          "field": "T", 
          "type": "numeric", 
          "description": "The frame period of this level in seconds. Use a frame period of 0 for a-periodic levels (i.e. data that does not occur periodically)"
        }, 
        {
          "default": 0, 
          "field": "lenSec", 
          "type": "numeric", 
          "description": "The size of the level buffer in seconds"
        }, 
        {
          "default": 0, 
          "field": "frameSizeSec", 
          "type": "numeric", 
          "description": "The size of one frame in seconds. (This is generally NOT equal to 1/T, because frames may overlap)"
        }, 
        {
          "default": 0, 
          "field": "growDyn", 
          "type": "numeric", 
          "description": "Supported currently only if 'ringbuffer=0'. If this option is set to 1, the level grows dynamically, if more memory is needed. You can use this to store live input of arbirary length in memory. However, be aware that if openSMILE runs for a long time, it will allocate more and more memory!", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "noHang", 
          "type": "numeric", 
          "description": "This option controls the 'hang' behaviour for ring-buffer levels, i.e. the behaviour exhibited, when the level is full because data from the ring-buffer has not been marked as read because not all readers registered to read from this level have read data. Valid options are, 0, 1, 2 :\n0 = always wait for readers, mark the level as full and make writes fail until all readers have read at least the next frame from this level\n1 = don't wait for readers, if no readers are registered, i.e. this level is a dead-end (this is the default) / 2 = never wait for readers, writes to this level will always succeed (reads to non existing data regions might then fail), use this option with a bit of caution.", 
          "allowedValues": [
            0, 
            1,
            2
          ]
        }
      ], 
      "object": "cDataMemoryLevel"
    }, 
    {
      "fields": [
        {
          "default": "class", 
          "field": "name", 
          "type": "string", 
          "description": "The name of the target attribute"
        }, 
        {
          "default": "numeric", 
          "field": "type", 
          "type": "string", 
          "description": "The type of the target attribute: 'numeric', 'string', or nominal (= list of classes, enclosed in {} )"
        }
      ], 
      "object": "arffClass"
    }, 
    {
      "fields": [
        {
          "default": "", 
          "field": "instance", 
          "type": "string", 
          "description": "An array containing a target for each instance"
        }, 
        {
          "default": "", 
          "field": "all", 
          "type": "string", 
          "description": "Assign this one target to all processed instances. You can use this option if you pass only one instance to cArffSink when openSMILE is run. (This option is used by a lot batch feature extraction scripts)"
        }
      ], 
      "object": "arffTarget"
    }, 
    {
      "fields": [
        {
          "default": "dataMemory", 
          "field": "dmInstance", 
          "typeHint": "componentInstance", 
          "type": "string", 
          "description": "The cDataMemory instance this writer shall connect to. This allows for complex configurations with multiple, independent data memories. For most applications the default 'dataMemory' should be reasonable. This is also the assumed default when automatically generating a configuration file."
        }, 
        {
          "default": "___shs__dummy__", 
          "field": "dmLevel", 
          "type": "string", 
          "description": "The data memory level this writer will write data to. You can specify any name here, this writer will register and create a level of this name in the dataMemory during initialisation of openSMILE. Please be aware of the fact that only one writer can write to a data memory level, therefore you are not allowed to use the same name again in a 'dmLevel' option of any other component in the same config."
        }, 
        {
          "field": "levelconf", 
          "type": "cDataMemoryLevel", 
          "description": "This structure specifies an optional configuration of this data memory level.\nIf this is given, it will overwrite any defaults or inherited values from input levels. For details see the help on the configuration type 'cDataMemoryLevel'."
        }
      ], 
      "object": "cDataWriterShs"
    }, 
    {
      "fields": [
        {
          "default": null, 
          "field": "type", 
          "typeHint": "componentType", 
          "type": "string", 
          "description": "name of component type to create an instance of"
        }, 
        {
          "default": null, 
          "field": "configInstance", 
          "type": "string", 
          "description": "config instance to connect to component instance (UNTESTED?)"
        }, 
        {
          "default": -1, 
          "field": "threadId", 
          "type": "numeric", 
          "description": "thread nr. to run this component in (default = -1: either run in 1st thread or automatically run each component in one thread if nThread==0)"
        }
      ], 
      "object": "cComponentManagerInst"
    }
  ], 
  "components": [
    {
      "fields": [
        {
          "default": 1, 
          "field": "isRb", 
          "type": "numeric", 
          "description": "The default for the isRb option for all levels.", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 100, 
          "field": "nT", 
          "type": "numeric", 
          "description": "The default level buffer size in frames for all levels."
        }, 
        {
          "field": "level", 
          "type": "cDataMemoryLevel", 
          "description": "An associative array containing the level configuration (obsolete, you should use the cDataWriter configuration in the components that write to the dataMemory to properly configure the dataMemory!)"
        }
      ], 
      "component": "cDataMemory", 
      "description": "central data memory component"
    }, 
    {
      "description": "This component copies data from one level to another, thereby selecting frame fields and elements by their element/field name.", 
      "writesToLevels": [
        "writer.dmLevel"
      ], 
      "fields": [
        {
          "default": null, 
          "field": "selFile", 
          "type": "string", 
          "description": "The name of the data selection file to load. The file is a text file containing one element name per line of the elements which should be selected (case-sensitive!). (Note: the first two lines make up a header; the first line always contains 'str', the second line is number of features in list, next each line contains one feature name of the features to select)"
        }, 
        {
          "default": null, 
          "field": "selected", 
          "type": "string", 
          "description": "This is an alternative to loading 'selFile'. An array of exact (case-sensitive) names of features / data elements to select."
        }, 
        {
          "default": null, 
          "field": "selectedRange", 
          "type": "string", 
          "description": "This is an alternative to loading 'selFile'. It specifies the selected elements(!) by element index ranges. Each array element contains one range in the format of <start>-<end>, where <start> and <end> are the indicies of the startt and end features to *select* in this range. '$' specifies the last element, and '1' indicates the first element. If the '-' is missing, only a single element will be selected, not a range. NOTE: the 'newNames' option does not work in conjunction with this element selection method!"
        }, 
        {
          "default": null, 
          "field": "newNames", 
          "type": "string", 
          "description": "An array of new names to assign to the selected features / data elements (optional). The order thereby corresponds to the order of data element names in the input."
        }, 
        {
          "default": 1, 
          "field": "elementMode", 
          "type": "numeric", 
          "description": "1 = select elements exactly as given in 'selected' array or in 'selFile' (in this case, only full element names are allowed (i.e. mfcc[1], mfcc[2] instead of mfcc, mfcc[], or mfcc[1-2]\n0 = automatically copy arrays or partial arrays, e.g. if field[1-4] or only 'field' is given as name in the selction array/file, then the partial (1-4) or complete field will be copied to the output", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "dummyMode", 
          "type": "numeric", 
          "description": "1 = don't set up output level names. Use this option temporarily, to get a working set-up where you can read the input level names, to set up your selection list.", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": null, 
          "field": "outputSingleField", 
          "type": "string", 
          "description": "If this is set to a string, the output will be a single field (with the name set by this string) for all the elements in the input."
        }
      ], 
      "component": "cDataSelector", 
      "readsFromLevels": [
        "reader.dmLevel"
      ], 
      "baseComponent": "cDataProcessor"
    }, 
    {
      "description": "dataProcessor, where each array field is processed individually as a vector", 
      "writesToLevels": [
        "writer.dmLevel"
      ], 
      "fields": [
        {
          "default": 1, 
          "field": "processArrayFields", 
          "type": "numeric", 
          "description": "1 = process each array field as one vector individually (and produce one output for each input array field). Only array fields (i.e. fields with more than one element) are processed if this is set. / 0 = process complete input frame as one vector, ignoring field/element structure", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "includeSingleElementFields", 
          "type": "numeric", 
          "description": "1 = if in processArrayFields (1) mode, then also include single element fields.", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "preserveFieldNames", 
          "type": "numeric", 
          "description": "1 = when processArrrayFields is disabled (0), then still preserve the input field partitioning and names in the output, but just process the whole vector instead of fields. This was the default in old versions, but now it can be controlled. This is what you would usually want, except if you want/need to combine inputs to a single large array field.", 
          "allowedValues": [
            0, 
            1
          ]
        }
      ], 
      "component": "cVectorProcessor", 
      "readsFromLevels": [
        "reader.dmLevel"
      ], 
      "baseComponent": "cDataProcessor"
    }, 
    {
      "description": "this is a base class for vector transforms which require history data or precomputed data (e.g. cepstral mean subtraction, etc.)", 
      "writesToLevels": [
        "writer.dmLevel"
      ], 
      "fields": [
        {
          "default": "analysis", 
          "field": "mode", 
          "type": "string", 
          "description": "The mode of operation:\nan(alysis) : analyse all incoming data and compute transform for later use\ntr(ansformation) : use pre-computed transform loaded from initFile, no on-line adaptation\nin(cremental) : use initFile as inital transform, if given, update transform on-line using 'updateMethod'", 
          "allowedValues": [
            "an", 
            "analysis", 
            "tr", 
            "transformation", 
            "in", 
            "incremental"
          ]
        }, 
        {
          "default": null, 
          "field": "initFile", 
          "type": "string", 
          "description": "The file to load the (initial) transformation data from (see vectorTransform.cpp for documentation of the file format)"
        }, 
        {
          "default": null, 
          "field": "saveFile", 
          "type": "string", 
          "description": "The file to save transformation data to (see vectorTransform.cpp for documentation of the file format)"
        }, 
        {
          "default": "iavg", 
          "field": "updateMethod", 
          "type": "string", 
          "description": "Method to use for incrementally updating the transform. Can be one of the following:\n'exp'  exponential: m1 = alpha * m0  + (1-alpha) * x\n'fix'/'buf'  compute tranform over history buffer of fixed length\n'ifix'/'ibuf'  compute tranform over history buffer of fixed length and use init data from last turn (see weight option)\n'usr'  other update method (usually defined by a descendant component of cVectorTransform, look for customUpdateMethod option)\n'avg'  cummulative average method with weighted fixed inital values\n'iavg'  cummulative average method with weighted variable (from the last turn) inital values\nNOTE: if 'resetOnTurn'==0 then 'avg' and 'iavg' are identical", 
          "allowedValues": [
            "exp", 
            "fix", 
            "buf", 
            "ifix", 
            "ibuf", 
            "usr", 
            "avg", 
            "iavg"
          ]
        }, 
        {
          "default": 0.995, 
          "field": "alpha", 
          "type": "numeric", 
          "description": "The weighting factor alpha for exponential transform update"
        }, 
        {
          "default": 100, 
          "field": "weight", 
          "type": "numeric", 
          "description": "The weighting factor for 'avg'/'avgI'/'bufI' update, i.e. the factor the initial transform parameters are weighted by when building the cummulative average"
        }, 
        {
          "default": 5, 
          "field": "fixedBuffer", 
          "type": "numeric", 
          "description": "The size of the fixed length buffer [in seconds] (for fixed buffer update method)"
        }, 
        {
          "default": 0, 
          "field": "turnOnlyUpdate", 
          "type": "numeric", 
          "description": "1 = perform transform update only during turns (between turnStart and turnEnd messages) (works for all methods)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "invertTurn", 
          "type": "numeric", 
          "description": "1 = invert the turn state (i.e. changes a 'turnOnly...' option into 'notTurn' option)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "resetOnTurn", 
          "type": "numeric", 
          "description": "1 = reset transform values at the beginning of each new turn (only in mode 'analysis' and 'incremental')", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "turnOnlyNormalise", 
          "type": "numeric", 
          "description": "1 = apply the transform only to turns (in between data will pass through unmodified) ('invertTurn' will also invert this option)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "turnOnlyOutput", 
          "type": "numeric", 
          "description": "1 = output data to writer level only during a turn (this will implicitely set turnOnlyNormalise = 1) ('invertTurn' will also invert this option)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "htkcompatible", 
          "type": "numeric", 
          "description": "A flag that indicates (if set to 1) wheter last coefficient in 'initFile' is loaded into means[0] (use this only when reading htk-compatible cmn init files, and NOT using htk-compatible mfccs)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "invertMVNdata", 
          "type": "numeric", 
          "description": "1 = invert the loaded MVN data to 'unstandardise' to these parameters. Currently only works with MVn text and old MVN binary data. mu' = -mu/sigma and sigma' = 1/sigma ;", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": "turnStart", 
          "field": "turnStartMessage", 
          "type": "string", 
          "description": "You can use this option to define a custom message name for the turn start message, i.e. if you want to use voice activity start/end messages instead"
        }, 
        {
          "default": "turnEnd", 
          "field": "turnEndMessage", 
          "type": "string", 
          "description": "You can use this option to define a custom message name for the turn end message, i.e. if you want to use voice activity start/end messages instead"
        }
      ], 
      "component": "cVectorTransform", 
      "readsFromLevels": [
        "reader.dmLevel"
      ], 
      "baseComponent": "cVectorProcessor"
    }, 
    {
      "description": "filter dataProcessor, filters each element in a dataMemory level independently", 
      "writesToLevels": [
        "writer.dmLevel"
      ], 
      "fields": [
        {
          "default": 0, 
          "field": "noPostEOIprocessing", 
          "type": "numeric", 
          "description": "1 = do not process incomplete windows at the end of the input", 
          "allowedValues": [
            0, 
            1
          ]
        }
      ], 
      "component": "cWindowProcessor", 
      "readsFromLevels": [
        "reader.dmLevel"
      ], 
      "baseComponent": "cDataProcessor"
    }, 
    {
      "description": "reads input windows, outputs frame(s)", 
      "writesToLevels": [
        "writer.dmLevel"
      ], 
      "fields": [
        {
          "default": 0, 
          "field": "allowLastFrameIncomplete", 
          "type": "numeric", 
          "description": "If this option is set to 1 (true) then in frameMode 'fixed', the last frame will be processed, even if it is not frameSize frames long.", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": "fixed", 
          "field": "frameMode", 
          "type": "string", 
          "description": "Specifies how to create frames: 'fixed' (fixed frame size, given via 'frameSize' option), 'full' (create one frame at the end of the input only), 'variable' (via message), 'list' (in config file or external text file, see frameList and frameListFile options, UNIMPLEMENTED)", 
          "suggestedValues": [
            "fixed", 
            "full", 
            "variable", 
            "list",
            "message",
            "meta"
          ],
          "allowedValues": [
            "fixed", 
            "fix",
            "full", 
            "ful",
            "variable", 
            "var",
            "list",
            "message",
            "msg",            
            "meta"
          ]
        }, 
        {
          "default": null, 
          "field": "frameListFile", 
          "type": "string", 
          "description": "Filename of a file with a list of frame intervals to load (text file with a comma separted list of intervals: 1-10,11-20 , etc., if no interval is specified, i.e. no - is found then consecutive frames with the given number being the frame length are assumed; first index is 0; use the suffix \"s\" after the numbers to specify intervals in seconds (e.g. 0s-2.5s); use an 'E' instead of a number for 'end of sequence')"
        }, 
        {
          "default": null, 
          "field": "frameList", 
          "type": "string", 
          "description": "The list of frame intervals specified directly in the configuration file (comma separted list of intervals: 1-10,11-20 , etc., if no interval is specified, i.e. no - is found then consecutive frames with the given number being the frame length are assumed; first index is 0; use the suffix \"s\" after the numbers to specify intervals in seconds (e.g. 0s-2.5s); use an 'E' instead of a number for 'end of sequence')"
        }, 
        {
          "default": 0.025, 
          "field": "frameSize", 
          "type": "numeric", 
          "description": "The frame size in seconds (0.0 = full input, same as frameMode=full)"
        }, 
        {
          "default": 0, 
          "field": "frameStep", 
          "type": "numeric", 
          "description": "The frame step (frame sampling period) in seconds (0.0 = set to the same value as 'frameSize')"
        }, 
        {
          "default": 0, 
          "field": "frameSizeFrames", 
          "type": "numeric", 
          "description": "The frame size in input level frames (=samples for a pcm/wave input level) (overrides frameSize, if set and > 0)"
        }, 
        {
          "default": 0, 
          "field": "frameStepFrames", 
          "type": "numeric", 
          "description": "The frame step in input level frames (=samples for a pcm/wave input level) (overrides frameStep, if set and > 0)"
        }, 
        {
          "default": 0, 
          "field": "frameCenter", 
          "type": "numeric", 
          "description": "The frame center in seconds, i.e. where frames are sampled (0=left)"
        }, 
        {
          "default": 0, 
          "field": "frameCenterFrames", 
          "type": "numeric", 
          "description": "The frame sampling center in input level frames (overrides frameCenter, if set), (0=left)"
        }, 
        {
          "default": "left", 
          "field": "frameCenterSpecial", 
          "type": "string", 
          "description": "The frame sampling center (overrides the other frameCenter options, if set). The available special frame sampling points as strings are: 'mid' = middle (first frame from -frameSize/2 to frameSize/2), 'left' = sample at the beginning of the frame (first frame from 0 to frameSize), 'right' = sample at the end of the frame (first frame from -frameSize to 0)", 
          "suggestedValues": [
            "left", 
            "mid", 
            "right"
          ],
          "allowedValues": [
            "left",
            "mid",
            "middle",
            "right",
            "center"
          ]
        }, 
        {
          "default": 1, 
          "field": "noPostEOIprocessing", 
          "type": "numeric", 
          "description": "1 = do not process incomplete windows at the end of the input", 
          "allowedValues": [
            0, 
            1
          ]
        }
      ], 
      "component": "cWinToVecProcessor", 
      "readsFromLevels": [
        "reader.dmLevel"
      ], 
      "baseComponent": "cDataProcessor"
    }, 
    {
      "description": "Base class: reads in frames , outputs windows", 
      "writesToLevels": [
        "writer.dmLevel"
      ], 
      "fields": [
        {
          "default": 16000, 
          "field": "forceSampleRate", 
          "type": "numeric", 
          "description": "Set a given sample rate for the output level. Typically the base period of the input level will be used for this purpose, but when reading frame-based data from feature files, for example, this information is not available. This option overwrites the input level base period, if it is set."
        }, 
        {
          "default": 0, 
          "field": "normaliseAdd", 
          "type": "numeric", 
          "description": "1/0 (on/off) : normalise frames before adding to eliminate envelope fluctuation artefacts and scaling artefacts. When this is enabled the output should always be correctly scaled to the range -1 and +1. If this is deactivated perfect reconstruction can only be guaranteed with root-raised cosine windows and 50 percent overlap.", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "useWinAasWinB", 
          "type": "numeric", 
          "description": "1 = use window A as window B (e.g. if win A is a root of window x function, e.g. root raised cosine). The 'windowB' must be left blank, and NO windower must be present between the ifft (or other processing) and this component. This component will internally apply window function A before doing the overlap add. (NOT YET IMPLEMENTED)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "gain", 
          "type": "numeric", 
          "description": "A gain to apply to the output samples."
        }, 
        {
          "default": null, 
          "field": "windowA", 
          "typeHint": "componentInstance", 
          "type": "string", 
          "description": "Name of cWindower component applied before transforming into the spectral domain. Leave empty to use constant window (=1)."
        }, 
        {
          "default": null, 
          "field": "windowB", 
          "typeHint": "componentInstance", 
          "type": "string", 
          "description": "Name of cWindower component applied after transforming back into the time domain. Leave empty to use constant window (=1)."
        }, 
        {
          "default": 1, 
          "field": "processArrayFields", 
          "type": "numeric", 
          "description": "If turned on (1), process array fields individually. If turned off (0), treat the input vector as a single field/frame.", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "noPostEOIprocessing", 
          "type": "numeric", 
          "description": "1 = do not process incomplete windows at end of input", 
          "allowedValues": [
            0, 
            1
          ]
        }
      ], 
      "component": "cVecToWinProcessor", 
      "readsFromLevels": [
        "reader.dmLevel"
      ], 
      "baseComponent": "cDataProcessor"
    }, 
    {
      "writesToLevels": [
        "writer.dmLevel"
      ], 
      "fields": [
        {
          "default": 1, 
          "field": "nValues", 
          "type": "numeric", 
          "description": "The number of random values to generate"
        }, 
        {
          "default": 1, 
          "field": "randSeed", 
          "type": "numeric", 
          "description": "The random seed"
        }
      ], 
      "component": "cExampleSource", 
      "description": "This is an example of a cDataSource descendant. It writes random data to the data memory. This component is intended as a template for developers.", 
      "baseComponent": "cDataSource"
    }, 
    {
      "readsFromLevels": [
        "reader.dmLevel"
      ], 
      "fields": [
        {
          "default": null, 
          "field": "filename", 
          "type": "string", 
          "description": "The name of a text file to dump values to (this file will be overwritten, if it exists)"
        }, 
        {
          "default": 0, 
          "field": "lag", 
          "type": "numeric", 
          "description": "Output data <lag> frames behind"
        }
      ], 
      "component": "cExampleSink", 
      "description": "This is an example of a cDataSink descendant. It reads data from the data memory and prints it to the console. This component is intended as a template for developers.", 
      "baseComponent": "cDataSink"
    }, 
    {
      "description": "concatenates vectors from multiple levels and copy to another level", 
      "writesToLevels": [
        "writer.dmLevel"
      ], 
      "fields": [], 
      "component": "cVectorConcat", 
      "readsFromLevels": [
        "reader.dmLevel"
      ], 
      "baseComponent": "cVectorProcessor"
    }, 
    {
      "description": "This component creates frames from single dimensional input stream. It is possible to specify the frame step and frame size independently, thus allowing for overlapping frames or non continuous frames.", 
      "writesToLevels": [
        "writer.dmLevel"
      ], 
      "fields": [], 
      "component": "cFramer", 
      "readsFromLevels": [
        "reader.dmLevel"
      ], 
      "baseComponent": "cWinToVecProcessor"
    }, 
    {
      "description": "This component applies applies window function to pcm frames.", 
      "writesToLevels": [
        "writer.dmLevel"
      ], 
      "fields": [
        {
          "default": 1, 
          "field": "gain", 
          "type": "numeric", 
          "description": "This option allows you to specify a scaling factor by which window function (which is by default normalised to max. 1) should be multiplied by"
        }, 
        {
          "default": 0, 
          "field": "offset", 
          "type": "numeric", 
          "description": "This specifies an offset which will be added to the samples after multiplying with the window function"
        }, 
        {
          "default": 1, 
          "field": "xscale", 
          "type": "numeric", 
          "description": "(NOT YET IMPLEMENTED!) A scale factor applied to the y-axis when computing the window. A factor of 2 will compute the window over twice the window length, and then clip it to the window, i.e. only the left half of the window function will be the actual window. In case of xscale=0.5, for example, the second half of the actual window will be zero, while the first half is the window function. Use in conjunction with 'xshift' paramter."
        }, 
        {
          "default": 0, 
          "field": "xshift", 
          "type": "numeric", 
          "description": "Specifies a shift of the window center to the left (negative) or right (positive) as percentage of the window length (ignoring xscale parameter). Allowed range is from -100% to +100%."
        }, 
        {
          "default": "Han", 
          "field": "winFunc", 
          "type": "string", 
          "description": "Window function:\nHann [Han] (= raised cosine window; use this, if you want to resynthesis from the spectral domain, also use 50% overlap in the framer!),\nHamming [Ham],\nRectangular [Rec],\nGauss [Gau],\nSine / Cosine [Sin],\nTriangular [Tri],\nBartlett [Bar],\nBartlett-Hann [BaH],\nBlackmann [Bla],\nBlackmann-Harris [BlH],\nLanczos [Lac]", 
          "suggestedValues": [
            "Han", 
            "Ham", 
            "Rec", 
            "Gau", 
            "Sin", 
            "Tri", 
            "Bar", 
            "BaH", 
            "Bla", 
            "BlH", 
            "Lac"
          ],
          "allowedValues": [
            "Han", 
            "han",
            "Hanning",
            "hanning",
            "hann",
            "Hann",
            "Ham", 
            "ham",
            "Hamming",
            "hamming",
            "Rec", 
            "rec",
            "Rectangular",
            "rectangular",
            "none",
            "None",
            "Gau", 
            "gau",
            "Gauss",
            "gauss",
            "Gaussian",
            "gaussian",
            "Sin", 
            "sin",
            "Sine",
            "sine",
            "cosine",
            "Cosine",
            "Cos",
            "cos",
            "Tri",
            "tri",
            "Triangle",
            "triangle",
            "Bar",
            "bar",
            "Bartlett",
            "bartlett",
            "BaH",
            "bah",
            "Bartlett-Hann",
            "bartlett-hann",
            "Bartlett-Hanning",
            "bartlett-hanning",
            "Bla", 
            "bla",
            "Blackman",
            "blackman",
            "BlH", 
            "blh",
            "Blackman-Harris",
            "blackman-harris",
            "Lac",
            "lac",
            "Lanczos",
            "lanczos"
          ]
        }, 
        {
          "default": 0.4, 
          "field": "sigma", 
          "type": "numeric", 
          "description": "Standard deviation for the Gaussian window relative to half the window length. I.e. at N/2 - (N/2 * sigma) the window amplitude will be 0.5."
        }, 
        {
          "default": 0, 
          "field": "alpha0", 
          "type": "numeric", 
          "description": "alpha0 for Blackmann(-Harris) / Bartlett-Hann windows (optional!)"
        }, 
        {
          "default": 0, 
          "field": "alpha1", 
          "type": "numeric", 
          "description": "alpha1 for Blackmann(-Harris) / Bartlett-Hann windows (optional!)"
        }, 
        {
          "default": 0, 
          "field": "alpha2", 
          "type": "numeric", 
          "description": "alpha2 for Blackmann(-Harris) / Bartlett-Hann windows (optional!)"
        }, 
        {
          "default": 0, 
          "field": "alpha3", 
          "type": "numeric", 
          "description": "alpha3 for Blackmann-Harris window (optional!)"
        }, 
        {
          "default": 0.16, 
          "field": "alpha", 
          "type": "numeric", 
          "description": "alpha for the Blackmann window"
        }, 
        {
          "default": 0, 
          "field": "fade", 
          "type": "numeric", 
          "description": "Fade percentage (0 - 0.5) for fading edges to 0 with a half raised cosine function (0 = no fade, default)"
        }, 
        {
          "default": 0, 
          "field": "squareRoot", 
          "type": "numeric", 
          "description": "1 = use square root of 'winFunc' as actual window function (e.g. to get a root raised cosine window).", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": null, 
          "field": "saveWindowToFile", 
          "type": "string", 
          "description": "Save window to text file (comma separated coefficients) of given name. If NULL (default) nothing will be saved."
        }
      ], 
      "component": "cWindower", 
      "readsFromLevels": [
        "reader.dmLevel"
      ], 
      "baseComponent": "cVectorProcessor"
    }, 
    {
      "description": "This component performs elementary operations on vectors (i.e. basically everything that does not require history or context, everything that can be performed on single vectors w/o external data (except for constant parameters, etc.))", 
      "writesToLevels": [
        "writer.dmLevel"
      ], 
      "fields": [
        {
          "default": "norm", 
          "field": "operation", 
          "type": "string", 
          "description": "A string which specifies the type of operation to perform:\nnorm = normalise vector length (euclidean norm, L2) to 1\nnr1 = normalise range to +1, -1\nnr0 = normalise range to +1, 0\nmul = multiply vector by param1\nadd = add param1 to each element\nlog = compute natural logarithm\nlgA = compute logarithm to base param1\nnl1 = normalise vector sum (L1 norm) to 1\nsqrt = compute square root\npow = take values to the power of param1\nexp = raise param1 to the power of the vector elements\nee = raise the base e to the power of the vector elements\nabs = take absolute value of each element\nagn = add Gaussian noise with mean param1 and std.dev. param2\nmin = take the min of vector and param1\nmax = take the max of vector and param1\nsum = compute sum of vector elements, there will be a single output only\nssm = compute sum of squared vector elements, there will be a single output only\nll1 = compute sum of vector elements normalised by the number of vector elements, there will be a single output only\nll2 = compute euclidean length (root of sum of squares normalised by vector length), there will be a single output only\nfla(tten) = flattening of comb filter energy spectra, as in 2007 ICASSP Paper and Ballroom dance style recognition.\ndBp = convert a power to decibel with 10*log10(x).\ndBv = convert an amplitude/magnitude/voltage to decibel with 20*log10(x)\nfconv_aaa_bbb = convert frequency from scale aaa to scale bbb\nlin = linear (Hz)\nbark = Bark (Traunmueller, 1990)\nmel = Mel-scale\noct = semitone/octave scale (music), param1 = freq. of first note in Hz.", 
          "allowedValues": [
            "norm", 
            "nr1", 
            "nr0", 
            "mul", 
            "add", 
            "log", 
            "lgA", 
            "nl1", 
            "sqrt", 
            "pow", 
            "exp", 
            "ee", 
            "abs", 
            "agn", 
            "min", 
            "max", 
            "sum", 
            "ssm", 
            "ll1", 
            "ll2", 
            "fla", 
            "flatten", 
            "dBp", 
            "dBv", 
            "fconv_lin_bark", 
            "fconv_lin_mel", 
            "fconv_lin_oct", 
            "fconv_bark_lin", 
            "fconv_bark_mel", 
            "fconv_bark_oct", 
            "fconv_mel_lin", 
            "fconv_mel_bark", 
            "fconv_mel_oct", 
            "fconv_oct_lin", 
            "fconv_oct_bark", 
            "fconv_oct_mel"
          ]
        }, 
        {
          "default": 1, 
          "field": "param1", 
          "type": "numeric", 
          "description": "parameter 1"
        }, 
        {
          "default": 1, 
          "field": "param2", 
          "type": "numeric", 
          "description": "parameter 2"
        }, 
        {
          "default": 1e-12, 
          "field": "logfloor", 
          "type": "numeric", 
          "description": "floor for log operation"
        }, 
        {
          "default": 0, 
          "field": "powOnlyPos", 
          "type": "numeric", 
          "description": "if 'operation' = 'pow', do not take negative values to the power of 'param1'; instead, output 0. This is necessary to avoid 'nan' values if the exponent is rational.", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": null, 
          "field": "nameBase", 
          "type": "string", 
          "description": "base of output feature name when performing n->1 mapping operations (currently 'euc' and 'sum')"
        }, 
        {
          "default": 0, 
          "field": "appendOperationToName", 
          "type": "numeric", 
          "description": "(1/0 = yes/no) append the operation name from the 'operation' option to the feature name. This will override any nameAppend option (inherited from cDataProcessor).", 
          "allowedValues": [
            0, 
            1
          ]
        }
      ], 
      "component": "cVectorOperation", 
      "readsFromLevels": [
        "reader.dmLevel"
      ], 
      "baseComponent": "cVectorProcessor"
    }, 
    {
      "description": "This component copies only those frames from the input to the output that match a certain threshold criterion, i.e. where a specified value N exceeds a certain threshold.", 
      "writesToLevels": [
        "writer.dmLevel"
      ], 
      "fields": [
        {
          "default": 1, 
          "field": "threshold", 
          "type": "numeric", 
          "description": "Threshold for selection (see also 'invert' option)"
        }, 
        {
          "default": 0, 
          "field": "adaptiveThreshold", 
          "type": "numeric", 
          "description": "1/0 = on/off, use an adaptive threshold given by a running average (see adaptationLength[Sec] option).", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 2, 
          "field": "adaptationLengthSec", 
          "type": "numeric", 
          "description": "Length of running average for adaptive threshold in seconds"
        }, 
        {
          "default": 200, 
          "field": "adaptationLength", 
          "type": "numeric", 
          "description": "Length of running average for adaptive threshold in frames (if set, overrides the adaptationLengthSec; also used as default if neither option is specified)"
        }, 
        {
          "default": 0, 
          "field": "debugAdaptiveThreshold", 
          "type": "numeric", 
          "description": "If > 0, the interval (in frames) at which to output the current adaptive threshold to the log at log-level 3."
        }, 
        {
          "default": 0, 
          "field": "idx", 
          "type": "numeric", 
          "description": "The index of element to base the selection decision on. Currently only 1 element is supported, NO vector based thresholds etc. are possible."
        }, 
        {
          "default": 0, 
          "field": "invert", 
          "type": "numeric", 
          "description": "1 = output the frame when element[idx] < threshold ; 0 = output the frame if element[idx] => threshold", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "allowEqual", 
          "type": "numeric", 
          "description": "if this option is set to 1, output the frame also, when element[idx] == threshold", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "removeIdx", 
          "type": "numeric", 
          "description": "1 = remove field element[idx] in output vector ; 0 = keep it", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "zeroVec", 
          "type": "numeric", 
          "description": "1 = instead of not writing output to the output level if selection threshold is not met, output a vector with all values set to 'outputVal', which is 0 by default (removeIdx options still has the same effect).", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "outputVal", 
          "type": "numeric", 
          "description": "Value all output elements will be set to when 'zeroVec=1'."
        }
      ], 
      "component": "cValbasedSelector", 
      "readsFromLevels": [
        "reader.dmLevel"
      ], 
      "baseComponent": "cDataProcessor"
    }, 
    {
      "description": "This component computes the indices of the features with the maximum absolute values per frame.", 
      "writesToLevels": [
        "writer.dmLevel"
      ], 
      "fields": [
        {
          "default": "maxIndex", 
          "field": "nameAppend", 
          "type": "string", 
          "description": "A string suffix to append to the input field names (default: empty)", 
          "overridden": true
        }, 
        {
          "default": 1, 
          "field": "nIndices", 
          "type": "numeric", 
          "description": "The number of indices to compute"
        }, 
        {
          "default": 1, 
          "field": "minFeature", 
          "type": "numeric", 
          "description": "Start with this feature in computing the maximum index (1 = first feature)"
        }, 
        {
          "default": 0, 
          "field": "maxFeature", 
          "type": "numeric", 
          "description": "End with this feature in computing the maximum index (0 = last feature)"
        }, 
        {
          "default": 0, 
          "field": "randNoise", 
          "type": "numeric", 
          "description": "If > 0, add random noise with given range (+-'randNoise') to index values."
        }
      ], 
      "component": "cMaxIndex", 
      "readsFromLevels": [
        "reader.dmLevel"
      ], 
      "baseComponent": "cVectorProcessor"
    }, 
    {
      "description": "This component performs mean normalizing on a data series. A 2-pass analysis of the data is performed, which makes this component unusable for on-line analysis. In the first pass, no output is produced and the mean value (over time) is computed for each input element. In the second pass the mean vector is subtracted from all input frames, and the result is written to the output dataMemory level. Attention: Due to the 2-pass processing the input level must be large enough to hold the whole data sequence.", 
      "writesToLevels": [
        "writer.dmLevel"
      ], 
      "fields": [
        {
          "default": "amean", 
          "field": "meanNorm", 
          "type": "string", 
          "description": "Type of mean normalisation: amean, rqmean, absmean  (arithmetic, root squared/quadratic, absolute value mean).", 
          "allowedValues": [
            "amean", 
            "rqmean", 
            "absmean"
          ]
        }, 
        {
          "default": 0, 
          "field": "symmSubtract", 
          "type": "numeric", 
          "description": "1 = Perform symmetric subtraction of rqmean or absmean u. I.e. for negative values add u and for positive values subtract u.", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "subtractClipToZero", 
          "type": "numeric", 
          "description": "1 = If symmSubtract is enabled and a value would change sign, clip it to 0. Otherwise, clip negative values to 0 when subtracting any kind of mean. 0 = do nothing special.", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "specEnorm", 
          "type": "numeric", 
          "description": "performs spectral magnitude energy normalisation", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "htkLogEnorm", 
          "type": "numeric", 
          "description": "performs HTK compatible energy normalisation on all input fields instead of the default action of mean subtraction. The energy normalisation subtracts the maximum value of each value in the sequence and adds 1.", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "multiLoopMode", 
          "type": "numeric", 
          "description": "1 = Support the new tick loop mode which can have unlimited EOI iterations. In this mode the means will be collected until the EOI condition is signalled. During the EOI condition nothing will be done (except computing means from the remaining data). During the next non EOI condition, the means will be subtracted from the old input, and (if new data is available - e.g. from a next segment) a new set of means will be computed. If old and new data is processed, the cycle begins anew. If this option is disabled, the means are subtracted while the first EOI condition is signalled. This is for compatibility with old behaviour of the tick loop.", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "printMeans", 
          "type": "numeric", 
          "description": "1 = print the mean vector once it has been computed.", 
          "allowedValues": [
            0, 
            1
          ]
        }
      ], 
      "component": "cFullinputMean", 
      "readsFromLevels": [
        "reader.dmLevel"
      ], 
      "baseComponent": "cDataProcessor"
    }, 
    {
      "description": "This component performs mean normalizing on a data series. A 2-pass analysis of the data is performed, which makes this component unusable for on-line analysis. In the first pass, no output is produced and the mean value (over time) is computed for each input element. In the second pass the mean vector is subtracted from all input frames, and the result is written to the output dataMemory level. Attention: Due to the 2-pass processing the input level must be large enough to hold the whole data sequence.", 
      "writesToLevels": [
        "writer.dmLevel"
      ], 
      "fields": [
        {
          "default": 0, 
          "field": "htkLogEnorm", 
          "type": "numeric", 
          "description": "performs HTK compatible energy normalisation on all input fields instead of the default action of mean subtraction. The energy normalisation subtracts the maximum value of each value in the sequence and adds 1.", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": null, 
          "field": "messageRecp", 
          "typeHint": "componentInstance", 
          "type": "string", 
          "description": "recipient list for new (timestamp adjusted) turnFrameTime message"
        }
      ], 
      "component": "cFullturnMean", 
      "readsFromLevels": [
        "reader.dmLevel"
      ], 
      "sendsMessagesToComponents": [
        "messageRecp"
      ],
      "baseComponent": "cDataProcessor"
    }, 
    {
      "writesToLevels": [
        "writer.dmLevel"
      ], 
      "fields": [
        {
          "default": 1, 
          "field": "blocksize_sec", 
          "type": "numeric", 
          "description": "The size of data blocks to write at once, in seconds", 
          "overridden": true
        }, 
        {
          "default": "input.wav", 
          "field": "filename", 
          "type": "string", 
          "description": "The filename of the PCM wave file to load. Only uncompressed RIFF files are supported. Use a suitable converter (mplayer, for example) to convert other formats to wave."
        }, 
        {
          "default": 0, 
          "field": "properTimestamps", 
          "type": "numeric", 
          "description": "1 = set smileTime for every input sample based on sample time (a bit inefficient); otherwise the default is to use the current system time at which the samples are read from the file.", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "monoMixdown", 
          "type": "numeric", 
          "description": "Mix down all channels to 1 mono channel (1=on, 0=off)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": null, 
          "field": "segmentList", 
          "type": "string", 
          "description": "List of segments with start end times. (NOT IMPLEMENTED YET)."
        }, 
        {
          "default": 0, 
          "field": "start", 
          "type": "numeric", 
          "description": "The read start point in seconds from the beginning of the file"
        }, 
        {
          "default": -1, 
          "field": "end", 
          "type": "numeric", 
          "description": "The read end point in seconds from the beginning of file (-1 = read to EoF)"
        }, 
        {
          "default": 0, 
          "field": "endrel", 
          "type": "numeric", 
          "description": "The read end point in seconds from the END of file (only if 'end' = -1, or not set)"
        }, 
        {
          "default": 0, 
          "field": "startSamples", 
          "type": "numeric", 
          "description": "The read start in samples from the beginning of the file (this overwrites 'start')"
        }, 
        {
          "default": -1, 
          "field": "endSamples", 
          "type": "numeric", 
          "description": "The read end in samples from the beginning of the file (this overwrites 'end' and 'endrelSamples')"
        }, 
        {
          "default": 0, 
          "field": "endrelSamples", 
          "type": "numeric", 
          "description": "The read end in samples from the END of file (this overwrites 'endrel')"
        }, 
        {
          "default": 0, 
          "field": "noHeader", 
          "type": "numeric", 
          "description": "1 = treat the input file as 'raw' format, i.e. don't read the RIFF header. You must specify the parameters 'sampleRate', 'channels', and possibly 'sampleSize' if the defaults don't match your file format", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 16000, 
          "field": "sampleRate", 
          "type": "numeric", 
          "description": "Set/force the sampling rate that is assigned to the input data (required for reading raw files)"
        }, 
        {
          "default": 2, 
          "field": "sampleSize", 
          "type": "numeric", 
          "description": "Set/force the samplesize (in bytes) (required for reading raw files)"
        }, 
        {
          "default": 1, 
          "field": "channels", 
          "type": "numeric", 
          "description": "Set/force the number of channels (required for reading raw files)"
        }, 
        {
          "default": "pcm", 
          "field": "outFieldName", 
          "type": "string", 
          "description": "Set the name of the output field, containing the pcm data"
        }
      ], 
      "component": "cWaveSource", 
      "description": "This component reads an uncompressed RIFF (PCM-WAVE) file and saves it as a stream to the data memory. For most feature extraction tasks you will now require a cFramer component.", 
      "baseComponent": "cDataSource"
    }, 
    {
      "writesToLevels": [
        "writer.dmLevel"
      ], 
      "fields": [
        {
          "default": "input.arff", 
          "field": "filename", 
          "type": "string", 
          "description": "The filename of the ARFF file to read"
        }, 
        {
          "default": 0, 
          "field": "skipFirst", 
          "type": "numeric", 
          "description": "the number of numeric(!) attributes to skip at the beginning"
        }, 
        {
          "default": 0, 
          "field": "skipClasses", 
          "type": "numeric", 
          "description": "The number of numeric(!) (or real) attributes (values) at end of each instance to skip (Note: nominal and string attributes are ignored anyway, this option only applies to the last numeric attributes, even if they are followd by string or nominal aatributes). To have more fine grained control over selecting attributes, please use the component cDataSelector!"
        }, 
        {
          "default": 0, 
          "field": "saveInstanceIdAsMetadata", 
          "type": "numeric", 
          "description": "1/0 = on/off : save the first string attribute of the arff file as instance ID string the vector meta data (e.g. for use by the winToVecProcessor component in the frameMode=meta mode).", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "saveTargetsAsMetadata", 
          "type": "numeric", 
          "description": "1/0 = on/off : save everything after the last numeric attribute as meta-data string. This can be read by arffSink and appended to the instances instead of reading individual targets from the config.", 
          "allowedValues": [
            0, 
            1
          ]
        }
      ], 
      "component": "cArffSource", 
      "description": "This component reads WEKA ARFF files. The full ARFF format is not yet supported, but a simplified form, such as the files generated by the cArffSink component can be parsed and read. This component reads all (and only!!) 'numeric' or 'real' attributes from an ARFF file (WEKA file format) into the specified data memory level. Thereby each instance (i.e. one line in the arff file's data section) corresponds to one frame. The frame period is 0 by default (aperiodic level), use the 'period' option to change this and use a fixed period for each frame/instance. Automatic generation of frame timestamps from a 'timestamp' field in the Arff file is not yet supported.", 
      "baseComponent": "cDataSource"
    }, 
    {
      "writesToLevels": [
        "writer.dmLevel"
      ], 
      "fields": [
        {
          "default": "input.csv", 
          "field": "filename", 
          "type": "string", 
          "description": "The CSV file to read"
        }, 
        {
          "default": ";", 
          "field": "delimChar", 
          "type": "char", 
          "description": "The CSV delimiter character to use. Usually ',' or ';'."
        }, 
        {
          "default": "auto", 
          "field": "header", 
          "type": "string", 
          "description": "yes/no/auto : wether to read the first line of the CSV file as header (yes), or treat it as numeric data (no), or automatically determine from the first field in the first line whether to read the header or not (auto).", 
          "allowedValues": [
            "yes", 
            "no", 
            "auto"
          ]
        }, 
        {
          "default": 0, 
          "field": "start", 
          "type": "numeric", 
          "description": "Start at line 'start', not counting the header line. The first line after the (optional) header line is line 0 (also the default)."
        }, 
        {
          "default": -1, 
          "field": "end", 
          "type": "numeric", 
          "description": "Read up to line 'end'. The number of the line given here is the last line that will be read. 0 is the first line in the file (excluding header). The default '-1' refers to the last line in the file (this is also the default)."
        }
      ], 
      "component": "cCsvSource", 
      "description": "This component reads CSV (Comma seperated value) files. It reads all columns as attributes into the data memory. One line represents one frame. The first line may contain a header with the feature names (see header=yes/no/auto option).", 
      "baseComponent": "cDataSource"
    }, 
    {
      "writesToLevels": [
        "writer.dmLevel"
      ], 
      "fields": [
        {
          "default": 10, 
          "field": "blocksize", 
          "type": "numeric", 
          "description": "The size of data blocks to write at once (to data memory) in frames", 
          "overridden": true
        }, 
        {
          "default": "input.htk", 
          "field": "filename", 
          "type": "string", 
          "description": "HTK parameter file to read"
        }, 
        {
          "default": "htkpara", 
          "field": "featureName", 
          "type": "string", 
          "description": "The name of the array-field which is to be created in the data memory output level for the data array read from the HTK file"
        }, 
        {
          "default": 0, 
          "field": "featureFrameSize", 
          "type": "numeric", 
          "description": "The size of the feature frames in seconds."
        }, 
        {
          "default": 16000, 
          "field": "forceSampleRate", 
          "type": "numeric", 
          "description": "Set a given sample rate for the output level. Typically the base period of the input level will be used for this purpose, but when reading frame-based data from feature files, for example, this information is not available. This option overwrites the input level base period, if it is set."
        }
      ], 
      "component": "cHtkSource", 
      "description": "This component reads data from binary HTK parameter files.", 
      "baseComponent": "cDataSource"
    }, 
    {
      "readsFromLevels": [
        "reader.dmLevel"
      ], 
      "fields": [], 
      "component": "cNullSink", 
      "description": "This component reads data vectors from the data memory and 'destroys' them, i.e. does not write them anywhere. This component has no configuration options.", 
      "baseComponent": "cDataSink"
    }, 
    {
      "readsFromLevels": [
        "reader.dmLevel"
      ], 
      "fields": [
        {
          "default": "smileoutput.csv", 
          "field": "filename", 
          "type": "string", 
          "description": "The CSV file to write to. An empty filename (or '?' as the filename) disables this sink component."
        }, 
        {
          "default": ";", 
          "field": "delimChar", 
          "type": "char", 
          "description": "The column delimiter character to use (usually ',' or ';') (NOTE: use '<space>' or '<tab>' for these special characters respectively)"
        }, 
        {
          "default": 0, 
          "field": "lag", 
          "type": "numeric", 
          "description": "output data <lag> frames behind"
        }, 
        {
          "default": 0, 
          "field": "append", 
          "type": "numeric", 
          "description": "1 = append to an existing file, or create a new file; 0 = overwrite an existing file, or create a new file", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "timestamp", 
          "type": "numeric", 
          "description": "1 = print a timestamp attribute for each output frame (1/0 = yes/no)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "frameTime", 
          "type": "numeric", 
          "description": "(same as 'timestamp') 1 = print a timestamp attribute for each output frame (1/0 = yes/no)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "number", 
          "type": "numeric", 
          "description": "1 = print an instance number (= frameIndex) attribute for each output frame (1/0 = yes/no)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "frameIndex", 
          "type": "numeric", 
          "description": "(same as 'number') 1 = print an instance number (= frameIndex) attribute for each output frame (1/0 = yes/no)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "printHeader", 
          "type": "numeric", 
          "description": "1 = print a header line as the first line in the CSV file. This line contains the attribute names separated by the delimiter character.", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "flush", 
          "type": "numeric", 
          "description": "1 = flush data to file after every line written (might give low performance for small lines!).", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": null, 
          "field": "instanceBase", 
          "type": "string", 
          "description": "if not empty, print instance name attribute <instanceBase_Nr>"
        }, 
        {
          "default": null, 
          "field": "instanceName", 
          "type": "string", 
          "description": "if not empty, print instance name attribute <instanceName>"
        }
      ], 
      "component": "cCsvSink", 
      "description": "This component exports data in CSV (comma-separated-value) format used in many spreadsheet applications. As the first line of the CSV file a header line may be printed, which contains a delimiter separated list of field names of the output values.", 
      "baseComponent": "cDataSink"
    }, 
    {
      "readsFromLevels": [
        "reader.dmLevel"
      ], 
      "fields": [
        {
          "default": "datadump.dat", 
          "field": "filename", 
          "type": "string", 
          "description": "The filename of the output file (if it doesn't exist it will be created)."
        }, 
        {
          "default": 0, 
          "field": "lag", 
          "type": "numeric", 
          "description": "output data <lag> frames behind"
        }, 
        {
          "default": 0, 
          "field": "append", 
          "type": "numeric", 
          "description": "1 = append to an existing file, or create a new file; 0 = overwrite an existing file, or create a new file", 
          "allowedValues": [
            0, 
            1
          ]
        }
      ], 
      "component": "cDatadumpSink", 
      "description": "This component writes dataMemory data to a raw binary file (e.g. for matlab import). The binary file consits of 32-bit float values representing the data values, concattenated frame by frame along the time axis. The first two float values in the file resemble the file header, an thus indicate the dimension of the matrix (1: size of frames, 2: number of frames in file). The total file size in bytes is thus <size of frames>x<number of frames>x4 + 2.", 
      "baseComponent": "cDataSink"
    }, 
    {
      "readsFromLevels": [
        "reader.dmLevel"
      ], 
      "fields": [
        {
          "description": "1 = show an error message if no output was written by this sink during this run.", 
          "overridden": true, 
          "default": 1, 
          "allowedValues": [
            0, 
            1
          ], 
          "field": "errorOnNoOutput", 
          "type": "numeric"
        }, 
        {
          "default": "smileoutput.arff", 
          "field": "filename", 
          "type": "string", 
          "description": "The filename of the ARFF file to write to. An empty filename disables this sink component."
        }, 
        {
          "default": 0, 
          "field": "lag", 
          "type": "numeric", 
          "description": "output data <lag> frames behind"
        }, 
        {
          "default": 0, 
          "field": "append", 
          "type": "numeric", 
          "description": "1 = append to an existing file, or create a new file; 0 = overwrite an existing file, or create a new file", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": "smile", 
          "field": "relation", 
          "type": "string", 
          "description": "The name of the ARFF relation (@relation tag)"
        }, 
        {
          "default": "", 
          "field": "instanceBase", 
          "type": "string", 
          "description": "If this string is not empty and not equal to '-', cArffSink prints an instance name attribute <instanceBase_Nr>, where Nr is the number (continuous index) of current instance"
        }, 
        {
          "default": "", 
          "field": "instanceName", 
          "type": "string", 
          "description": "If this string is not empty and not equal to '-', cArffSink prints an instance name attribute <instanceName> for all instances. instanceName overwrites instanceBase."
        }, 
        {
          "default": 0, 
          "field": "instanceNameFromMetadata", 
          "type": "numeric", 
          "description": "1/0 = yes/no. Use instanceName from metadata, if available. If this is not available, printing of an instance name depends on 'instanceName' and 'instanceBase' attributes.", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "useTargetsFromMetadata", 
          "type": "numeric", 
          "description": "1/0 = yes/no. Use string of target values/classes from vector metadata instead of building it from the 'target' array. If no metadata is present the target string will be built from the 'target' array", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "number", 
          "type": "numeric", 
          "description": "'Synonym' for the 'frameIndex' option: 1 = print an instance number (= frameIndex) attribute (continuous index) (1/0 = yes/no)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "timestamp", 
          "type": "numeric", 
          "description": "'Synonym' for the 'frameTime' option: 1 = print a timestamp (=frameTime) attribute (1/0 = yes/no)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "frameIndex", 
          "type": "numeric", 
          "description": "1 = print an instance number (= frameIndex) attribute (continuous index) (1/0 = yes/no) (same as 'number' option)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "frameTime", 
          "type": "numeric", 
          "description": "1 = print a timestamp (=frameTime) attribute (1/0 = yes/no) (same as 'timestamp' option)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "frameTimeAdd", 
          "type": "numeric", 
          "description": "Add this value to the framTime values (unit: seconds)"
        }, 
        {
          "default": 0, 
          "field": "frameLength", 
          "type": "numeric", 
          "description": "1 = print a frame length attribute (1/0 = yes/no).", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "field": "class", 
          "type": "arffClass", 
          "description": "This is an array defining the optional class target attributes (grund-truths that you want to have included in your arff file along with your features). It is an array for multiple targets/classes. See also the 'target' array."
        }, 
        {
          "default": 1, 
          "field": "printDefaultClassDummyAttribute", 
          "type": "numeric", 
          "description": "1/0 = yes/no, print default class dummy attribute if no class attributes are given in the class[] array. Default is 1 for backward compatibility. Set to 0 to remove default class attribute.", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "field": "target", 
          "type": "arffTarget", 
          "description": "The ground truth targets (classes) for each target (class) attribute"
        }
      ], 
      "component": "cArffSink", 
      "description": "This component writes dataMemory data to an ARFF file (WEKA). Depending on your config an instance name field, a frame index, and a frame time field can be added as well as multiple class/target attributes. See the config type documentation for more details.", 
      "baseComponent": "cDataSink"
    }, 
    {
      "readsFromLevels": [
        "reader.dmLevel"
      ], 
      "fields": [
        {
          "default": "smileoutput.htk", 
          "field": "filename", 
          "type": "string", 
          "description": "HTK parameter file to write to (and create)"
        }, 
        {
          "default": 0, 
          "field": "lag", 
          "type": "numeric", 
          "description": "If > 0, enable output of data <lag> frames behind"
        }, 
        {
          "default": 0, 
          "field": "append", 
          "type": "numeric", 
          "description": "1 = append to existing file (0 = don't append)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 9, 
          "field": "parmKind", 
          "type": "numeric", 
          "description": "HTK parmKind header field (0=WAVEFORM, 1=LPC, 2=LPREFC, 3=LPCEPSTRA, 4=LPDELCEP, 5=IREFC, 6=MFCC, 7=FBANK (log), 8=MELSPEC (linear), 9=USER, 10=DISCRETE, 11=PLPCC ;\nQualifiers (added): 64=_E, 128=_N, 256=_D, 512=_A, 1024=_C, 2048=_Z, 4096=_K, 8192=_0)"
        }, 
        {
          "default": 0.01, 
          "field": "forcePeriod", 
          "type": "numeric", 
          "description": "Set a value here to force the output period to a fixed value (usually 0.01) to avoid broken HTK files for periods > 0.06s"
        }
      ], 
      "component": "cHtkSink", 
      "description": "This component writes dataMemory data to a binary HTK parameter file.", 
      "baseComponent": "cDataSink"
    }, 
    {
      "readsFromLevels": [
        "reader.dmLevel"
      ], 
      "fields": [
        {
          "default": 1, 
          "field": "blocksize_sec", 
          "type": "numeric", 
          "description": "The size of the data blocks to read at once, in seconds", 
          "overridden": true
        }, 
        {
          "default": "output.wav", 
          "field": "filename", 
          "type": "string", 
          "description": "The filename of the PCM wave file to write data to"
        }, 
        {
          "default": "16bit", 
          "field": "sampleFormat", 
          "type": "string", 
          "description": "openSMILE uses float for all data internally. Thus you must specify your desired sample format for the wave files here. Available formats:\n'8bit' : 8-bit signed\n'16bit' : 16-bit signed\n'24bit' : 24-bit signed\n'24bitp' : 24-bit signed packed in 3 bytes\n'32bit' : 32-bit signed integer\n'float' : 32-bit float", 
          "allowedValues": [
            "8bit", 
            "16bit", 
            "24bit", 
            "24bitp", 
            "32bit", 
            "float"
          ]
        }, 
        {
          "default": 0, 
          "field": "flushData", 
          "type": "numeric", 
          "description": "1/0 (on/off) : flush data to disk and update wave header after writing a frame to the output file (default behaviour is to flush only when the file is closed and openSMILE is being terminated via Ctrl+C or at the end-of-input in offline mode)", 
          "allowedValues": [
            0, 
            1
          ]
        }
      ], 
      "component": "cWaveSink", 
      "description": "This component saves data to an uncompressed PCM WAVE file", 
      "baseComponent": "cDataSink"
    }, 
    {
      "readsFromLevels": [
        "reader.dmLevel"
      ], 
      "fields": [
        {
          "default": "output_segment_", 
          "field": "fileBase", 
          "type": "string", 
          "description": "The base of the wave file name, if writing multiple output files (multiOut=1), or else the filename of the wave file to write to"
        }, 
        {
          "default": ".wav", 
          "field": "fileExtension", 
          "type": "string", 
          "description": "The file extension to use when writing multiple output files (multiOut=1), else this option is ignored (the extension is set via 'fileBase' then which specifies the full file name)"
        }, 
        {
          "default": "%s%04d%s", 
          "field": "fileNameFormatString", 
          "type": "string", 
          "description": "Specifies how the filename will be formatted (printf compatible syntax, three parameters are available in the given order: fileBase (string), current index (integer), fileExtension (string)), the default should be reasonable, it generates filenames such as 'output_segment_XXXX.wav'."
        }, 
        {
          "default": 1, 
          "field": "startIndex", 
          "type": "numeric", 
          "description": "The index of the first file for consecutive numbering of output files (if multiOut=1)"
        }, 
        {
          "default": 0.2, 
          "field": "preSil", 
          "type": "numeric", 
          "description": "Specifies the amount of silence at the turn beginning in seconds, i.e. the lag of the turn detector. This is the length of the data that will be added to the current segment prior to the turn start time received in the message from the turn detector component."
        }, 
        {
          "default": 0.3, 
          "field": "postSil", 
          "type": "numeric", 
          "description": "Specifies the amount of silence at the turn end in seconds. This is the length of the data that will be added to the current segment after to the turn end time received in the message from the turn detector component."
        }, 
        {
          "default": 1, 
          "field": "multiOut", 
          "type": "numeric", 
          "description": "1 = enable multiple file mode, i.e. multiple files segmented by turnStart/turnEnd messages ; 0 = write all frames (only between turnStart/turnEnd messages) concatenated to one file, i.e. effectively filtering out non-turn audio.", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 16000, 
          "field": "forceSampleRate", 
          "type": "numeric", 
          "description": "force sample rate to given value (if not set, it is determined from the reader's frame size in bytes, which may be inaccurate)"
        }, 
        {
          "default": "16bit", 
          "field": "sampleFormat", 
          "type": "string", 
          "description": "openSMILE uses float for all data internally. Thus you must specify your desired sample format for the wave files here. Available formats:\n'8bit' : 8-bit signed\n'16bit' : 16-bit signed\n'24bit' : 24-bit signed\n'24bitp' : 24-bit signed packed in 3 bytes\n'32bit' : 32-bit signed integer\n'float' : 32-bit float", 
          "allowedValues": [
            "8bit", 
            "16bit", 
            "24bit", 
            "24bitp", 
            "32bit", 
            "float"
          ]
        }, 
        {
          "default": 0, 
          "field": "showSegmentTimes", 
          "type": "numeric", 
          "description": "1 = show start and end times relative to input of segments that are saved by this sink.", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": null, 
          "field": "saveSegmentTimes", 
          "type": "string", 
          "description": "1 = save turn times (start, end, and filename) to text file.", 
          "allowedValues": [
            0, 
            1
          ]
        }
      ], 
      "component": "cWaveSinkCut", 
      "description": "This component writes data to uncompressed PCM WAVE files. Only chunks, based on timings received via smile messages are written to files. The files may have consecutive numbers appended to the file name.", 
      "baseComponent": "cDataSink"
    }, 
    {
      "writesToLevels": [
        "writer.dmLevel"
      ], 
      "fields": [
        {
          "default": null, 
          "field": "kwList", 
          "type": "string", 
          "description": "text file with list of keywords (one word per line) to use for BoW"
        }, 
        {
          "default": 0, 
          "field": "kwListPrefixFilter", 
          "type": "numeric", 
          "description": "keywords in kwList file are expected to have a prefix 'prefix'. Only those keywords will be loaded from the list, everything else will be ignored (i.e. line not beginning with 'prefix')."
        }, 
        {
          "default": "BOW_", 
          "field": "prefix", 
          "type": "string", 
          "description": "prefix to append to keywords to create feature names"
        }, 
        {
          "default": 0, 
          "field": "count", 
          "type": "numeric", 
          "description": "1=count frequency of keyword in input / 0=binary output only (keyword present/not present)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": null, 
          "field": "textfile", 
          "type": "string", 
          "description": "A file that contains sentences (words separated by spaces), which will be converted to BOW vectors. You can use this feature to use this component in offline mode (in online mode the text strings will be received as smile messages)."
        }, 
        {
          "default": null, 
          "field": "singleSentence", 
          "type": "string", 
          "description": "A single sentence to be converted to a BoW vector. Words must be separated by spaces."
        }, 
        {
          "default": 1, 
          "field": "syncWithAudio", 
          "type": "numeric", 
          "description": "If set to 1, wait for a 'turnFrameTime' message before writing the BoW vector to the output level. This applies only in message-based mode, i.e. this option has no effect if either 'textfile' or 'singleSentence' are used.", 
          "allowedValues": [
            0, 
            1
          ]
        }
      ], 
      "component": "cBowProducer", 
      "description": "This component produces a bag-of-words vector from the keyword spotter result message.", 
      "baseComponent": "cDataSource"
    }, 
    {
      "writesToLevels": [
        "writer.dmLevel"
      ], 
      "fields": [
        {
          "default": 1, 
          "field": "nFields", 
          "type": "numeric", 
          "description": "The number of fields in the output vector, set to -1 to use the size of the 'nElements' array or the 'fieldNames' array, if no nElements array is given."
        }, 
        {
          "default": 1, 
          "field": "nElements", 
          "type": "numeric", 
          "description": "An array of number of values/elements for each field in the output vector (default is 1)"
        }, 
        {
          "default": null, 
          "field": "fieldNames", 
          "type": "string", 
          "description": "An array of names of fields in the output vector (default for all: noiseN, where N is the field number)."
        }, 
        {
          "default": "white", 
          "field": "signalType", 
          "type": "string", 
          "description": "The type of signal/noise to generate for ALL(!) output fields. If you want different types of signals for the individual fields, use multiple noise sources and combine the output vectors in a data reader.\nCurrently implemented noise and signal types are:\n'white' \t white gaussian noise, use parameters 'stddev' and 'mean' to tune.\n'const' \t constant value output, use 'constant' parameter to set this value.\n'sine' \t single sine wave (range -1 to +1), see 'signalPeriod' or 'frequency' option and 'phase'.\n'rect' \t rectangular periodic signal (range -1 to +1), see 'signalPeriod' or 'frequency' option and 'phase'.", 
          "allowedValues": [
            "white", 
            "const", 
            "sine", 
            "rect"
          ]
        }, 
        {
          "default": 1, 
          "field": "randSeed", 
          "type": "numeric", 
          "description": "Random seed, for pseudo random gaussian white noise"
        }, 
        {
          "default": 1, 
          "field": "scale", 
          "type": "numeric", 
          "description": "A scaling factor by which the generated signal is multiplied by"
        }, 
        {
          "default": 0, 
          "field": "const", 
          "type": "numeric", 
          "description": "The constant value for the 'constant' signal type"
        }, 
        {
          "default": 1, 
          "field": "signalPeriod", 
          "type": "numeric", 
          "description": "The period T in seconds for periodic signals (1.0/frequency). Don't forget to set the sample period via writer.levelconf.T or the 'period' option. Don't confuse this option with the 'period' option!"
        }, 
        {
          "default": 1, 
          "field": "frequency", 
          "type": "numeric", 
          "description": "The frequency in Hz of periodic signals (1.0/signalPeriod). This overrides the 'signalPeriod' option, if both are set."
        }, 
        {
          "default": 0, 
          "field": "phase", 
          "type": "numeric", 
          "description": "The initial phase of periodic signals in seconds."
        }, 
        {
          "default": 3, 
          "field": "length", 
          "type": "numeric", 
          "description": "The length of the signal to generate (in seconds), -1.0 for infinite"
        }, 
        {
          "default": -1, 
          "field": "lengthFrames", 
          "type": "numeric", 
          "description": "The length of signal to generate (in frames), -1 for infinite (overwrites 'length', if set)"
        }
      ], 
      "component": "cSignalGenerator", 
      "description": "This component provides a signal source. This source generates various noise types and pre-defined signals and value patterns. See the configuration documentation for a list of currently implemented types.", 
      "baseComponent": "cDataSource"
    }, 
    {
      "readsFromLevels": [
        "reader.dmLevel"
      ], 
      "fields": [
        {
          "default": "svm.model", 
          "field": "model", 
          "type": "string", 
          "description": "LibSVM or LibLINEAR model file(s) to load (see isLibLinearModel option for libLinear)."
        }, 
        {
          "default": null, 
          "field": "scale", 
          "type": "string", 
          "description": "LibSVM scale file(s) to load"
        }, 
        {
          "default": null, 
          "field": "fselection", 
          "type": "string", 
          "description": "Feature selection file(s) to apply (leave empty to use all features). The feature selection files must contain the exact names of the selected features, one feature per line."
        }, 
        {
          "default": 0, 
          "field": "nIgnoreEndSelection", 
          "type": "numeric", 
          "description": "number of string lines to ignore at the *end* of the feature selection file (only works for string/name lists, not for index lists!)"
        }, 
        {
          "default": null, 
          "field": "classes", 
          "type": "string", 
          "description": "Class name lookup file(s), which map the libsvm class indicies to actual class names (leave empty to display libsvm class numbers/indicies) [note: currently only ONE class name lookup file is supported!]"
        }, 
        {
          "default": 0, 
          "field": "predictProbability", 
          "type": "numeric", 
          "description": "1 = predict class probabilities (confidences) (0 = no)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "printParseableResult", 
          "type": "numeric", 
          "description": "1 = print easily parseable classification/regression result to stdout", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "printResult", 
          "type": "numeric", 
          "description": "1 = print classification/regression result to log", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": null, 
          "field": "saveResult", 
          "type": "string", 
          "description": "filename of text file the result(s) will be saved to"
        }, 
        {
          "default": null, 
          "field": "resultRecp", 
          "typeHint": "componentInstance", 
          "type": "string", 
          "description": "List of component(s) to send 'classificationResult' messages to (use , to separate multiple recepients), leave blank (NULL) to not send any messages"
        }, 
        {
          "default": "svm_result", 
          "field": "resultMessageName", 
          "type": "string", 
          "description": "Freely defineable name that is sent with 'classificationResult' message"
        }, 
        {
          "default": 1, 
          "field": "forceScale", 
          "type": "numeric", 
          "description": "1 = for the input values, enforce the range specified in the scale file by clipping out-of-range values (after scaling).", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "lag", 
          "type": "numeric", 
          "description": "read data <lag> frames behind (should always remain 0 for this component...?)"
        }, 
        {
          "default": 0, 
          "field": "useThread", 
          "type": "numeric", 
          "description": "1 = load the model and do the classification in a background thread, the data frames (inputs) will be stored in a queue and processed sequentially by the background thread (parallel processing is not implemented yet!).", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "loadModelBg", 
          "type": "numeric", 
          "description": "1 = if useThread=1 (and only then...) load the libsvm model and scale files in the background thread. openSMILE will start to run the tick loop, but classify incoming frames only after the model has been loaded. Up to then all incoming frames are discarded.", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "threadQueSize", 
          "type": "numeric", 
          "description": "max. number of frames to keep in queue (Set to 0 for an infinite number of frames)."
        }, 
        {
          "default": 0, 
          "field": "multiModelMode", 
          "type": "numeric", 
          "description": "1 = classify input data with all loaded models *in parallel* (you will have nModels output messages then). 0 = classify with first model by default. Switching of models is possible via a 'svmSinkSetModel' smile message.", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "batchMode", 
          "type": "numeric", 
          "description": "1 = similar to multiModelMode=1, classify using all models, however only one result message (containing multiple individual results) will be generated.", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "noVerify", 
          "type": "numeric", 
          "description": "1 = *DON'T* verify whether the support vector dimension matches the feature selection list dimension and the scale file dimension.", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": null, 
          "field": "modelResultName", 
          "type": "string", 
          "description": "Array of custom names sent as 'custData2' pointer with the classificationResult message for corresponding models. The dimensions of this array should match the dimensions of the 'model' array."
        }, 
        {
          "default": 0, 
          "field": "bgThreadPriority", 
          "type": "numeric", 
          "description": "The thread priority of the background predictor thread (currently only supported on windows), values -15 (idle) to 15 (real-time), while 0 is normal. This should be lower as or equal to the priority of the openSMILE main thread!"
        }
      ], 
      "component": "cLibsvmLiveSink", 
      "description": "This component classifies data from dataMemory 'on-the-fly' using the LibSVM or LibLINEAR library. Loading of ASCII and binary LibSVM models is supported, as well as application of LibSVM scale files and openSMILE feature selection lists.", 
      "baseComponent": "cDataSink",
      "sendsMessagesToComponents": [
        "resultRecp"
      ]
    }, 
    {
      "readsFromLevels": [
        "reader.dmLevel"
      ], 
      "fields": [
        {
          "default": null, 
          "field": "model", 
          "type": "string", 
          "description": "The name of the model file."
        }, 
        {
          "default": 0, 
          "field": "printParseableResult", 
          "type": "numeric", 
          "description": "1 = print easily parseable classification/regression result to stdout", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "printResult", 
          "type": "numeric", 
          "description": "1 = print classification/regression result to log", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": null, 
          "field": "saveResult", 
          "type": "string", 
          "description": "filename of text file the result(s) will be saved to"
        }, 
        {
          "default": null, 
          "field": "resultRecp", 
          "typeHint": "componentInstance", 
          "type": "string", 
          "description": "List of component(s) to send 'classificationResult' messages to (use , to separate multiple recepients), leave blank (NULL) to not send any messages"
        }, 
        {
          "default": "svm_result", 
          "field": "resultMessageName", 
          "type": "string", 
          "description": "Freely defineable name that is sent with 'classificationResult' message"
        }, 
        {
          "default": 0, 
          "field": "showStatsDebug", 
          "type": "numeric", 
          "description": "1 = show internal values for debugging and sanity checks.", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "ignoreLogitModel", 
          "type": "numeric", 
          "description": "1 = don't use a logistic model for probability estimates, if one is contained in the model.", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": "vote", 
          "field": "winningClassMethodName", 
          "type": "string", 
          "description": "prob = use probabilties instead of votes to determine the winning class, if a logistic model is used. vote = use the standard majority voting based on the distance", 
          "allowedValues": [
            "prob", 
            "vote"
          ]
        }
      ], 
      "component": "cSvmSink", 
      "description": "This is an example of a cDataSink descendant. It reads data from the data memory and prints it to the console. This component is intended as a template for developers.", 
      "baseComponent": "cDataSink",
      "sendsMessagesToComponents": [
        "resultRecp"
      ]
    }, 
    {
      "readsFromLevels": [
        "reader.dmLevel"
      ], 
      "fields": [
        {
          "default": null, 
          "field": "netfile", 
          "type": "string", 
          "description": "The file which contains the trained network created by rnnlib"
        }, 
        {
          "default": null, 
          "field": "actoutput", 
          "type": "string", 
          "description": "A text file to which the raw output activations will be saved. Each frame will be saved on a separate line (this is rnnlib's activation output format transposed)."
        }, 
        {
          "default": null, 
          "field": "classoutput", 
          "type": "string", 
          "description": "A text file to which the winning class label will be saved (task = classification or transcription). The result for each frame will be saved on a separate line."
        }, 
        {
          "default": null, 
          "field": "classlabels", 
          "type": "string", 
          "description": "Give a string of comma separated (NO spaces allowed!!) class names (e.g. class1,class2,class3) for a classification or transcription task"
        }, 
        {
          "default": 1, 
          "field": "ctcDecode", 
          "type": "numeric", 
          "description": "1/0 = yes/no : Do basic ctc (transcription) decoding, i.e. remove duplicate labels and (TODO: compute label alignments.)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "printConnections", 
          "type": "numeric", 
          "description": "1/0 = yes/no : print human readable information on the network layers on connections", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "printInputStats", 
          "type": "numeric", 
          "description": "1/0 = yes/no : print input weight sums (can be used for feature selection...)", 
          "allowedValues": [
            0, 
            1
          ]
        }
      ], 
      "component": "cRnnSink", 
      "description": "This is an example of a cDataSink descendant. It reads data from the data memory and prints it to the console. This component is intended as a template for developers.", 
      "baseComponent": "cDataSink"
    }, 
    {
      "description": "BLSTM RNN processor.", 
      "writesToLevels": [
        "writer.dmLevel"
      ], 
      "fields": [
        {
          "default": null, 
          "field": "netfile", 
          "type": "string", 
          "description": "The file which contains the trained network created by rnnlib"
        }, 
        {
          "default": 0, 
          "field": "jsonNet", 
          "type": "numeric", 
          "description": "1/0 = yes/no. Flag that indicates whether 'netfile' is in json format (1) (trained with current) or in rnnlib format (0).", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": null, 
          "field": "classlabels", 
          "type": "string", 
          "description": "Give a string of comma separated (NO spaces allowed!!) class names (e.g. class1,class2,class3) for a classification or transcription task"
        }, 
        {
          "default": 0, 
          "field": "printConnections", 
          "type": "numeric", 
          "description": "1/0 = yes/no : print human readable information on the network layers on connections", 
          "allowedValues": [
            0, 
            1
          ]
        }
      ], 
      "component": "cRnnProcessor", 
      "readsFromLevels": [
        "reader.dmLevel"
      ], 
      "baseComponent": "cDataProcessor"
    }, 
    {
      "description": "BLSTM RNN processor.", 
      "writesToLevels": [
        "writer.dmLevel"
      ], 
      "fields": [
        {
          "default": 0, 
          "field": "voiceIdx", 
          "type": "numeric", 
          "description": "The index of the field which contains the 'voice' class output activation. (0 is the first field)"
        }, 
        {
          "default": 1, 
          "field": "agentIdx", 
          "type": "numeric", 
          "description": "The index of the field which contains the 'agent/alien' class output activation. (0 is the first field)"
        }, 
        {
          "default": 0.4, 
          "field": "voiceThresh", 
          "type": "numeric", 
          "description": "The threshold to apply to the 'voice' output activation."
        }, 
        {
          "default": 0.3, 
          "field": "agentThresh", 
          "type": "numeric", 
          "description": "The threshold to apply to the 'agent' output activation."
        }, 
        {
          "default": 2, 
          "field": "energyIdx", 
          "type": "numeric", 
          "description": "The index of the field which contains the energy/loudness/intensity/etc. value (set to -1 to disable)"
        }, 
        {
          "default": 3, 
          "field": "f0Idx", 
          "type": "numeric", 
          "description": "Index of F0 input field (set to -1 to disable)"
        }, 
        {
          "default": 20, 
          "field": "agentTurnPastBlock", 
          "type": "numeric", 
          "description": "time the VAD will be blocked after receiving an agent speech end message (in frames, usually 100fps) (use 20 for the SEMAINE speech2speech system, and 60 for the speech2face system)."
        }, 
        {
          "default": 0, 
          "field": "alwaysRejectAgent", 
          "type": "numeric", 
          "description": "1 = never detect a speaker turn while the agent is speaking", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "smartRejectAgent", 
          "type": "numeric", 
          "description": "1 = apply different VAD strategy while agent is speaking", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 500, 
          "field": "userEavgHold", 
          "type": "numeric", 
          "description": "Hold time for user energy envelope and average computation (10ms frames as unit)."
        }, 
        {
          "default": 500, 
          "field": "userEavgDecay", 
          "type": "numeric", 
          "description": "Decay (linear) time for user energy envelope and average computation (10ms frames as unit)."
        }, 
        {
          "default": 200, 
          "field": "agentEavgHold", 
          "type": "numeric", 
          "description": "Hold time for user energy envelope and average computation (10ms frames as unit)."
        }, 
        {
          "default": 200, 
          "field": "agentEavgDecay", 
          "type": "numeric", 
          "description": "Decay (linear) time for user energy envelope and average computation (10ms frames as unit)."
        }, 
        {
          "default": 0, 
          "field": "vadDebug", 
          "type": "numeric", 
          "description": "1 = output energy and VAD statistics for debugging (set to 2 to always force vad output value to 0 while debugging).", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "allowEoverride", 
          "type": "numeric", 
          "description": "1 = allow VAD output even if LSTM does not detect voice when the energy is in the range of the user's current energy envelope (NOTE: this reduces noise robustness, e.g. when moving a headset etc.)", 
          "allowedValues": [
            0, 
            1
          ]
        }
      ], 
      "component": "cRnnVad2", 
      "readsFromLevels": [
        "reader.dmLevel"
      ], 
      "baseComponent": "cDataProcessor"
    }, 
    {
      "description": "This is a simple mixer, which adds multiple channels (elements) to a single channel (element).", 
      "writesToLevels": [
        "writer.dmLevel"
      ], 
      "fields": [
        {
          "default": 1, 
          "field": "normalise", 
          "type": "numeric", 
          "description": "1/0 = yes/no : divide by the number of channels when adding samples from multiple channels.", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1024, 
          "field": "bufsize", 
          "type": "numeric", 
          "description": "number of samples to process at once. Choose a number >> 1 for optimal performance. Too large buffer sizes may influence the latency!"
        }
      ], 
      "component": "cMonoMixdown", 
      "readsFromLevels": [
        "reader.dmLevel"
      ], 
      "baseComponent": "cDataProcessor"
    }, 
    {
      "description": "This component performs an FFT on a sequence of real values (one frame), the output is the complex domain result of the transform. Use the cFFTmagphase component to compute magnitudes and phases from the complex output.", 
      "writesToLevels": [
        "writer.dmLevel"
      ], 
      "fields": [
        {
          "default": 0, 
          "field": "inverse", 
          "type": "numeric", 
          "description": "1 = perform inverse real FFT", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "zeroPadSymmetric", 
          "type": "numeric", 
          "description": "1 = zero pad symmetric (when zero padding to next power of 2), i.e. center frame and pad left and right with zeros. New since version 2.3: this is the default, but should not affect FFT magnitudes at all, only phase.", 
          "allowedValues": [
            0, 
            1
          ]
        }
      ], 
      "component": "cTransformFFT", 
      "readsFromLevels": [
        "reader.dmLevel"
      ], 
      "baseComponent": "cVectorProcessor"
    }, 
    {
      "description": "This component computes magnitude and phase of each array in the input level (it thereby assumes that the arrays contain complex numbers with real and imaginary parts alternating, as computed by the cTransformFFT component).", 
      "writesToLevels": [
        "writer.dmLevel"
      ], 
      "fields": [
        {
          "default": 0, 
          "field": "inverse", 
          "type": "numeric", 
          "description": "If set to 1, converts magnitude and phase input data to complex frequency domain data", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "magnitude", 
          "type": "numeric", 
          "description": "1/0 = compute magnitude yes/no (or use magnitude as input to inverse transformation, must be enabled for inverse)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "phase", 
          "type": "numeric", 
          "description": "1/0 = compute phase yes/no (or use phase as input to inverse transformation, must be enabled for inverse)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "joinMagphase", 
          "type": "numeric", 
          "description": "Output magnitude and phase information to a single array field (instead of creating two array fields, one for magnitude and one for phase information). The first half contains magnitude values, the second half phase values.", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "normalise", 
          "type": "numeric", 
          "description": "1/0 = yes/no: normalise FFT magnitudes to input window length, to obtain spectral densities.", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "power", 
          "type": "numeric", 
          "description": "1/0 = yes/no: square FFT magnitudes to obtain power spectrum.", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "dBpsd", 
          "type": "numeric", 
          "description": "1/0 = yes/no: output logarithmic (dB SPL) power spectral density instead of linear magnitude spectrum (you should use a Hann window for analysis in this case). Setting this option also sets/implies 'normalise=1' and 'power=1'", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 90.302, 
          "field": "dBpnorm", 
          "type": "numeric", 
          "description": "Value for dB power normalisation when 'dBpsd=1' (in dB SPL). Default is according to MPEG-1, psy I model."
        }, 
        {
          "default": -102, 
          "field": "mindBp", 
          "type": "numeric", 
          "description": "Minimum dB power value for flooring when using dBpsd. (mindBp - dBpnorm < -120.0) will be enforced, so mindBp might be higher than set here, depending on dBpnorm parameter."
        }
      ], 
      "component": "cFFTmagphase", 
      "readsFromLevels": [
        "reader.dmLevel"
      ], 
      "baseComponent": "cVectorProcessor"
    }, 
    {
      "description": "This component computes the Average Magnitude Difference Function (AMDF) for each input frame. Various methods for padding or warping at the border exist.", 
      "writesToLevels": [
        "writer.dmLevel"
      ], 
      "fields": [
        {
          "default": "amdf", 
          "field": "nameAppend", 
          "type": "string", 
          "description": "A string suffix to append to the input field names (default: empty)", 
          "overridden": true
        }, 
        {
          "default": 0, 
          "field": "nLag", 
          "type": "numeric", 
          "description": "If nLag > 0, compute AMDF up to maximum lag 'nLag' (or maximum possible lag limited by framesize). If nLag=0, then always the maximum framesize will be used (this is the default). If nLag < 0, then nLag=framesize/((-1)*nLag) will be used."
        }, 
        {
          "default": "limit", 
          "field": "method", 
          "type": "string", 
          "description": "The AMDF computation method (i.e. the handling of border conditions):\n'limit' :  compute AMDF only in regions where the shifted windows overlap\n'warp' : compute cyclical AMDF by warping of input\n'zeropad' : zero pad missing samples", 
          "allowedValues": [
            "limit", 
            "warp", 
            "zeropad"
          ]
        }, 
        {
          "default": 0, 
          "field": "invert", 
          "type": "numeric", 
          "description": "1 = invert the AMDF output values (literally '1-amdf'), i.e. so that the behaviour of the AMDF output corresponds more to that of an autocorrelation function.", 
          "allowedValues": [
            0, 
            1
          ]
        }
      ], 
      "component": "cAmdf", 
      "readsFromLevels": [
        "reader.dmLevel"
      ], 
      "baseComponent": "cVectorProcessor"
    }, 
    {
      "description": "This component computes the autocorrelation function (ACF) by sqauring a magnitude spectrum and applying an inverse Fast Fourier Transform. This component mus read from a level containing *only* FFT magnitudes in a single field. Use the 'cTransformFFT' and 'cFFTmagphase' components to compute the magnitude spectrum from PCM frames. Computation of the Cepstrum is also supported (this applies a log() function to the magnitude spectra).", 
      "writesToLevels": [
        "writer.dmLevel"
      ], 
      "fields": [
        {
          "default": "acf", 
          "field": "nameAppend", 
          "type": "string", 
          "description": "A string suffix to append to the input field names (default: empty)", 
          "overridden": true
        }, 
        {
          "default": 1, 
          "field": "usePower", 
          "type": "numeric", 
          "description": "= square input values; you must leave this at default 1, when using fft magnitude as input for ACF. For cepstrum this will be set to 0 by default, unless you explicitly give the value 1.", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "cepstrum", 
          "type": "numeric", 
          "description": "1 = compute the real valued cepstrum instead of the standard ACF. This applies a log() to the magnitudes bevore transforming from the spectral domain back to the time domain. You might want to set 'nameAppend=cepstrum' when using this option. See the cCepstrum component for complex valued cepstrum and more options (only in commercial version).", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "inverse", 
          "type": "numeric", 
          "description": "1 = do the inverse transform of cepstrum or ACF. The output is an FFT magnitude spectrum.", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "cosLifterCepstrum", 
          "type": "numeric", 
          "description": "1 = apply cosine lifter function to the cepstrum, effectively applying a Hanning window function to the cepstrum.", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "expBeforeAbs", 
          "type": "numeric", 
          "description": "1 = perform exp operation before computing magnitude spectrum (for inverse cepstrum only).", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "symmetricData", 
          "type": "numeric", 
          "description": "1 = treat data in acf/cepstral domain as symmetric data, i.e. output only half of the buffer or symmetrically duplicate the input before applying fft.", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "acfCepsNormOutput", 
          "type": "numeric", 
          "description": "1 = Divide the output values by the framesize (this is the default since version 2.0, however for older versions, such as 0.1 (openEAR) setting this option to 0 is required for comaptibility.", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "description": "1= compatibility with old openEAR (0.1) cepstrum computation (absCepstrum = 1, acfCepsNormOutput = 0, and usePower should be 1 (not forced though)).", 
          "default": 0, 
          "allowedValues": [
            0, 
            1
          ], 
          "field": "oldCompatCepstrum", 
          "recommendedValue": 0, 
          "type": "numeric"
        }, 
        {
          "default": 0, 
          "field": "absCepstrum", 
          "type": "numeric", 
          "description": "Enable output of root of power cepstrum (absolute value)", 
          "allowedValues": [
            0, 
            1
          ]
        }
      ], 
      "component": "cAcf", 
      "readsFromLevels": [
        "reader.dmLevel"
      ], 
      "baseComponent": "cVectorProcessor"
    }, 
    {
      "description": "This component performs pre- and de-emphasis of speech signals using a 1st order difference equation: y(t) = x(t) - k*x(t-1)  (de-emphasis: y(t) = x(t) + k*x(t-1))", 
      "writesToLevels": [
        "writer.dmLevel"
      ], 
      "fields": [
        {
          "default": 0.97, 
          "field": "k", 
          "type": "numeric", 
          "description": "The pre-emphasis coefficient k in y[n] = x[n] - k*x[n-1]"
        }, 
        {
          "default": 0, 
          "field": "f", 
          "type": "numeric", 
          "description": "The pre-emphasis frequency f in Hz : k = exp( -2*pi * f/samplingFreq. ) (if set, f will override k!)"
        }, 
        {
          "default": 0, 
          "field": "de", 
          "type": "numeric", 
          "description": "1 = perform de-emphasis instead of pre-emphasis (i.e. y[n] = x[n] + k*x[n-1])", 
          "allowedValues": [
            0, 
            1
          ]
        }
      ], 
      "component": "cPreemphasis", 
      "readsFromLevels": [
        "reader.dmLevel"
      ], 
      "baseComponent": "cWindowProcessor"
    }, 
    {
      "description": "This component performs per frame pre-emphasis without an inter-frame state memory. (This is the way HTK does pre-emphasis). Pre-emphasis: y(t) = x(t) - k*x(t-1) ; de-emphasis : y(t) = x(t) + k*x(t-1)", 
      "writesToLevels": [
        "writer.dmLevel"
      ], 
      "fields": [
        {
          "default": 0.97, 
          "field": "k", 
          "type": "numeric", 
          "description": "The pre-emphasis coefficient k in y[n] = x[n] - k*x[n-1]"
        }, 
        {
          "default": 0, 
          "field": "f", 
          "type": "numeric", 
          "description": "The pre-emphasis frequency f in Hz : k = exp( -2*pi * f/samplingFreq. ) (this option will override k)"
        }, 
        {
          "default": 0, 
          "field": "de", 
          "type": "numeric", 
          "description": "1 = perform de- instead of pre-emphasis", 
          "allowedValues": [
            0, 
            1
          ]
        }
      ], 
      "component": "cVectorPreemphasis", 
      "readsFromLevels": [
        "reader.dmLevel"
      ], 
      "baseComponent": "cVectorProcessor"
    }, 
    {
      "description": "This component extends the base class cVectorTransform and implements mean/variance normalisation. You can use this component to perform on-line cepstral mean normalisation. See cFullinputMean for off-line cepstral mean normalisation.", 
      "writesToLevels": [
        "writer.dmLevel"
      ], 
      "fields": [
        {
          "default": 1, 
          "field": "meanEnable", 
          "type": "numeric", 
          "description": "1 = enable normalisation to 0 mean", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "stdEnable", 
          "type": "numeric", 
          "description": "1 = enable standardisation to stddev 1", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "normEnable", 
          "type": "numeric", 
          "description": "1 = enable normalisation (scaling) to range -1 to +1, if meanEnable=1 (x-mean)/((max-min)*0.5), or to range 0..1 if meanEnable=0  (x-min)/(max-min) ; (this can NOT be used in conjunction with stdEnable)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "minMaxNormEnable", 
          "type": "numeric", 
          "description": "1 = enable normalisation (scaling) to range -1 to +1 with only min and max values: x=2*(x-min)/(max-min)-1", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "spectralFlooring", 
          "type": "numeric", 
          "description": "1 = enable spectral subtraction by flooring all spectral bins below the mean (to the value of 'specFloor') and not touching bins above the mean (expect if you set subtractMeans=1). (works only if meanEnable=1 is the only normalisation option set)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "subtractMeans", 
          "type": "numeric", 
          "description": "(only relevant if spectralFlooring=1) : 1 = if input values are above the mean, subtract the mean (else floor to 'specFloor').", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1e-10, 
          "field": "specFloor", 
          "type": "numeric", 
          "description": "The value to which bins will be set that are floored."
        }, 
        {
          "default": 0, 
          "field": "htkLogEnorm", 
          "type": "numeric", 
          "description": "1 = enbale HTK compatible log energy normalisation (this also sets normEnable=1, meanEnable=0)", 
          "allowedValues": [
            0, 
            1
          ]
        }
      ], 
      "component": "cVectorMVN", 
      "readsFromLevels": [
        "reader.dmLevel"
      ], 
      "baseComponent": "cVectorTransform"
    }, 
    {
      "description": "Speaker turn detector using data from cVadV1 component or cSemaineSpeakerID1 (adaptive VAD) to determine speaker turns and identify continuous segments of voice activity.", 
      "writesToLevels": [
        "writer.dmLevel"
      ], 
      "fields": [
        {
          "default": 0.001, 
          "field": "threshold", 
          "type": "numeric", 
          "description": "The silence->speech threshold to use (the default value is for RMS energy, change it to -13.0 for log energy)"
        }, 
        {
          "default": 0.001, 
          "field": "threshold2", 
          "type": "numeric", 
          "description": "The speech->silence threshold to use (if this value is not set in the config, the same value as 'threshold' will be used)"
        }, 
        {
          "default": 0, 
          "field": "autoThreshold", 
          "type": "numeric", 
          "description": "1 = automatically adjust threshold for RMS energy (EXPERIMENTAL; works for energy as input)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0.9995, 
          "field": "minmaxDecay", 
          "type": "numeric", 
          "description": "The decay constant used for min/max values in auto-thresholder (a larger value means a slower recovery from loud sounds)"
        }, 
        {
          "default": 10, 
          "field": "nPre", 
          "type": "numeric", 
          "description": "number of frames > threshold until a turn start is detected"
        }, 
        {
          "default": 20, 
          "field": "nPost", 
          "type": "numeric", 
          "description": "number of frames < threshold(2) until a turn end is detected"
        }, 
        {
          "default": 1, 
          "field": "useRMS", 
          "type": "numeric", 
          "description": "1 = the provided energy field in the input is rms energy instead of log energy", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "readVad", 
          "type": "numeric", 
          "description": "1 = use the result (bianry 0/1 or probability) from another VAD component instead of reading RMS or LOG energy ('threshold' and 'threshold2' will be set to 0.55 and 0.45 if this option is enabled, unless other values for thresholds are given in the config file)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": -1, 
          "field": "idx", 
          "type": "numeric", 
          "description": "The index of the RMS or LOG energy (or vadBin) field to use (-1 to automatically find the field)"
        }, 
        {
          "default": null, 
          "field": "messageRecp", 
          "typeHint": "componentInstance,", 
          "type": "string", 
          "description": "The (cWinToVecProcessor type) component(s) to send 'frameTime' messages to (use , to separate multiple recepients), leave blank (NULL) to not send any messages. The messages will be sent at the turn end and (optionally) during the turn at fixed intervals configured by the 'msgInterval' parameter (if it is not 0)."
        }, 
        {
          "default": 0, 
          "field": "msgInterval", 
          "type": "numeric", 
          "description": "Interval at which to send 'frameTime' messages during an ongoing turn. Set to 0 to disable sending of intra turn messages."
        }, 
        {
          "default": 0, 
          "field": "turnFrameTimePreRollSec", 
          "type": "numeric", 
          "description": "Time offset which is added to the turnStart for turnFrameTimeMessages. Use this to compensate for VAD lags. Typically one would use negative values here, e.g. -0.1."
        }, 
        {
          "default": 0, 
          "field": "turnFrameTimePostRollSec", 
          "type": "numeric", 
          "description": "Time offset which is added to the turnEnd for turnFrameTimeMessages. Use this to compensate for VAD lags. CAUTION: If this value is positive, it might prevent the receiving component from working correctly, as it will not have all data (for the full segment) available in the input data memory level when it receives the message."
        }, 
        {
          "default": 0, 
          "field": "msgPeriodicMaxLength", 
          "type": "numeric", 
          "description": "If periodic message sending is enabled (msgInterval > 0), then this can limit the maximum length of the segments (going backwards from the current posiiton, i.e. a sliding window - as opposed to maxTurnLength, which limits the total turn length from the beginning of the turn). If this is 0, there is no limit (= default), the segments will grow up to maxTurnLength."
        }, 
        {
          "default": 1, 
          "field": "sendTurnFrameTimeMessageAtEnd", 
          "type": "numeric", 
          "description": "If not 0, indicates that at the end of a turn a turnFrameTime message will be sent. If it is set to 1, a full length (from turn start to turn end) message will be sent. If it is set to 2, and if periodic sending is enabled (msgInterval > 0) and msgPeriodicMaxLength is set (> 0), then only a message of msgPeriodicMaxLength (from turn end backwards) will be sent. Leave this option at the default of 1 if not using periodic message sending (msgInterval > 0).", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": null, 
          "field": "eventRecp", 
          "typeHint": "componentInstance,", 
          "type": "string", 
          "description": "The component(s) to send 'turnStart/turnEnd' messages to (use , to separate multiple recepients), leave blank (NULL) to not send any messages"
        }, 
        {
          "default": null, 
          "field": "statusRecp", 
          "typeHint": "componentInstance,", 
          "type": "string", 
          "description": "The component(s) to send 'turnSpeakingStatus' messages to (use , to separate multiple recepients), leave blank (NULL) to not send any messages"
        }, 
        {
          "default": 0, 
          "field": "minTurnLengthTurnFrameTimeMessage", 
          "type": "numeric", 
          "description": "The minimum turn length in seconds (<= 0 : infinite) for turnFrameTime messages. No Message will be sent if the detected turn is shorter than the given value. turnStart and turnEnd messages will still be sent though."
        }, 
        {
          "default": 0, 
          "field": "minTurnLength", 
          "type": "numeric", 
          "description": "[NOT YET IMPLEMENTED!] The minimum turn length in seconds (<= 0 : infinite) for turnFrameTime and turnStart messages. No Message will be sent if the detected turn is shorter than the given value. IMPORTANT: This introduces a lag of the given minimum length for turn start messages!"
        }, 
        {
          "default": 0, 
          "field": "maxTurnLength", 
          "type": "numeric", 
          "description": "The maximum turn length in seconds (<= 0 : infinite). A turn end will be favoured by reducing nPost to 1 after this time"
        }, 
        {
          "default": 1, 
          "field": "maxTurnLengthGrace", 
          "type": "numeric", 
          "description": "The grace period to grant, after maxTurnLength is reached (in seconds). After a turn length of maxTurnLength + maxTurnLengthGrace an immediate turn end will be forced."
        }, 
        {
          "default": 0, 
          "field": "invert", 
          "type": "numeric", 
          "description": "Invert the behaviour of turnStart/turnEnd messages. Also send a turnStart message at vIdx = 0, and a turnEnd message at the end (EOI).", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 4, 
          "field": "debug", 
          "type": "numeric", 
          "description": "log level to show some turn detector specific debug messages on"
        }, 
        {
          "default": 2, 
          "field": "timeoutSec", 
          "type": "numeric", 
          "description": "turnEnd timeout in seconds (send turnEnd after timeoutSec seconds no input data)"
        }, 
        {
          "default": 5, 
          "field": "eoiFramesMissing", 
          "type": "numeric", 
          "description": "set the number of frames that will be subtracted from the last turn end position (the forced turn end that will be sent when an EOI condition (end of input) is encountered). This is necessary, e.g. if you use delta or acceleration coefficients which introduce a lag of a few frames. Increase this value if SMILExtract hangs at the end of input when using the cTumkwsjSink component or a cFunctionals component, etc."
        }, 
        {
          "default": 60, 
          "field": "unblockTimeout", 
          "type": "numeric", 
          "description": "timeout in frames to wait after a turn block condition (started via a semaineCallback message)"
        }, 
        {
          "default": 0, 
          "field": "blockStatus", 
          "type": "numeric", 
          "description": "apply event based speech detection block  for speakingStatus messages (i.e.  the sending of these messages is supressed)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "blockAll", 
          "type": "numeric", 
          "description": "apply event based speech detection block for all types, i.e. the voice input is set to 0 by an incoming block message.", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "terminateAfterTurns", 
          "type": "numeric", 
          "description": "Number of turns after which to terminate processing and exit openSMILE. Default 0 is for infinite, i.e. never terminate."
        }, 
        {
          "default": 0, 
          "field": "terminatePostSil", 
          "type": "numeric", 
          "description": "Amount of silence after last turn of terminateAfterTurns to wait for before actually exiting. This excludes (i.e. is on top of) postSil which is required to detect the end of the turn."
        }, 
        {
          "default": 1, 
          "field": "initialBlockTime", 
          "type": "numeric", 
          "description": "Initial time (in seconds) to block VAD (useful in conjunction with RNN vad, or if high noise occurrs after starting VAD."
        }
      ], 
      "component": "cTurnDetector", 
      "readsFromLevels": [
        "reader.dmLevel"
      ], 
      "sendsMessagesToComponents": [
        "messageRecp", 
        "eventRecp", 
        "statusRecp"
      ], 
      "baseComponent": "cDataProcessor"
    }, 
    {
      "description": "This component computes delta regression coefficients using the regression equation from the HTK book.", 
      "writesToLevels": [
        "writer.dmLevel"
      ], 
      "fields": [
        {
          "default": 1, 
          "field": "blocksize", 
          "type": "numeric", 
          "description": "The size of data blocks to process in frames (this sets both blocksizeR and blocksizeW, and overwrites blocksize_sec)", 
          "overridden": true
        }, 
        {
          "default": "de", 
          "field": "nameAppend", 
          "type": "string", 
          "description": "A string suffix to append to the input field names (default: empty)", 
          "overridden": true
        }, 
        {
          "default": 2, 
          "field": "deltawin", 
          "type": "numeric", 
          "description": "Specifies the size of half of the delta regression window (If set to 0, a simple difference x[n]-x[n-1] will be computed)"
        }, 
        {
          "default": 0, 
          "field": "absOutput", 
          "type": "numeric", 
          "description": "1/0 = on/off : Output absolute value of delta regression or difference function (i.e. do full wave rectification on output signal).", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "halfWaveRect", 
          "type": "numeric", 
          "description": "1/0 = on/off : Do half-wave rectification on output values (i.e. keep only positive values and set negative values to 0). Please note that 'halfWaveRect' overrides the 'absOutput' option.", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "onlyInSegments", 
          "type": "numeric", 
          "description": "1/0 = on/off : Don't compute deltas at segment boundaries. Segments are bounded by one or more NaN values, or zeros, if zeroSegBound=1 (default)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "zeroSegBound", 
          "type": "numeric", 
          "description": "1/0 = on/off : Consider zeros as segment boundaries (in conjunction with onlyInSegments option).", 
          "allowedValues": [
            0, 
            1
          ]
        }
      ], 
      "component": "cDeltaRegression", 
      "readsFromLevels": [
        "reader.dmLevel"
      ], 
      "baseComponent": "cWindowProcessor"
    }, 
    {
      "description": "This component smooths data contours by applying a moving average filter of configurable length.", 
      "writesToLevels": [
        "writer.dmLevel"
      ], 
      "fields": [
        {
          "default": 1, 
          "field": "blocksize", 
          "type": "numeric", 
          "description": "The size of data blocks to process in frames (this sets both blocksizeR and blocksizeW, and overwrites blocksize_sec)", 
          "overridden": true
        }, 
        {
          "default": "sma", 
          "field": "nameAppend", 
          "type": "string", 
          "description": "A string suffix to append to the input field names (default: empty)", 
          "overridden": true
        }, 
        {
          "default": 3, 
          "field": "smaWin", 
          "type": "numeric", 
          "description": "The size of the moving average window. A larger window means more smoothing."
        }, 
        {
          "default": 0, 
          "field": "noZeroSma", 
          "type": "numeric", 
          "description": "1 = exclude frames where the element value is 0 from smoothing (i.e. 0 input will be 0 output, and zeros around non-zero values will not be included in the computation of the running average).", 
          "allowedValues": [
            0, 
            1
          ]
        }
      ], 
      "component": "cContourSmoother", 
      "readsFromLevels": [
        "reader.dmLevel"
      ], 
      "baseComponent": "cWindowProcessor"
    }, 
    {
      "description": "This component implements a spectral domain resampling component. Input frames are transferred to the spectral domain, then the spectra are shifted, and a modified DFT is performed to synthesize samples at the new rate.", 
      "writesToLevels": [
        "writer.dmLevel"
      ], 
      "fields": [
        {
          "default": 16000, 
          "field": "targetRate", 
          "type": "numeric", 
          "description": "The target sampling frequency in Hz"
        }, 
        {
          "default": 1, 
          "field": "resampleRatio", 
          "type": "numeric", 
          "description": "A fixed resample ratio a (a=fsNew/fsCurrent). If set, this overrides targetFs"
        }, 
        {
          "default": 1, 
          "field": "pitchRatio", 
          "type": "numeric", 
          "description": "Low-quality pitch scaling factor, if != 1.0"
        }, 
        {
          "default": 0, 
          "field": "useQuickAlgo", 
          "type": "numeric", 
          "description": "Use a quick algo for low-quality integer-ratio DOWN(!)sampling.", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0.03, 
          "field": "winSize", 
          "type": "numeric", 
          "description": "Internal window size in seconds (will be rounded to nearest power of 2 framesize internally). This affects the quality of the resampling and the accuracy of the target sampling rate. Larger window sizes allow for a more accurate target sampling frequency, i.e. less pitch distortion."
        }
      ], 
      "component": "cSmileResample", 
      "readsFromLevels": [
        "reader.dmLevel"
      ], 
      "baseComponent": "cDataProcessor"
    }, 
    {
      "description": "This component implements a spectral domain resampling component. Input frames are complex valued spectral domain data, which will be shifted and scaled by this component, and a modified DFT is performed to synthesize samples at the new rate.", 
      "writesToLevels": [
        "writer.dmLevel"
      ], 
      "fields": [
        {
          "description": "1 = process each array field as one vector individually (and produce one output for each input array field). Only array fields (i.e. fields with more than one element) are processed if this is set. / 0 = process complete input frame as one vector, ignoring field/element structure", 
          "overridden": true, 
          "default": 0, 
          "allowedValues": [
            0, 
            1
          ], 
          "field": "processArrayFields", 
          "type": "numeric"
        }, 
        {
          "default": 16000, 
          "field": "targetFs", 
          "type": "numeric", 
          "description": "The target sampling frequency in Hz"
        }, 
        {
          "default": 1, 
          "field": "resampleRatio", 
          "type": "numeric", 
          "description": "Specifies a fixed resample ratio a (a=fsNew/fsCurrent). If set, this overrides targetFs"
        }, 
        {
          "default": null, 
          "field": "inputFieldPartial", 
          "type": "string", 
          "description": "The name of the input field to search for. (NULL (default): use full input vector)"
        }
      ], 
      "component": "cSpecResample", 
      "readsFromLevels": [
        "reader.dmLevel"
      ], 
      "baseComponent": "cVectorProcessor"
    }, 
    {
      "description": "This component performs dbX (dbA,dbB,dbC,...) equal loudness weighting of FFT bin magnitudes. Currently only dbA weighting is implemented.", 
      "writesToLevels": [
        "writer.dmLevel"
      ], 
      "fields": [
        {
          "default": "A", 
          "field": "curve", 
          "type": "char", 
          "description": "1 character, which specifies the type of the curve to use (supported: A ; soon supported: B,C) [NOT YET FULLY IMPLEMENTED, ONLY A is supported]", 
          "allowedValues": [
            "A", 
            "B", 
            "C"
          ]
        }, 
        {
          "default": 1, 
          "field": "usePower", 
          "type": "numeric", 
          "description": "1 = square the input magnitudes before multiplying with the dX weighting function (the output will then be a dBX weighted power spectrum)", 
          "allowedValues": [
            0, 
            1
          ]
        }
      ], 
      "component": "cDbA", 
      "readsFromLevels": [
        "reader.dmLevel"
      ], 
      "baseComponent": "cVectorProcessor"
    }, 
    {
      "description": "A voice activity detector based on Line-Spectral-Frequencies, Mel spectra and energy + smoothing. This component requires input of the following type in the following order: MelSpec;lsf;energy. See vadV1.hpp for an example config!", 
      "writesToLevels": [
        "writer.dmLevel"
      ], 
      "fields": [
        {
          "default": -13, 
          "field": "threshold", 
          "type": "numeric", 
          "description": "The minimum rms/log energy threshold to use (or the actual rms energy threshold, if disableDynamicVAD==1)"
        }, 
        {
          "default": 0, 
          "field": "disableDynamicVAD", 
          "type": "numeric", 
          "description": "1/0 = yes/no, whether dynamic VAD is disabled (default is enabled)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "debug", 
          "type": "numeric", 
          "description": "1/0 enable/disable vad debug output", 
          "allowedValues": [
            0, 
            1
          ]
        }
      ], 
      "component": "cVadV1", 
      "readsFromLevels": [
        "reader.dmLevel"
      ], 
      "baseComponent": "cDataProcessor"
    }, 
    {
      "description": "This component performs linear/non-linear axis scaling of FFT magnitude spectra with spline interpolation.", 
      "writesToLevels": [
        "writer.dmLevel"
      ], 
      "fields": [
        {
          "description": "1 = process each array field as one vector individually (and produce one output for each input array field). Only array fields (i.e. fields with more than one element) are processed if this is set. / 0 = process complete input frame as one vector, ignoring field/element structure", 
          "overridden": true, 
          "default": 0, 
          "allowedValues": [
            0, 
            1
          ], 
          "field": "processArrayFields", 
          "type": "numeric"
        }, 
        {
          "default": "log", 
          "field": "scale", 
          "type": "string", 
          "description": "The target scale, one of the following:\n'log(arithmic)' (logarithmic, see 'logScaleBase')\n'oct(ave)' (octave scale = logarithmic with base 2)\n'sem(itone)' (musical semi-tone scale)\n'lin(ear)' (linear scale)\n'bar(k)' (bark scale)\n'bao' (old - pre 2.0 - approximation of bark scale)\n'mel' (mel frequency scale)", 
          "allowedValues": [
            "log", 
            "logarithmic", 
            "oct", 
            "octave", 
            "sem", 
            "semitone", 
            "lin", 
            "linear", 
            "bar", 
            "bark", 
            "bao", 
            "mel"
          ]
        }, 
        {
          "default": "lin", 
          "field": "sourceScale", 
          "type": "string", 
          "description": "The source scale (currently only 'lin(ear)' is supported, all other options (as found for target scale) are experimental)", 
          "allowedValues": [
            "log", 
            "logarithmic", 
            "oct", 
            "octave", 
            "sem", 
            "semitone", 
            "lin", 
            "linear", 
            "bar", 
            "bark", 
            "bao", 
            "mel"
          ]
        }, 
        {
          "default": 2, 
          "field": "logScaleBase", 
          "type": "numeric", 
          "description": "The base for log scales (a log base of 2.0 - the default - corresponds to an octave target scale)"
        }, 
        {
          "default": 2, 
          "field": "logSourceScaleBase", 
          "type": "numeric", 
          "description": "The base for log source scales (a log base of 2.0 - the default - corresponds to an octave target scale)"
        }, 
        {
          "default": 55, 
          "field": "firstNote", 
          "type": "numeric", 
          "description": "The first note (in Hz) for a semi-tone scale"
        }, 
        {
          "default": "spline", 
          "field": "interpMethod", 
          "type": "string", 
          "description": "The interpolation method for rescaled spectra: 'none', 'spline'", 
          "allowedValues": [
            "none", 
            "spline"
          ]
        }, 
        {
          "default": 25, 
          "field": "minF", 
          "type": "numeric", 
          "description": "The minimum frequency of the target scale"
        }, 
        {
          "default": -1, 
          "field": "maxF", 
          "type": "numeric", 
          "description": "The maximum frequency of the target scale (-1.0 : set to maximum frequency of the source spectrum)"
        }, 
        {
          "default": 0, 
          "field": "nPointsTarget", 
          "type": "numeric", 
          "description": "The number of frequency points in target spectrum (<= 0 : same as input spectrum)"
        }, 
        {
          "default": 0, 
          "field": "specSmooth", 
          "type": "numeric", 
          "description": "1 = perform spectral smoothing before applying the scale transformation", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "specEnhance", 
          "type": "numeric", 
          "description": "1 = do spectral peak enhancement before applying smoothing (if enabled) and scale transformation", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "auditoryWeighting", 
          "type": "numeric", 
          "description": "1 = enable post-scale auditory weighting (this is currently only supported for octave (log2) scales)", 
          "allowedValues": [
            0, 
            1
          ]
        }
      ], 
      "component": "cSpecScale", 
      "readsFromLevels": [
        "reader.dmLevel"
      ], 
      "baseComponent": "cVectorProcessor"
    }, 
    {
      "description": "This component computes time signal properties, zero-corssing rate, mean-crossing rate, dc offset, max/min value, and absolute maximum value of a PCM frame.", 
      "writesToLevels": [
        "writer.dmLevel"
      ], 
      "fields": [
        {
          "default": null, 
          "field": "nameAppend", 
          "type": "string", 
          "description": "(ignored here)", 
          "overridden": true
        }, 
        {
          "default": 1, 
          "field": "zcr", 
          "type": "numeric", 
          "description": "(1/0=yes/no) compute zero-crossing rate (zcr)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "mcr", 
          "type": "numeric", 
          "description": "(1/0=yes/no) compute mean-crossing rate (mcr) (i.e. the rate at which a signal crosses its mean, for signals with mean 0 this is identical to the zero-crossing rate)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "amax", 
          "type": "numeric", 
          "description": "(1/0=yes/no) enable output of the maximum *absolute* sample value", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "maxmin", 
          "type": "numeric", 
          "description": "(1/0=yes/no) enable output of the maximum and minimum sample value", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "dc", 
          "type": "numeric", 
          "description": "(1/0=yes/no) compute the DC-offset (= the arithmetic mean of input values)", 
          "allowedValues": [
            0, 
            1
          ]
        }
      ], 
      "component": "cMZcr", 
      "readsFromLevels": [
        "reader.dmLevel"
      ], 
      "baseComponent": "cVectorProcessor"
    }, 
    {
      "description": "This component computes logarithmic (log) and root-mean-square (rms) signal energy from PCM frames.", 
      "writesToLevels": [
        "writer.dmLevel"
      ], 
      "fields": [
        {
          "default": "energy", 
          "field": "nameAppend", 
          "type": "string", 
          "description": "A string suffix to append to the input field names (default: empty)", 
          "overridden": true
        }, 
        {
          "description": "1 = process each array field as one vector individually (and produce one output for each input array field). Only array fields (i.e. fields with more than one element) are processed if this is set. / 0 = process complete input frame as one vector, ignoring field/element structure", 
          "overridden": true, 
          "default": 0, 
          "allowedValues": [
            0, 
            1
          ], 
          "field": "processArrayFields", 
          "type": "numeric"
        }, 
        {
          "default": 0, 
          "field": "htkcompatible", 
          "type": "numeric", 
          "description": "If set to 1, enable htk compatible log-energy output (this will output log-energy ONLY! no rms energy...)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "rms", 
          "type": "numeric", 
          "description": "1/0 = on/off   output of root-mean-square (RMS) energy ( = square root of ( the sum over all input values n=0...N of (x[n]*x[n]) divided by N)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "energy2", 
          "type": "numeric", 
          "description": "1/0 = on/off   output of quadratic energy (sum of all x[n]^2  divided by N)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "log", 
          "type": "numeric", 
          "description": "1/0 = on/off   output logarithmis energy (log-energy). E = log( sum (x[n]*x[n]/N ) ; The argument of the log() function is floored to 8.674676e-019. The output unit has the unit of 'neper' (which is simlar to decibel, with the only difference that the natural logarithm (base e) is used instead of the base-10 logarithm)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "escaleLog", 
          "type": "numeric", 
          "description": "scale factor to multiply log energy by"
        }, 
        {
          "default": 1, 
          "field": "escaleRms", 
          "type": "numeric", 
          "description": "scale factor to multiply rms energy by"
        }, 
        {
          "default": 1, 
          "field": "escaleSquare", 
          "type": "numeric", 
          "description": "scale factor to multiply quadratic energy by"
        }, 
        {
          "default": 0, 
          "field": "ebiasLog", 
          "type": "numeric", 
          "description": "bias to add to log energy"
        }, 
        {
          "default": 0, 
          "field": "ebiasRms", 
          "type": "numeric", 
          "description": "bias to add to rms energy"
        }, 
        {
          "default": 0, 
          "field": "ebiasSquare", 
          "type": "numeric", 
          "description": "bias to add to quadratic energy"
        }
      ], 
      "component": "cEnergy", 
      "readsFromLevels": [
        "reader.dmLevel"
      ], 
      "baseComponent": "cVectorProcessor"
    }, 
    {
      "description": "This component computes simplified frame intensity (narrow band approximation). IMPORTANT: It expects UNwindowed raw PCM frames as input!! A Hamming window is internally applied and the resulting signal is squared bevore applying loudness compression, etc.", 
      "writesToLevels": [
        "writer.dmLevel"
      ], 
      "fields": [
        {
          "default": 1, 
          "field": "intensity", 
          "type": "numeric", 
          "description": "1 = enable the output of intensity I (mean of squared input values multiplied by a Hamming window)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "loudness", 
          "type": "numeric", 
          "description": "1 = enable the output of loudness L : L = (I/I0)^0.3 ; I0 = 0.000001 (for sample values normalised to the range -1..1)", 
          "allowedValues": [
            0, 
            1
          ]
        }
      ], 
      "component": "cIntensity", 
      "readsFromLevels": [
        "reader.dmLevel"
      ], 
      "baseComponent": "cVectorProcessor"
    }, 
    {
      "description": "This component computes an N-band Mel/Bark/Semitone-frequency spectrum (critical band spectrum) by applying overlapping triangular filters equidistant on the Mel/Bark/Semitone-frequency scale to an FFT magnitude or power spectrum.", 
      "writesToLevels": [
        "writer.dmLevel"
      ], 
      "fields": [
        {
          "default": 26, 
          "field": "nBands", 
          "type": "numeric", 
          "description": "The number of Mel/Bark/Semitone band filters the filterbank from 'lofreq'-'hifreq' contains."
        }, 
        {
          "default": 20, 
          "field": "lofreq", 
          "type": "numeric", 
          "description": "The lower cut-off frequency of the filterbank (Hz)"
        }, 
        {
          "default": 8000, 
          "field": "hifreq", 
          "type": "numeric", 
          "description": "The upper cut-off frequency of the filterbank (Hz)"
        }, 
        {
          "default": 0, 
          "field": "usePower", 
          "type": "numeric", 
          "description": "Set this to 1, to use the power spectrum instead of magnitude spectrum, i.e. if set this squares the input data", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "showFbank", 
          "type": "numeric", 
          "description": "If this is set to 1, the bandwidths and centre frequencies of the filters in the filterbank are printed to openSMILE log output (console and/or file)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "htkcompatible", 
          "type": "numeric", 
          "description": "1 = enable htk compatible output (audio sample scaling -32767..+32767 instead of openSMILE's -1.0..1.0)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "inverse", 
          "type": "numeric", 
          "description": "[NOT YET FULLY TESTED] 1 = compute fft magnitude spectrum from mel spectrum; Note that if this option is set, 'nBands' specifies the number of fft bands to create!", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": "mel", 
          "field": "specScale", 
          "type": "string", 
          "description": "The frequency scale to design the critical band filterbank in (this is the scale in which the filter centre frequencies are placed equi-distant):\nmel = Mel-frequency scale (m = 1127 ln (1+f/700))\nbark = Bark scale approximation (Critical band rate z): z = [26.81 / (1.0 + 1960/f)] - 0.53\nbark_schroed = Bark scale approximation due to Schroeder (1977): 6*ln( f/600 + [(f/600)^2+1]^0.5 )\nbark_speex = Bark scale approximation as used in Speex codec package\nsemi = semi-tone scale with first note (0) = 'firstNote' (default 27.5Hz)  (s=12*log(f/firstNote)/log(2)) [experimental]\nlog = logarithmic scale with base 'logScaleBase' (default = 2)\nlin(ear) = linear Hz scale.", 
          "allowedValues": [
            "mel", 
            "bark", 
            "bark_schroed", 
            "bark_speex", 
            "semi", 
            "log", 
            "lin", 
            "linear"
          ]
        }, 
        {
          "default": "lr", 
          "field": "bwMethod", 
          "type": "string", 
          "description": "The method to use to compute filter bandwidth:\nlr  : use centre frequencies of left and right neighbours (standard way for mel-spectra and mfcc)\nerb : bandwidth based on critical bandwidth approximation (ERB), choose this option for computing HFCC instead of MFCC.\ncustom: use the 'halfBwTarg' option to specify a custom effective rectangular bandwidth of the triangular filters - this bandwidth is constant for all filters and independent of the center frequency.", 
          "allowedValues": [
            "lr", 
            "erb", 
            "custom"
          ]
        }, 
        {
          "default": 1, 
          "field": "halfBwTarg", 
          "type": "numeric", 
          "description": "If bwMethod=='custom' then this options gives the effective rectangular bandwidth of the triangular filters in the target frequency scale (default mel). If showFbank=1 the actual bandwidth in Hz for each center frequency will be printed at startup."
        }, 
        {
          "default": 2, 
          "field": "logScaleBase", 
          "type": "numeric", 
          "description": "The base for log scales (a log base of 2.0 - the default - corresponds to an octave target scale)"
        }, 
        {
          "default": 27.5, 
          "field": "firstNote", 
          "type": "numeric", 
          "description": "The first note (in Hz) for a semi-tone scale"
        }, 
        {
          "default": 0, 
          "field": "overrideFrameSizeSec", 
          "type": "numeric", 
          "description": "In case that the original FFT frame size in seconds cannot automatically be read from the input level meta data (i.e. for average spectra in a multi-frame-size setting), use this to manually override it and force the filters to be created based on the given frame size assumption."
        }
      ], 
      "component": "cMelspec", 
      "readsFromLevels": [
        "reader.dmLevel"
      ], 
      "baseComponent": "cVectorProcessor"
    }, 
    {
      "description": "This component computes Mel-frequency cepstral coefficients (MFCC) from a critical band spectrum (see 'cMelspec'). An I-DCT of type-II is used from transformation from the spectral to the cepstral domain. Liftering of cepstral coefficients is supported. HTK compatible values can be computed.", 
      "writesToLevels": [
        "writer.dmLevel"
      ], 
      "fields": [
        {
          "default": "mfcc", 
          "field": "nameAppend", 
          "type": "string", 
          "description": "A string suffix to append to the input field names (default: empty)", 
          "overridden": true
        }, 
        {
          "default": 1, 
          "field": "firstMfcc", 
          "type": "numeric", 
          "description": "The first MFCC to compute"
        }, 
        {
          "default": 12, 
          "field": "lastMfcc", 
          "type": "numeric", 
          "description": "The last MFCC to compute"
        }, 
        {
          "default": 12, 
          "field": "nMfcc", 
          "type": "numeric", 
          "description": "Use this option to specify the number of MFCC, instead of specifying lastMfcc"
        }, 
        {
          "default": 1e-08, 
          "field": "melfloor", 
          "type": "numeric", 
          "description": "The minimum value allowed for melspectra when taking the log spectrum (this parameter will be forced to 1.0 when htkcompatible=1)"
        }, 
        {
          "default": 1, 
          "field": "doLog", 
          "type": "numeric", 
          "description": "This defaults to 1 (on), set it to 0 to disable the log() operation on the (power) spectrum before applying the DCT. Note: If disabled, the output cannot be considered Cepstral coefficients anymore!", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 22, 
          "field": "cepLifter", 
          "type": "numeric", 
          "description": "Parameter for cepstral 'liftering', set this to 0.0 to disable cepstral liftering"
        }, 
        {
          "default": 1, 
          "field": "htkcompatible", 
          "type": "numeric", 
          "description": "1 = append the 0-th coefficient at the end instead of placing it as the first element of the output vector", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "inverse", 
          "type": "numeric", 
          "description": "1/0 = on/off : comutation of inverse MFCC (i.e. input is MFCC array)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 26, 
          "field": "nBands", 
          "type": "numeric", 
          "description": "number of mel/bark bands to create when computing the inverse MFCC (must be the same as the number of bands the forward transform was performed on)."
        }, 
        {
          "default": 0, 
          "field": "printDctBaseFunctions", 
          "type": "numeric", 
          "description": "1/0 = on/off: print the dct base functions in octave compatible syntax to standard output", 
          "allowedValues": [
            0, 
            1
          ]
        }
      ], 
      "component": "cMfcc", 
      "readsFromLevels": [
        "reader.dmLevel"
      ], 
      "baseComponent": "cVectorProcessor"
    }, 
    {
      "description": "This component computes PLP and RASTA-PLP (currently the RASTA filter is not yet implemented) cepstral coefficients from a critical band spectrum (generated by the cMelspec component, for example).\nThe component is capable of performing the following processing steps:\n1) Take the natural logarithm of the critical band powers (doLog)\n2) RASTA filtering\n3) Computation of auditory spectrum (equal loudness curve and loudness compression)\n4) Inverse of the natural logarithm\n5) Inverse DFT to obtain autocorrelation coefficients\n6) Linear prediction analysis on autocorr. coeff.\n7) Computation of cepstral coefficients from lp coefficients\n8) Cepstral 'liftering'", 
      "writesToLevels": [
        "writer.dmLevel"
      ], 
      "fields": [
        {
          "default": 5, 
          "field": "lpOrder", 
          "type": "numeric", 
          "description": "The order of the linear predictor (5th order is optimal according to Hermansky 1990, JASA)"
        }, 
        {
          "default": -1, 
          "field": "nCeps", 
          "type": "numeric", 
          "description": "The number of cepstral coefficients (must be <= lpOrder, set to -1 for max. (=lpOrder))"
        }, 
        {
          "default": 1, 
          "field": "firstCC", 
          "type": "numeric", 
          "description": "The first cepstral coefficient to compute (set to 0 to include the 0th coefficient, which is defined as -log(1/lpcGain) )"
        }, 
        {
          "default": -1, 
          "field": "lastCC", 
          "type": "numeric", 
          "description": "The last cepstral coefficient to compute (set to -1 to use nCeps, else lastCC will override nCeps!)"
        }, 
        {
          "default": 1, 
          "field": "doLog", 
          "type": "numeric", 
          "description": "Take the log of input bands (1=yes / 0=no)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "doAud", 
          "type": "numeric", 
          "description": "Do auditory processing (equal loudness curve and loudness compression) (1=yes / 0=no)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "RASTA", 
          "type": "numeric", 
          "description": "Perform RASTA (temporal) filtering (1=yes / 0=no)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "newRASTA", 
          "type": "numeric", 
          "description": "Perform RASTA (temporal) filtering (more stable filter, Type-II, initial filtering only with FIR part; thanks to Chris Landsiedl for this code!) (1=enable / 0=disable) Note: this option (if set to 1) will disable the 'RASTA' option.", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 29, 
          "field": "rastaUpperCutoff", 
          "type": "numeric", 
          "description": "Upper cut-off frequency of RASTA bandpass filter in Hz"
        }, 
        {
          "default": 1, 
          "field": "rastaLowerCutoff", 
          "type": "numeric", 
          "description": "Lower cut-off frequency of RASTA bandpass filter in Hz"
        }, 
        {
          "default": 1, 
          "field": "doInvLog", 
          "type": "numeric", 
          "description": "Apply inverse logarithm after power compression (1=yes / 0=no)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "doIDFT", 
          "type": "numeric", 
          "description": "Apply I(nverse)DFT after power compression and inverse log (1=yes / 0=no)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "doLP", 
          "type": "numeric", 
          "description": "Do lp analysis on autocorrelation function (1=yes / 0=no)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "doLpToCeps", 
          "type": "numeric", 
          "description": "Convert lp coefficients to cepstral coefficients (1=yes / 0=no)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "cepLifter", 
          "type": "numeric", 
          "description": "Parameter for cepstral 'liftering', set to 0.0 to disable cepstral liftering"
        }, 
        {
          "default": 0.33, 
          "field": "compression", 
          "type": "numeric", 
          "description": "Compression factor for 'power law of hearing'"
        }, 
        {
          "default": 9.3e-10, 
          "field": "melfloor", 
          "type": "numeric", 
          "description": "Minimum value of melspectra when computing mfcc (will be forced to 1.0 when htkcompatible=1)"
        }, 
        {
          "default": 1, 
          "field": "htkcompatible", 
          "type": "numeric", 
          "description": "Set correct mel-floor and force HTK compatible PLP output (1/0 = yes/no)\nhtkcompatible == 1, forces the following settings:\n- melfloor = 1.0 (signal scaling 0..32767*32767)\n- append 0th coeff instead of having it as first value\n- doAud = 1 , doLog=0 , doInvLog=0   (doIDFT, doLP, and doLpToCeps are not forced to 1, this enables generation of HTK compatible auditory spectra, etc. (these, of course, are not compatible, i.e. are not the same as HTK's PLP))\n- the 0th audspec component is used as dc component in IDFT (else the DC component is zero)", 
          "allowedValues": [
            0, 
            1
          ]
        }
      ], 
      "component": "cPlp", 
      "readsFromLevels": [
        "reader.dmLevel"
      ], 
      "baseComponent": "cVectorProcessor"
    }, 
    {
      "description": "This component computes spectral features such as flux, roll-off, centroid, and user defined band energies (rectangular summation of FFT magnitudes), etc.", 
      "writesToLevels": [
        "writer.dmLevel"
      ], 
      "fields": [
        {
          "default": 1, 
          "field": "squareInput", 
          "type": "numeric", 
          "description": "1/0 = square input values (e.g. if input is magnitude and not power spectrum)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": "250-650", 
          "field": "bands", 
          "type": "string", 
          "description": "bands[n] = LoFrq[Hz]-HiFrq[Hz]  (e.g. 0-250), compute energy in this spectral band (only integer frequencies are allowed!)"
        }, 
        {
          "default": 0, 
          "field": "normBandEnergies", 
          "type": "numeric", 
          "description": "(1/0=yes/no) normalise the band energies to the total frame energy (-> relative band energies). Also affects 'harmonicity', normalises the average min to max variations in the spectrum by the total frame energy (sum of magnitudes or squares).", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0.9, 
          "field": "rollOff", 
          "type": "numeric", 
          "description": "rollOff[n] = X  (X in the range 0..1), compute X*100 percent spectral roll-off point"
        }, 
        {
          "default": 0, 
          "field": "specDiff", 
          "type": "numeric", 
          "description": "(1/0=yes/no) enable computation of spectral difference (root-mean-square of absolute differences over all bins)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "specPosDiff", 
          "type": "numeric", 
          "description": "(1/0=yes/no) enable computation of spectral positive difference (sum of squared positive differences normalised by number of bins and then sqrt taken)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "flux", 
          "type": "numeric", 
          "description": "(1/0=yes/no) enable computation of spectral flux", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "fluxCentroid", 
          "type": "numeric", 
          "description": "(1/0=yes/no) enable computation of spectral flux centroid (in Hz), i.e. the frequency with currently the most flux around it.", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "fluxAtFluxCentroid", 
          "type": "numeric", 
          "description": "(1/0=yes/no) enable computation of spectral flux only at and around (+- 2 bins) the centroid of flux (as computed by the 'fluxCentroid' option).", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "centroid", 
          "type": "numeric", 
          "description": "(1/0=yes/no) enable computation of spectral centroid", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "maxPos", 
          "type": "numeric", 
          "description": "(1/0=yes/no) enable computation of position of spectral maximum", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "minPos", 
          "type": "numeric", 
          "description": "(1/0=yes/no) enable computation of position of spectral minimum", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "entropy", 
          "type": "numeric", 
          "description": "(1/0=yes/no) enable computation of spectral entropy", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "standardDeviation", 
          "type": "numeric", 
          "description": "(1/0=yes/no) enable computation of spectral standard deviation (root of variance)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "variance", 
          "type": "numeric", 
          "description": "(1/0=yes/no) enable computation of spectral variance (mpeg7: spectral spread)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "skewness", 
          "type": "numeric", 
          "description": "(1/0=yes/no) enable computation of spectral skewness", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "kurtosis", 
          "type": "numeric", 
          "description": "(1/0=yes/no) enable computation of spectral kurtosis", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "slope", 
          "type": "numeric", 
          "description": "(1/0=yes/no) enable computation of spectral slope over maximal frequency range", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": null, 
          "field": "slopes", 
          "type": "string", 
          "description": "slopes[n] = LoFrq[Hz]-HiFrq[Hz] (e.g. 0-5000), computes spectral slope in the given band (only integer frequencies are allowed!)"
        }, 
        {
          "default": 0, 
          "field": "alphaRatio", 
          "type": "numeric", 
          "description": "(1/0=yes/no) enable computation of alpha ratio (ratio of energy above 1 kHz (up to 5 kHz) to energy below 1 kHz).", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "hammarbergIndex", 
          "type": "numeric", 
          "description": "(1/0=yes/no) enable computation of hammarberg index (ratio of energy peak (max) in 0-2 kHz region and energy peak (max) in 2-5 kHz region).", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "sharpness", 
          "type": "numeric", 
          "description": "(1/0=yes/no) enable computation of psychoacoustic parameter 'sharpness'. In order to obtain proper values, use a bark scale spectrum as input (see cSpecScale component).", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "tonality", 
          "type": "numeric", 
          "description": "(1/0=yes/no) enable computation of consonance (ratio of consonance/dissonance, based on intervals between spectral peaks). (NOT YET IMPLEMENTED)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "harmonicity", 
          "type": "numeric", 
          "description": "(1/0=yes/no) enable computation of harmonicity (mean of consecutive local min-max differences). Optionally normalised by the total frame energy, if normBandEnergies is set to 1.", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "flatness", 
          "type": "numeric", 
          "description": "(1/0=yes/no) enable computation of spectral flatness (sfm = geometric_mean / arithmetic_mean of spectrum).", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "logFlatness", 
          "type": "numeric", 
          "description": "(1/0=yes/no) if flatness is enabled, output ln(flatness).", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "description": "(1/0=yes/no) for backwards feature set compatibility, enable buggy roll-off computation (pre May 2013, pre 2.0 release).", 
          "default": 0, 
          "allowedValues": [
            0, 
            1
          ], 
          "field": "buggyRollOff", 
          "recommendedValue": 0, 
          "type": "numeric"
        }, 
        {
          "description": "(1/0=yes/no) for backwards feature set compatibility, enable (incorrectly) scaled spectral slope computation (pre July 2013, pre 2.0 final release). Enabled by default, to preserve compatibility with older feature sets. Disable in new designs!", 
          "default": 1, 
          "allowedValues": [
            0, 
            1
          ], 
          "field": "oldSlopeScale", 
          "recommendedValue": 0, 
          "type": "numeric"
        }, 
        {
          "default": "0-0", 
          "field": "freqRange", 
          "type": "string", 
          "description": "range of spectrum to consider for spectral parameter computation (syntax: lowerHz-upperHz, e.g. 0-8000; use 0-0 (default) for full range)"
        }, 
        {
          "default": 0, 
          "field": "useLogSpectrum", 
          "type": "numeric", 
          "description": "(1/0=yes/no) Compute the following parameters (if enabled) from the log spectrum instead of the power spectrum: spectral slope(s), centroid, maxpos/minpos, entropy, moments, sharpness, harmonicity, flatness. Please note, that the band energies are computed from the power spectrum, but the output will be in dB (log) if this option is enabled (1). Spectral roll-off and flux will always be computed from the power spectrum (no log).", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1e-07, 
          "field": "specFloor", 
          "type": "numeric", 
          "description": "When using the log Spectrum, the square(!) of this value is used as a floor value for the power spectrum."
        }
      ], 
      "component": "cSpectral", 
      "readsFromLevels": [
        "reader.dmLevel"
      ], 
      "baseComponent": "cVectorProcessor"
    }, 
    {
      "description": "This component computes the fundamental frequency and the probability of voicing via an acf and cepstrum based method. The input must be an acf field and a cepstrum field (both generated by a cAcf component).", 
      "writesToLevels": [
        "writer.dmLevel"
      ], 
      "fields": [
        {
          "description": "1 = process each array field as one vector individually (and produce one output for each input array field). Only array fields (i.e. fields with more than one element) are processed if this is set. / 0 = process complete input frame as one vector, ignoring field/element structure", 
          "overridden": true, 
          "default": 0, 
          "allowedValues": [
            0, 
            1
          ], 
          "field": "processArrayFields", 
          "type": "numeric"
        }, 
        {
          "default": 500, 
          "field": "maxPitch", 
          "type": "numeric", 
          "description": "Maximum detectable pitch in Hz"
        }, 
        {
          "default": 1, 
          "field": "voiceProb", 
          "type": "numeric", 
          "description": "1/0 = on/off: output of voicing probability", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "voiceQual", 
          "type": "numeric", 
          "description": "1/0 = on/off: output of voice 'quality' (= ZCR of ACF)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "HNR", 
          "type": "numeric", 
          "description": "1/0 = on/off; output of log (base e) harmonics-to-noise ratio (HNR) computed from the ACF, pre 2.0 compatibility.", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "HNRdB", 
          "type": "numeric", 
          "description": "1/0 = on/off; output of log (dB, base 10) harmonics-to-noise ratio (HNR) computed from the ACF. Recommended.", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "linHNR", 
          "type": "numeric", 
          "description": "1/0 = on/off; output of linear harmonics-to-noise ratio (HNR) computed from the ACF.", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "F0", 
          "type": "numeric", 
          "description": "1/0 = on/off: output of F0 (pitch) (Note: the pitch output is 0 in unvoiced segments)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "F0raw", 
          "type": "numeric", 
          "description": "1/0 = on/off: output of raw F0 candidate without thresholding in unvoiced segments", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "F0env", 
          "type": "numeric", 
          "description": "1/0 = on/off: output of F0 envelope (expontial decay smoothing) (Note: this differs from the envelope computed by the cPitchBase descendant components, such as cPitchSHS!)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0.55, 
          "field": "voicingCutoff", 
          "type": "numeric", 
          "description": "This sets the voicing probability threshold for pitch detection [0.0 - 1.0]. Frames with voicing probability values above this threshold will be considered as voiced."
        }
      ], 
      "component": "cPitchACF", 
      "readsFromLevels": [
        "reader.dmLevel"
      ], 
      "baseComponent": "cVectorProcessor"
    }, 
    {
      "description": "This component performs temporal pitch smoothing. Input: candidates produced by a pitchBase descendant (e.g. cPitchSHS). The voicing cutoff threshold is inherited from the input component, thus this smoother component does not provide its own threshold option.", 
      "writesToLevels": [
        "writer.dmLevel"
      ], 
      "fields": [
        {
          "description": "1 = process each array field as one vector individually (and produce one output for each input array field). Only array fields (i.e. fields with more than one element) are processed if this is set. / 0 = process complete input frame as one vector, ignoring field/element structure", 
          "overridden": true, 
          "default": 0, 
          "allowedValues": [
            0, 
            1
          ], 
          "field": "processArrayFields", 
          "type": "numeric"
        }, 
        {
          "default": 0, 
          "field": "medianFilter0", 
          "type": "numeric", 
          "description": "Apply median filtering of candidates as the FIRST processing step; filter length is 'medianFilter0' if > 0"
        }, 
        {
          "default": 0, 
          "field": "postSmoothing", 
          "type": "numeric", 
          "description": "Apply post processing (median and spike remover) over 'postSmoothing' frames (0=no smoothing or use default set by postSmoothingMethod)"
        }, 
        {
          "default": "simple", 
          "field": "postSmoothingMethod", 
          "type": "string", 
          "description": "Post processing method to use. One of the following:\n'none' disable post smoothing\n'simple' simple post smoothing using only 1 frame delay (will smooth out 1 frame octave spikes)\n'median' will apply a median filter to the output values (length = value of 'postProcessing')", 
          "allowedValues": [
            "none", 
            "simple", 
            "median"
          ]
        }, 
        {
          "default": 1, 
          "field": "octaveCorrection", 
          "type": "numeric", 
          "description": "Enable intelligent cross candidate octave correction", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "F0final", 
          "type": "numeric", 
          "description": "1 = Enable output of final (corrected and smoothed) F0", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "F0finalEnv", 
          "type": "numeric", 
          "description": "1 = Enable output of envelope of final smoothed F0 (i.e. there will be no 0 values (except for end and beginning))", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "no0f0", 
          "type": "numeric", 
          "description": "1 = enable 'no zero F0', output data only when F0>0, i.e. a voiced frame is detected. This may cause problem with some functionals and framer components, which don't support this variable length data yet...", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "voicingFinalClipped", 
          "type": "numeric", 
          "description": "1 = Enable output of final smoothed and clipped voicing (pseudo) probability. 'Clipped' means that the voicing probability is set to 0 for unvoiced regions, i.e. where the probability lies below the voicing threshold.", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "voicingFinalUnclipped", 
          "type": "numeric", 
          "description": "1 = Enable output of final smoothed, raw voicing (pseudo) probability (UNclipped: not set to 0 during unvoiced regions).", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "F0raw", 
          "type": "numeric", 
          "description": "1 = Enable output of 'F0raw' copied from input", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "voicingC1", 
          "type": "numeric", 
          "description": "1 = Enable output of 'voicingC1' copied from input", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "voicingClip", 
          "type": "numeric", 
          "description": "1 = Enable output of 'voicingClip' copied from input", 
          "allowedValues": [
            0, 
            1
          ]
        }
      ], 
      "component": "cPitchSmoother", 
      "readsFromLevels": [
        "reader.dmLevel"
      ], 
      "baseComponent": "cVectorProcessor"
    }, 
    {
      "description": "This component computes (or rather estimates) a semi-tone spectrum from an FFT magnitude spectrum.", 
      "writesToLevels": [
        "writer.dmLevel"
      ], 
      "fields": [
        {
          "default": "note", 
          "field": "nameAppend", 
          "type": "string", 
          "description": "A string suffix to append to the input field names (default: empty)", 
          "overridden": true
        }, 
        {
          "default": 6, 
          "field": "nOctaves", 
          "type": "numeric", 
          "description": "The number of octaves the spectrum should span"
        }, 
        {
          "default": 55, 
          "field": "firstNote", 
          "type": "numeric", 
          "description": "The frequency of the first note (in Hz)"
        }, 
        {
          "default": "gau", 
          "field": "filterType", 
          "type": "string", 
          "description": "The shape of the semitone filter:\ntri (triangular)\ntrp (triangular-powered)\ngau (gaussian)", 
          "allowedValues": [
            "tri", 
            "trp", 
            "gau"
          ]
        }, 
        {
          "default": 0, 
          "field": "usePower", 
          "type": "numeric", 
          "description": "Compute the semi-tone spectrum from the power spectrum instead of the magnitudes (= square input values)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "dbA", 
          "type": "numeric", 
          "description": "apply built-in dbA weighting to (power) spectrum (1/0 = yes/no)", 
          "allowedValues": [
            0, 
            1
          ]
        }
      ], 
      "component": "cTonespec", 
      "readsFromLevels": [
        "reader.dmLevel"
      ], 
      "baseComponent": "cVectorProcessor"
    }, 
    {
      "description": "This component implements an on-line, sample by sample semi-tone filter bank which can be used as first step for the computation of CHROMA features as a replacement of cTonespec. The filter is based on correlating with a sine wave of the exact target frequency of a semi-tone for each note in the filter-bank.", 
      "writesToLevels": [
        "writer.dmLevel"
      ], 
      "fields": [
        {
          "default": "tonefilt", 
          "field": "nameAppend", 
          "type": "string", 
          "description": "A string suffix to append to the input field names (default: empty)", 
          "overridden": true
        }, 
        {
          "default": 48, 
          "field": "nNotes", 
          "type": "numeric", 
          "description": "The number of semi-tone filters in the bank"
        }, 
        {
          "default": 55, 
          "field": "firstNote", 
          "type": "numeric", 
          "description": "The frequency of the first note in Hz"
        }, 
        {
          "default": 0.9995, 
          "field": "decayF0", 
          "type": "numeric", 
          "description": "The gliding average decay coefficient for the first note (lowest frequency)"
        }, 
        {
          "default": 0.998, 
          "field": "decayFN", 
          "type": "numeric", 
          "description": "The gliding average decay coefficient for the last note (highest frequency) (must be < decayF0!); decay coefficents for intermediate frequencies will be interpolated linearly from the start and end coefficients."
        }, 
        {
          "default": 0.1, 
          "field": "outputPeriod", 
          "type": "numeric", 
          "description": "Specifies the period at which to produce output frames in seconds"
        }
      ], 
      "component": "cTonefilt", 
      "readsFromLevels": [
        "reader.dmLevel"
      ], 
      "baseComponent": "cDataProcessor"
    }, 
    {
      "description": "This component computes CHROMA features from a semi-tone scaled spectrum generated by the 'cTonespec' component.", 
      "writesToLevels": [
        "writer.dmLevel"
      ], 
      "fields": [
        {
          "default": "chroma", 
          "field": "nameAppend", 
          "type": "string", 
          "description": "A string suffix to append to the input field names (default: empty)", 
          "overridden": true
        }, 
        {
          "description": "1 = copy the input name (and optionally append a suffix, see 'nameAppend' option), 0 = discard the input name and use only the 'nameAppend' string as new name.", 
          "overridden": true, 
          "default": 0, 
          "allowedValues": [
            0, 
            1
          ], 
          "field": "copyInputName", 
          "type": "numeric"
        }, 
        {
          "default": 12, 
          "field": "octaveSize", 
          "type": "numeric", 
          "description": "The size of an octave, i.e. the number of output bins, or the interval to which the input bins are mapped via warping."
        }, 
        {
          "default": 0.001, 
          "field": "silThresh", 
          "type": "numeric", 
          "description": "Chroma 'floor', i.e. silence threshold. If at least on element of the (unnormalised) chroma vector falls below the threshold, the vector will not be normalised, and a 0 vector will be output instead."
        }
      ], 
      "component": "cChroma", 
      "readsFromLevels": [
        "reader.dmLevel"
      ], 
      "baseComponent": "cVectorProcessor"
    }, 
    {
      "description": "This component computes CENS (energy normalised and smoothed chroma features) from raw Chroma features generated by the 'cChroma' component.", 
      "writesToLevels": [
        "writer.dmLevel"
      ], 
      "fields": [
        {
          "default": "CENS", 
          "field": "nameAppend", 
          "type": "string", 
          "description": "A string suffix to append to the input field names (default: empty)", 
          "overridden": true
        }, 
        {
          "description": "1 = copy the input name (and optionally append a suffix, see 'nameAppend' option), 0 = discard the input name and use only the 'nameAppend' string as new name.", 
          "overridden": true, 
          "default": 0, 
          "allowedValues": [
            0, 
            1
          ], 
          "field": "copyInputName", 
          "type": "numeric"
        }, 
        {
          "default": "han", 
          "field": "window", 
          "type": "string", 
          "description": "The window function to use for temporal CENS smoothing; one of these: han (Hanning), ham (Hamming), bar (Bartlett)", 
          "allowedValues": [
            "han", 
            "ham", 
            "bar"
          ]
        }, 
        {
          "default": 10, 
          "field": "downsampleRatio", 
          "type": "numeric", 
          "description": "The integer ratio at which to downsample the resulting sequence of vectors. I.e. a value of 4 will average 4 frames and output 1 CENS frame."
        }, 
        {
          "default": 41, 
          "field": "winlength", 
          "type": "numeric", 
          "description": "The length of the CENS smoothing window, in frames."
        }, 
        {
          "default": 0.41, 
          "field": "winlength_sec", 
          "type": "numeric", 
          "description": "The length of the CENS smoothing window, in seconds. This will be rounded upwards (ceil) to the closest length in frames. It overrides winlength, if set."
        }, 
        {
          "default": 1, 
          "field": "l2norm", 
          "type": "numeric", 
          "description": "1/0 = enable/disable normalisation of CENS vectors by their L2-norm.", 
          "allowedValues": [
            0, 
            1
          ]
        }
      ], 
      "component": "cCens", 
      "readsFromLevels": [
        "reader.dmLevel"
      ], 
      "baseComponent": "cVectorProcessor"
    }, 
    {
      "description": "This component computes statistics of F0 harmonics. It requires an F0 (Hertz) input field and a linear frequency axis magnitude spectrum as input.", 
      "writesToLevels": [
        "writer.dmLevel"
      ], 
      "fields": [
        {
          "description": "1 = process each array field as one vector individually (and produce one output for each input array field). Only array fields (i.e. fields with more than one element) are processed if this is set. / 0 = process complete input frame as one vector, ignoring field/element structure", 
          "overridden": true, 
          "default": 0, 
          "allowedValues": [
            0, 
            1
          ], 
          "field": "processArrayFields", 
          "type": "numeric"
        }, 
        {
          "description": "1 = if in processArrayFields (1) mode, then also include single element fields.", 
          "overridden": true, 
          "default": 1, 
          "allowedValues": [
            0, 
            1
          ], 
          "field": "includeSingleElementFields", 
          "type": "numeric"
        }, 
        {
          "default": "F0final", 
          "field": "f0ElementName", 
          "type": "string", 
          "description": "Name of F0 element in input vector to use."
        }, 
        {
          "default": 1, 
          "field": "f0ElementNameIsFull", 
          "type": "numeric", 
          "description": "1/0= f0ElementName is a partial name (glob with *x*) or the exact full name.", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": "pcm_fftMag", 
          "field": "magSpecFieldName", 
          "type": "string", 
          "description": "Name of magnitude spectrum field in input vector to use."
        }, 
        {
          "default": 0, 
          "field": "magSpecFieldNameIsFull", 
          "type": "numeric", 
          "description": "1/0= magSpecFieldName is a partial name (glob with *x*) or the exact full name.", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": null, 
          "field": "formantFrequencyFieldName", 
          "type": "string", 
          "description": "Name of formant frequency field. Typcially formantFreqLpc"
        }, 
        {
          "default": 1, 
          "field": "formantFrequencyFieldNameIsFull", 
          "type": "numeric", 
          "description": "1/0= formantFrequencyFieldName is a partial name (glob with *x*) or the exact full name.", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": null, 
          "field": "formantBandwidthFieldName", 
          "type": "string", 
          "description": "Name of formant bandwidth field. Typically formantBandwidthLpc"
        }, 
        {
          "default": 1, 
          "field": "formantBandwidthFieldNameIsFull", 
          "type": "numeric", 
          "description": "1/0= formantBandwidthFieldName is a partial name (glob with *x*) or the exact full name.", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 100, 
          "field": "nHarmonics", 
          "type": "numeric", 
          "description": "Maximum number of harmonics to search for (including F0) (approximately Fmax / F_lowest_f0)."
        }, 
        {
          "default": 1, 
          "field": "firstHarmonicMagnitude", 
          "type": "numeric", 
          "description": "Index of first harmonic magnitude to output (0 is magnitude of F0)."
        }, 
        {
          "default": 0, 
          "field": "nHarmonicMagnitudes", 
          "type": "numeric", 
          "description": "Number of harmonic magnitudes to output. 0 to disable."
        }, 
        {
          "default": 1, 
          "field": "outputLogRelMagnitudes", 
          "type": "numeric", 
          "description": "1 = output logarithmic magnitudes (dB) normalised by the magnitude of F0 (0dB), if nHarmonicMagnitudes > 0.", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "outputLinearMagnitudes", 
          "type": "numeric", 
          "description": "1 = output the linear magnitudes as obtained from the FFT for the nHarmonicMagnitudes harmonics (if nHarmonicMagnitudes > 0).", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": null, 
          "field": "harmonicDifferences", 
          "type": "string", 
          "description": "Array that specifies harmonic differences (ratios in linear scale) to compute. Syntax for one element: H1-H2 (ratio of H1 to H2), H0 is fundamental frequency. A1,A2,...,AN is the amplitude (highest peak in the formant range) of the N-th formant, if formant frequency AND bandwidth information is given in the input (see formantFrequencyFieldName and formantBandwidthFieldName options)."
        }, 
        {
          "default": 1, 
          "field": "harmonicDifferencesLog", 
          "type": "numeric", 
          "description": "1 = Harmonic differences in log magnitude scale (actually differences of the log values then).", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "harmonicDifferencesRatioLinear", 
          "type": "numeric", 
          "description": "1 = Harmonic differences in linear magnitude scale (actually ratios of the linear values then).", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "formantAmplitudes", 
          "type": "numeric", 
          "description": "1 = Enable output of formant amplitudes (amplitude of highest peak in the formant range, half bandwidth left and right of formant frequency).", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "formantAmplitudesLinear", 
          "type": "numeric", 
          "description": "1 = Linear formant amplitude output, requires formantAmplitudes=1 .", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "formantAmplitudesLogRel", 
          "type": "numeric", 
          "description": "1 = Logarithmic relative to F0 formant amplitude output in dB, requires formantAmplitudes=1 .", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "formantAmplitudesStart", 
          "type": "numeric", 
          "description": "First formant to compute amplitudes for, 0 is F0, 1 is first formant, etc."
        }, 
        {
          "default": -1, 
          "field": "formantAmplitudesEnd", 
          "type": "numeric", 
          "description": "Last formant to compute amplitudes for. Default '-1' is last formant found in the input."
        }, 
        {
          "default": 0, 
          "field": "computeAcfHnrLogdB", 
          "type": "numeric", 
          "description": "1 = enable HNR (logarithmic in dB) from ACF at F0 position (vs. total energy). Will be zero for unvoiced frames (where F0 = 0).", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "computeAcfHnrLinear", 
          "type": "numeric", 
          "description": "1 = enable HNR (linear ACF amplitude ratio) from ACF at F0 position (vs. total energy).  Will be zero for unvoiced frames (where F0 = 0).", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": -201, 
          "field": "logRelValueFloorUnvoiced", 
          "type": "numeric", 
          "description": "Sets the value that is returned for LogRel (relative to F0) type features when F0==0 (unvoiced). Logical default is the general floor of -201.0, however if unvoiced regions should always be zero, in order to be discarded/ignored e.g. by a functionals component, then this should be set to 0.0"
        }
      ], 
      "component": "cHarmonics", 
      "readsFromLevels": [
        "reader.dmLevel"
      ], 
      "baseComponent": "cVectorProcessor"
    }, 
    {
      "description": "Viterbi algorithm to smooth pitch contours and remove octave jumps.", 
      "writesToLevels": [
        "writer.dmLevel"
      ], 
      "fields": [
        {
          "field": "reader2", 
          "type": "cDataReader", 
          "description": "Configuration of the dataMemory reader sub-component which is used to read input frames with a certain lag (max. bufferLength!)."
        }, 
        {
          "default": 30, 
          "field": "bufferLength", 
          "type": "numeric", 
          "description": "The length of the delay buffer in (input) frames. This is the amount of data that will be used for the Viterbi smoothing, and it is also the lag which the output is behind the input. The input level buffer must be at least bufferLength+1 in size!."
        }, 
        {
          "default": 1, 
          "field": "F0final", 
          "type": "numeric", 
          "description": "1 = Enable output of final (corrected and smoothed) F0 -- linear scale", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "F0finalLog", 
          "type": "numeric", 
          "description": "1 = Enable output of final (corrected and smoothed) F0 in logarithmic representation (semitone scale with base note 27.5 Hz - a linear F0 equal to and below 29.136 Hz (= 1 on the semitone scale) will be clipped to an output value of 1, since 0 is reserved for unvoiced).", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "F0finalEnv", 
          "type": "numeric", 
          "description": "1 = Enable output of envelope of final smoothed F0 (i.e. there will be no 0 values (except for the beginning). Envelope method is to hold the last valid sample, no interpolation is performed. [EXPERIMENTAL!]", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "F0finalEnvLog", 
          "type": "numeric", 
          "description": "1 = Enable output of envelope of final smoothed F0 (i.e. there will be no 0 values (except for end and beginning)) in a logarithmic (semitone, base note 27.5 Hz - a linear F0 equal to and below 29.136 Hz (= 1 on the semitone scale) will be clipped to an output value of 1, since 0 is reserved for unvoiced) frequency scale. Envelope method is sample and hold, no interpolation is performed. [EXPERIMENTAL!]", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "no0f0", 
          "type": "numeric", 
          "description": "1 = enable 'no zero F0', output data only when F0>0, i.e. a voiced frame is detected. This may cause problem with some functionals and framer components, which don't support this variable length data yet...", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "voicingFinalClipped", 
          "type": "numeric", 
          "description": "1 = Enable output of final smoothed and clipped voicing (pseudo) probability. 'Clipped' means that the voicing probability is set to 0 for unvoiced regions, i.e. where the probability lies below the voicing threshold.", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "voicingFinalUnclipped", 
          "type": "numeric", 
          "description": "1 = Enable output of final smoothed, raw voicing (pseudo) probability (UNclipped: not set to 0 during unvoiced regions).", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "F0raw", 
          "type": "numeric", 
          "description": "1 = Enable output of 'F0raw' copied from input", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "voicingC1", 
          "type": "numeric", 
          "description": "1 = Enable output of 'voicingC1' copied from input", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "voicingClip", 
          "type": "numeric", 
          "description": "1 = Enable output of 'voicingClip' copied from input", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 2, 
          "field": "wLocal", 
          "type": "numeric", 
          "description": "Viterbi weight for local log. voice probs. A higher weight here will favour candidates with a high voicing probability."
        }, 
        {
          "default": 10, 
          "field": "wTvv", 
          "type": "numeric", 
          "description": "Viterbi weight for voiced-voiced transition. A higher weight here will favour a flatter pitch curve (less jumps)"
        }, 
        {
          "default": 5, 
          "field": "wTvvd", 
          "type": "numeric", 
          "description": "Viterbi weight for smoothness of voiced-voiced transition. A higher weight here will favour a flatter pitch curve (less jumps)"
        }, 
        {
          "default": 10, 
          "field": "wTvuv", 
          "type": "numeric", 
          "description": "Viterbi cost for voiced-unvoiced transitions. A higher value will reduce the number of voiced-unvoiced transitions."
        }, 
        {
          "default": 4, 
          "field": "wThr", 
          "type": "numeric", 
          "description": "Viterbi cost bias for voice prob. crossing the voicing threshold. A higher value here will force voiced/unvoiced decisions by the Viterbi algorithm to be more close to the threshold based decision. A lower value, e.g. 0, will ignore the voicing threshold completely (not recommended)."
        }, 
        {
          "default": 1, 
          "field": "wRange", 
          "type": "numeric", 
          "description": "Viterbi weight for frequency range constraint. A higher value will enforce the given frequency weighting more strictly, i.e. favour pitch frequencies between 100 Hz and 300 Hz."
        }, 
        {
          "default": 0, 
          "field": "wTuu", 
          "type": "numeric", 
          "description": "Viterbi cost for unvoiced-unvoiced transitions. There should be no need to change the default value of 0."
        }
      ], 
      "component": "cPitchSmootherViterbi", 
      "readsFromLevels": [
        "reader.dmLevel", 
        "reader2.dmLevel"
      ], 
      "baseComponent": "cDataProcessor"
    }, 
    {
      "description": "This component computes Voice Quality parameters Jitter (pitch period deviations) and Shimmer (pitch period amplitude deviations). It requires the raw PCM frames and the corresponding fundamental frequency (F0) as inputs.", 
      "writesToLevels": [
        "writer.dmLevel"
      ], 
      "fields": [
        {
          "field": "F0reader", 
          "type": "cDataReader", 
          "description": "Configuration of the dataMemory reader sub-component which is used to read the F0 estimate from a pitch component output (e.g. cPitchShs)."
        }, 
        {
          "default": "F0final", 
          "field": "F0field", 
          "type": "string", 
          "description": "The name of the field in 'F0reader.dmLevel' containing the F0 estimate (in Hz) (usually F0final or F0raw) - full name, exact match!"
        }, 
        {
          "default": 0.1, 
          "field": "searchRangeRel", 
          "type": "numeric", 
          "description": "The relative search range for period deviations (Jitter): maxT0, minT0 = (1.0 +/- searchRangeRel)*T0"
        }, 
        {
          "default": 2, 
          "field": "minNumPeriods", 
          "type": "numeric", 
          "description": "Minimum number of F0 periods to compute jitter/shimmer over. The frame size must be large enough to hold that number of periods for the extraction to be stable!"
        }, 
        {
          "default": 0.5, 
          "field": "minCC", 
          "type": "numeric", 
          "description": "Cross correlation threshold below which the periods will be rejected."
        }, 
        {
          "default": 0, 
          "field": "jitterLocal", 
          "type": "numeric", 
          "description": "1 = enable computation of F0 jitter (period length variations). jitterLocal = the average absolute difference between consecutive periods, divided by the average period length of all periods in the frame", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "jitterDDP", 
          "type": "numeric", 
          "description": "1 = enable computation of F0 jitter (period length variations). jitterDDP = the average absolute difference between consecutive differences between consecutive periods, divided by the average period length of all periods in the frame", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "jitterLocalEnv", 
          "type": "numeric", 
          "description": "1 = compute envelope of jitterLocal (i.e. fill jitter values in unvoiced frames with value of last voiced segment). Use this in conjunction with statistical functionals such as means.", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "jitterDDPEnv", 
          "type": "numeric", 
          "description": "1 = compute envelope of jitterDDP (i.e. fill jitter values in unvoiced frames with value of last voiced segment). Use this in conjunction with statistical functionals such as means.", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "shimmerLocal", 
          "type": "numeric", 
          "description": "1 = enable computation of F0 shimmer (amplitude variations). shimmerLocal = the average absolute difference between the interpolated peak amplitudes of consecutive periods, divided by the average peak amplitude of all periods in the frame", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "shimmerLocalDB", 
          "type": "numeric", 
          "description": "1 = enable computation of F0 shimmer (amplitude variations) in decibel (dB). shimmerLocal = the average absolute difference between the interpolated peak amplitudes of consecutive periods, divided by the average peak amplitude of all periods in the frame", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "shimmerLocalEnv", 
          "type": "numeric", 
          "description": "1 = compute envelope of shimmerLocal (i.e. fill shimmer values in unvoiced frames with value of last voiced segment). Use this in conjunction with statistical functionals such as means.", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "shimmerLocalDBEnv", 
          "type": "numeric", 
          "description": "1 = compute envelope of shimmerLocalDB (i.e. fill shimmer values in unvoiced frames with value of last voiced segment). Use this in conjunction with statistical functionals such as means.", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "shimmerUseRmsAmplitude", 
          "type": "numeric", 
          "description": "1 = use average rms amplitude instead of peak amplitude.", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "harmonicERMS", 
          "type": "numeric", 
          "description": "1 = output of harmonic component RMS energy (energy average period waveform).", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "noiseERMS", 
          "type": "numeric", 
          "description": "1 = output of noise component RMS energy (energy of difference signal between repeated average period waveform and actual signal).", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "linearHNR", 
          "type": "numeric", 
          "description": "1 = output of harmonics to noise ratio computed from waveform signal (= harmonicERMS/noiseERMS)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "logHNR", 
          "type": "numeric", 
          "description": "1 = output of logarithmic harmonics to noise ratio computed from waveform signal, using natural logarithm (base e) (logHNR = log(harmonicERMS/noiseERMS) )", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": -100, 
          "field": "lgHNRfloor", 
          "type": "numeric", 
          "description": "minimal value logHNR can be, to avoid very large negative numbers for small harmonic energies."
        }, 
        {
          "default": 0, 
          "field": "onlyVoiced", 
          "type": "numeric", 
          "description": "1 = produce output only for voiced frames. I.e. do not output 0 jitter/shimmer values for unvoiced frames. WARNING: this option is not fully supported by the functionals component, yet.", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "refinedF0", 
          "type": "numeric", 
          "description": "1 = output refined F0 in a field named after the 'F0field' option.", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "sourceQualityMean", 
          "type": "numeric", 
          "description": "1 = compute larynx source quality mean per frame (similarity of pitch periods)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "sourceQualityRange", 
          "type": "numeric", 
          "description": "1 = compute larynx source quality range per frame (max - min similarity of pitch periods)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "usePeakToPeakPeriodLength", 
          "type": "numeric", 
          "description": "1 = use peak to peak period length instead of correlation peak position (should roughly be the same - the old version used the correlation peak pos., which is the default)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": null, 
          "field": "periodOutputFile", 
          "type": "string", 
          "description": "Dump period start/end/amplitude/length to file if this option is set to a filename."
        }, 
        {
          "default": 2, 
          "field": "inputMaxDelaySec", 
          "type": "numeric", 
          "description": "The maximum possible delay of the F0 input wrt. to the waveform in seconds. This occurs mainly for viterbi smoothing, for example. IT IS IMPORTANT that you set this parameter with care (summing up all delays like bufferLength of the viterbi smoother, etc.), otherwise the processing will hang or abort before the actual end of the input!"
        }, 
        {
          "description": "1 = enable compatibility with 2.2 and earlier versions with broken Jitter computation. Please specify this manually in all new configs (and update old configs to use value 0), as the default might change from 1 to 0 in future builds.", 
          "default": 1, 
          "allowedValues": [
            0, 
            1
          ], 
          "field": "useBrokenJitterThresh", 
          "recommendedValue": 0, 
          "type": "numeric"
        }
      ], 
      "component": "cPitchJitter", 
      "readsFromLevels": [
        "reader.dmLevel", 
        "F0reader.dmLevel"
      ], 
      "baseComponent": "cDataProcessor"
    }, 
    {
      "description": "This component reads pitch data, detects pseudo syllables, and computes pitch direction estimates per syllable. Thereby the classes falling, flat, and rising are distinguished.\nRequired input fields: F0, F0env, and 'loudness' or 'RMSenergy'.", 
      "writesToLevels": [
        "writer.dmLevel"
      ], 
      "fields": [
        {
          "default": 0.2, 
          "field": "ltbs", 
          "type": "numeric", 
          "description": "The size of the long-term average buffer in seconds"
        }, 
        {
          "default": 0.05, 
          "field": "stbs", 
          "type": "numeric", 
          "description": "The size of the short-term average buffer in seconds"
        }, 
        {
          "default": null, 
          "field": "directionMsgRecp", 
          "typeHint": "componentInstance,", 
          "type": "string", 
          "description": "Recipient component(s) for per syllable event-based pitch direction message (rise/fall/rise-fall/fall-rise message are sent only if and as ofter as a such event occurs on a syllable)"
        }, 
        {
          "default": 100, 
          "field": "speakingRateBsize", 
          "type": "numeric", 
          "description": "The buffer size for computation of speaking rate (in input frames, typical frame rate 100 fps)"
        }, 
        {
          "default": 1, 
          "field": "F0direction", 
          "type": "numeric", 
          "description": "1 = enable output of F0 direction as numeric value (fall: -1.0 / flat: 0.0 / rise: 1.0)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "directionScore", 
          "type": "numeric", 
          "description": "1 = enable output of F0 direction score (short term mean - long term mean)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "speakingRate", 
          "type": "numeric", 
          "description": "1 = enable output of current speaking rate in Hz (is is output for every frame, thus, a lot of redundancy here)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "F0avg", 
          "type": "numeric", 
          "description": "1 = enable output of long term average F0", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "F0smooth", 
          "type": "numeric", 
          "description": "1 = enable output of exponentially smoothed F0", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "onlyTurn", 
          "type": "numeric", 
          "description": "1 = send pitch direction messages (directionMsgRecp) only during speech turns (voice activity) (according to turnStart/turnEnd messages received from cTurnDetector)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": "turnStart", 
          "field": "turnStartMessage", 
          "type": "string", 
          "description": "Use this option to define a custom message name for turn start messages, i.e. if you want to use voice activity start/end messages instead"
        }, 
        {
          "default": "turnEnd", 
          "field": "turnEndMessage", 
          "type": "string", 
          "description": "Use this option to define a custom message name for turn end messages, i.e. if you want to use voice activity start/end messages instead"
        }, 
        {
          "default": "F0", 
          "field": "F0fieldname", 
          "type": "string", 
          "description": "The name of the F0 data field to use for syllable detection and pitch direction analysis"
        }, 
        {
          "default": "F0env", 
          "field": "F0envFieldname", 
          "type": "string", 
          "description": "The name of the F0 envelope data field to use for syllable detection and pitch direction analysis"
        }, 
        {
          "default": "loudness", 
          "field": "LoudnessFieldname", 
          "type": "string", 
          "description": "The name of the 'Loudness' data field (see cIntensity component) to use for syllable nuclei detection"
        }, 
        {
          "default": "pcm_RMSenergy", 
          "field": "RMSenergyFieldname", 
          "type": "string", 
          "description": "The name of the RMS energy data field to use for syllable detection"
        }
      ], 
      "component": "cPitchDirection", 
      "readsFromLevels": [
        "reader.dmLevel"
      ], 
      "sendsMessagesToComponents": [
        "directionMsgRecp"
      ],
      "baseComponent": "cDataProcessor"
    }, 
    {
      "description": "This component computes the fundamental frequency via the Sub-Harmonic-Sampling (SHS) method (this is related to the Harmonic Product Spectrum method).", 
      "writesToLevels": [
        "writer.dmLevel",
        "shsWriter.dmLevel"
      ], 
      "fields": [
        {
          "default": 0.7, 
          "field": "voicingCutoff", 
          "type": "numeric", 
          "description": "This sets the voicing (pseudo) probability threshold for pitch detection. Frames with voicing probability values above this threshold will be considered as voiced.", 
          "overridden": true
        }, 
        {
          "default": "Mag_logScale", 
          "field": "inputFieldSearch", 
          "type": "string", 
          "description": "A part of the name to find the pitch detectors input field by ('Mag' searches e.g. for *Mag*, and will match fftMag fields)", 
          "overridden": true
        }, 
        {
          "description": "1 = enable low-level octave correction tuned for the SHS algorithm (will affect F0C1, voicingC1 and F0raw output fields) [EXPERIMENTAL! MAY BREAK CORRECT PITCH DETECTION!]", 
          "overridden": true, 
          "default": 0, 
          "allowedValues": [
            0, 
            1
          ], 
          "field": "octaveCorrection", 
          "type": "numeric"
        }, 
        {
          "field": "shsWriter", 
          "type": "cDataWriterShs", 
          "description": "Configuration of the dataMemory writer sub-component which is used to dump the SHS spectrum."
        }, 
        {
          "default": 15, 
          "field": "nHarmonics", 
          "type": "numeric", 
          "description": "Number of harmonics to consider for subharmonic sampling (feasible values: 5-15)"
        }, 
        {
          "default": 0.85, 
          "field": "compressionFactor", 
          "type": "numeric", 
          "description": "The factor for successive compression of sub-harmonics"
        }, 
        {
          "default": 0, 
          "field": "greedyPeakAlgo", 
          "type": "numeric", 
          "description": "1 = use new algorithm to return all maximum score candidates regardless of their order. The old algorithm added new candidates only if they were higher scored as the first one. Enabling this seems to require different viterbi parameters for smoothing though, so use with caution! Default behaviour is 'off' so we remain backwards compatibility.", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "shsSpectrumOutput", 
          "type": "numeric", 
          "description": "If set to 1, then the sub-harmonic summation spectra frames will be written to the level specified by shsWriter.dmLevel.", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "lfCut", 
          "type": "numeric", 
          "description": "> 0 = remove low frequency information up to given frequency from input spectrum by zeroing all bins below."
        }
      ], 
      "component": "cPitchShs", 
      "readsFromLevels": [
        "reader.dmLevel"
      ], 
      "baseComponent": "cPitchBase"
    }, 
    {
      "description": "This component computes linear predictive coding (LPC) coefficients from PCM frames. Burg's algorithm and the standard ACF/Durbin based method are implemented for LPC coefficient computation. The output of LPC filter coefficients, reflection coefficients, residual signal, and LP spectrum is supported.", 
      "writesToLevels": [
        "writer.dmLevel"
      ], 
      "fields": [
        {
          "default": "acf", 
          "field": "method", 
          "type": "string", 
          "description": "This option sets the lpc method to use. Choose between: 'acf' acf (autocorrelation) method with Levinson-Durbin algorithm , 'burg' Burg method (N. Anderson (1978))", 
          "allowedValues": [
            "acf", 
            "burg"
          ]
        }, 
        {
          "default": 8, 
          "field": "p", 
          "type": "numeric", 
          "description": "Predictor order (= number of lpc coefficients)"
        }, 
        {
          "default": 1, 
          "field": "saveLPCoeff", 
          "type": "numeric", 
          "description": "1 = save LP coefficients to output", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "lpGain", 
          "type": "numeric", 
          "description": "1 = save lpc gain (error) in output vector", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "saveRefCoeff", 
          "type": "numeric", 
          "description": "1 = save reflection coefficients to output", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "residual", 
          "type": "numeric", 
          "description": "1 = compute lpc residual signal and store in output frame", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "residualGainScale", 
          "type": "numeric", 
          "description": "1 = scale lpc residual signal by lpc gain (divides each frame by gain)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "forwardFilter", 
          "type": "numeric", 
          "description": "1 = apply forward instead of inverse filter when computing residual", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "lpSpectrum", 
          "type": "numeric", 
          "description": "1 = compute lp spectrum using 'lpSpecDeltaF' as frequency resolution or 'lpSpecBins' bins", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "forwardLPspec", 
          "type": "numeric", 
          "description": "1 = compute forward filter transfer function as LP spectrum, instead of old default behaviour of computing spectrum of inverse filter.", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1e-13, 
          "field": "forwardLPspecFloor", 
          "type": "numeric", 
          "description": "Floor value to add to all spectral bins of inverse LP spectrum when inverting the spectrum (1/x) to avoid division by 0. Default: 10^-13."
        }, 
        {
          "default": 10, 
          "field": "lpSpecDeltaF", 
          "type": "numeric", 
          "description": "frequency resolution of lp spectrum (only applicable if 'lpSpectrum=1')"
        }, 
        {
          "default": 100, 
          "field": "lpSpecBins", 
          "type": "numeric", 
          "description": "number of bins to compute lp spectrum for (overrides lpSpecDeltaF) (only applicable if 'lpSpectrum=1')"
        }
      ], 
      "component": "cLpc", 
      "readsFromLevels": [
        "reader.dmLevel"
      ], 
      "baseComponent": "cVectorProcessor"
    }, 
    {
      "description": "This component computes LSP (line spectral pair frequencies, also known as LSF) from LPC coefficients by partial factorisation of the LPC polynomial.", 
      "writesToLevels": [
        "writer.dmLevel"
      ], 
      "fields": [
        {
          "description": "1 = process each array field as one vector individually (and produce one output for each input array field). Only array fields (i.e. fields with more than one element) are processed if this is set. / 0 = process complete input frame as one vector, ignoring field/element structure", 
          "overridden": true, 
          "default": 0, 
          "allowedValues": [
            0, 
            1
          ], 
          "field": "processArrayFields", 
          "type": "numeric"
        }
      ], 
      "component": "cLsp", 
      "readsFromLevels": [
        "reader.dmLevel"
      ], 
      "baseComponent": "cVectorProcessor"
    }, 
    {
      "description": "This component computes formant frequencies and bandwidths by solving for the roots of the LPC polynomial. The formant trajectories can and should be smoothed by the cFormantSmoother component.", 
      "writesToLevels": [
        "writer.dmLevel"
      ], 
      "fields": [
        {
          "description": "1 = process each array field as one vector individually (and produce one output for each input array field). Only array fields (i.e. fields with more than one element) are processed if this is set. / 0 = process complete input frame as one vector, ignoring field/element structure", 
          "overridden": true, 
          "default": 0, 
          "allowedValues": [
            0, 
            1
          ], 
          "field": "processArrayFields", 
          "type": "numeric"
        }, 
        {
          "default": -1, 
          "field": "nFormants", 
          "type": "numeric", 
          "description": "The maximum number of formants to detect (set to < 0 to automatically detect the maximum number of possible formants (nLpcCoeff - 1)"
        }, 
        {
          "default": 1, 
          "field": "saveFormants", 
          "type": "numeric", 
          "description": "If set to 1, output formant frequencies [field name: formantFreqLpc]", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "saveIntensity", 
          "type": "numeric", 
          "description": "If set to 1, output formant frame intensity [field name: formantFrameIntensity]", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "saveNumberOfValidFormants", 
          "type": "numeric", 
          "description": "If set to 1, output the number of valid formants [field name: nFormants]", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "saveBandwidths", 
          "type": "numeric", 
          "description": "If set to 1, output formant bandwidths [field name: formantBandwidthLpc]", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 50, 
          "field": "minF", 
          "type": "numeric", 
          "description": "The minimum of the formant frequency search range"
        }, 
        {
          "default": 5500, 
          "field": "maxF", 
          "type": "numeric", 
          "description": "The maximum detectable formant frequency"
        }, 
        {
          "default": 0, 
          "field": "useLpSpec", 
          "type": "numeric", 
          "description": "Experimental option: If set to 1, computes the formants from peaks found in the 'lpSpectrum' field instead of root solving the lpc coefficient polynomial", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "medianFilter", 
          "type": "numeric", 
          "description": "1 = enable formant post processing by a median filter of length 'medianFilter' (recommended: 5) (will be rounded up to the next odd number); 0 to disable median filter."
        }, 
        {
          "default": 0, 
          "field": "octaveCorrection", 
          "type": "numeric", 
          "description": "Experimental option: 1 = prevent formant octave jumps (esp. when medianFilter is enabled) by employing simple 'octave' correction. 0 = no correction.", 
          "allowedValues": [
            0, 
            1
          ]
        }
      ], 
      "component": "cFormantLpc", 
      "readsFromLevels": [
        "reader.dmLevel"
      ], 
      "baseComponent": "cVectorProcessor"
    }, 
    {
      "description": "This component performs temporal formant smoothing. Input: candidates produced by a formant** component AND(!) - appended - an F0final or voicing field (which is 0 for unvoiced frames and non-zero for voiced frames). Output: Smoothed formant frequency contours.", 
      "writesToLevels": [
        "writer.dmLevel"
      ], 
      "fields": [
        {
          "description": "1 = process each array field as one vector individually (and produce one output for each input array field). Only array fields (i.e. fields with more than one element) are processed if this is set. / 0 = process complete input frame as one vector, ignoring field/element structure", 
          "overridden": true, 
          "default": 0, 
          "allowedValues": [
            0, 
            1
          ], 
          "field": "processArrayFields", 
          "type": "numeric"
        }, 
        {
          "default": 0, 
          "field": "medianFilter0", 
          "type": "numeric", 
          "description": "If > 0, applies median filtering of candidates as the FIRST processing step; the filter length is the value of 'medianFilter0' if > 0"
        }, 
        {
          "default": 0, 
          "field": "postSmoothing", 
          "type": "numeric", 
          "description": "If > 0, applies post processing (median and spike remover) over 'postSmoothing' frames (0=no smoothing or use default set by postSmoothingMethod)"
        }, 
        {
          "default": "simple", 
          "field": "postSmoothingMethod", 
          "type": "string", 
          "description": "The post processing method to use. One of the following:\n'none' disable post smoothing\n'simple' simple post smoothing using only 1 frame delay (will smooth out 1 frame octave spikes)\n'median' will apply a median filter to the output values (length = value of 'postProcessing')", 
          "allowedValues": [
            "none", 
            "simple", 
            "median"
          ]
        }, 
        {
          "default": "F0final", 
          "field": "F0field", 
          "type": "string", 
          "description": "The input field containing either F0final or voicingFinalClipped (i.e. a field who's value is 0 for unvoiced frames and != 0 otherwise), (the name you give here is a partial name, i.e. the actual field names will be matched against *'F0field'*). Note: do not use the *Env (envelope) fields here, they are != 0 for unvoiced frames!"
        }, 
        {
          "default": "formantBand", 
          "field": "formantBandwidthField", 
          "type": "string", 
          "description": "The input field containing formant bandwidths (the name you give here is a partial name, i.e. the actual field names will be matched against *formantBandwidthField*)"
        }, 
        {
          "default": "formantFreq", 
          "field": "formantFreqField", 
          "type": "string", 
          "description": "The input field containing formant frequencies (the name you give here is a partial name, i.e. the actual field names will be matched against *formantFreqField*)"
        }, 
        {
          "default": "formantFrameIntens", 
          "field": "formantFrameIntensField", 
          "type": "string", 
          "description": "The input field containing formant frame intensity (the name you give here is a partial name, i.e. the actual field names will be matched against *formantFrameIntensField*)"
        }, 
        {
          "default": 0, 
          "field": "intensity", 
          "type": "numeric", 
          "description": "If set to 1, output formant intensity", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 5, 
          "field": "nFormants", 
          "type": "numeric", 
          "description": "This sets the maximum number of smoothed formants to output (set to 0 to disable the output of formants and bandwidths)"
        }, 
        {
          "default": 1, 
          "field": "formants", 
          "type": "numeric", 
          "description": "If set to 1, output formant frequencies (also see 'nFormants' option)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "bandwidths", 
          "type": "numeric", 
          "description": "If set to 1, output formant bandwidths (also see 'nFormants' option)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "saveEnvs", 
          "type": "numeric", 
          "description": "If set to 1, output formant frequency and bandwidth envelopes instead(!) of the actual data (i.e. the last value of a voiced frame is used for the following unvoiced frames).", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "no0f0", 
          "type": "numeric", 
          "description": "'no zero F0': if set to 1, output data only when F0>0, i.e. a voiced frame is detected. This may cause problem with some functionals and framer components, which don't support this variable length data yet...", 
          "allowedValues": [
            0, 
            1
          ]
        }
      ], 
      "component": "cFormantSmoother", 
      "readsFromLevels": [
        "reader.dmLevel"
      ], 
      "baseComponent": "cVectorProcessor"
    }, 
    {
      "description": "computes functionals from input frames, this component uses various cFunctionalXXXX sub-components, which implement the actual functionality", 
      "writesToLevels": [
        "writer.dmLevel"
      ], 
      "fields": [
        {
          "field": "Extremes", 
          "type": "cFunctionalExtremes", 
          "description": "functional sub-config of type cFunctionalExtremes"
        }, 
        {
          "field": "Means", 
          "type": "cFunctionalMeans", 
          "description": "functional sub-config of type cFunctionalMeans"
        }, 
        {
          "field": "Peaks", 
          "type": "cFunctionalPeaks", 
          "description": "functional sub-config of type cFunctionalPeaks"
        }, 
        {
          "field": "Peaks2", 
          "type": "cFunctionalPeaks2", 
          "description": "functional sub-config of type cFunctionalPeaks2"
        }, 
        {
          "field": "Segments", 
          "type": "cFunctionalSegments", 
          "description": "functional sub-config of type cFunctionalSegments"
        }, 
        {
          "field": "Onset", 
          "type": "cFunctionalOnset", 
          "description": "functional sub-config of type cFunctionalOnset"
        }, 
        {
          "field": "Moments", 
          "type": "cFunctionalMoments", 
          "description": "functional sub-config of type cFunctionalMoments"
        }, 
        {
          "field": "Crossings", 
          "type": "cFunctionalCrossings", 
          "description": "functional sub-config of type cFunctionalCrossings"
        }, 
        {
          "field": "Percentiles", 
          "type": "cFunctionalPercentiles", 
          "description": "functional sub-config of type cFunctionalPercentiles"
        }, 
        {
          "field": "Regression", 
          "type": "cFunctionalRegression", 
          "description": "functional sub-config of type cFunctionalRegression"
        }, 
        {
          "field": "Samples", 
          "type": "cFunctionalSamples", 
          "description": "functional sub-config of type cFunctionalSamples"
        }, 
        {
          "field": "Times", 
          "type": "cFunctionalTimes", 
          "description": "functional sub-config of type cFunctionalTimes"
        }, 
        {
          "field": "DCT", 
          "type": "cFunctionalDCT", 
          "description": "functional sub-config of type cFunctionalDCT"
        }, 
        {
          "field": "Lpc", 
          "type": "cFunctionalLpc", 
          "description": "functional sub-config of type cFunctionalLpc"
        }, 
        {
          "default": null, 
          "field": "functionalsEnabled", 
          "type": "string", 
          "description": "Array that defines the enabled functionals\nThe following functionals are available (sub-components) (Attention: the names are case-SENSITIVE!):\n(#) \t(name)    \t\t(description)\n1.\tExtremes \t\t  extreme values (max, min, range, maxPos, minPos, ...)\n2.\tMeans \t\t  various mean values (arithmetic, geometric, quadratic, ...)\n3.\tPeaks \t\t  number of peaks and various measures associated with peaks, such as mean of peaks, mean distance between peaks, etc. Peak finding is based on : x(t-1) < x(t) > x(t+1).\n4.\tPeaks2 \t\t  number of peaks and various measures associated with peaks, such as mean of peaks, mean distance between peaks, etc. Peak finding is based on : x(t-1) < x(t) > x(t+1) plus an advanced post filtering of low relative amplitude peaks. See source code for brief description of peak picking algorithm. This component provideas a new and improved algorithm for peak detection, as compared to cFunctionalPeaks component.\n5.\tSegments \t\t  number of segments based on simple delta thresholding\n6.\tOnset \t\t  relative position of the first onset and the last offset based on simple thresholding. Number of onsets and offsets can also be computed.\n7.\tMoments \t\t  statistical moments (standard deviation, variance, skewness, kurtosis)\n8.\tCrossings \t\t  zero-crossing rate, mean crossing rate, dc offset, min, and max value\n9.\tPercentiles \t\t  percentile values and inter-percentile ranges (including quartiles, etc.). This component sorts the input array and then chooses the value at the index closest to p*buffer_len for the p-th percentile (p=0..1).\n10.\tRegression \t\t  linear and quadratic regression coefficients and corresponding linear and quadratic regression errors. Linear regression line: y = m*x + t ; quadratic regression parabola: y = a*x^2 + b*x + c . Algorithm used: Minimum mean square error, direct analytic solution. This component also computes the centroid of the contour.\n11.\tSamples \t\tsampled values at equidistant frames\n12.\tTimes \t\t  up- and down-level times + rise and fall, left- and right-curve times, duration, etc.\n13.\tDCT \t\t  DCT coefficients\n14.\tLpc \t\t  LP coefficients as functionals"
        }, 
        {
          "default": 0, 
          "field": "nonZeroFuncts", 
          "type": "numeric", 
          "description": "If this is set to 1, functionals are only applied to input values unequal 0. If this is set to 2, functionals are only applied to input values greater than 0.", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": null, 
          "field": "functNameAppend", 
          "type": "string", 
          "description": "Specifies a string prefix to append to the functional name (which is appended to the input feature name)"
        }, 
        {
          "default": "segment", 
          "field": "masterTimeNorm", 
          "type": "string", 
          "description": "This option specifies how all components should normalise times, if they generate output values related to durations. You can change the 'norm' parameter of individual functional components to overwrite this master value. You can choose one of the following normalisation methods:\n'segment' (or: 'turn') : normalise to the range 0..1, the result indicates relative turn length )\n'second'  (absolute time in seconds)\n'frame' (absolute time in number of frames of input level)", 
          "suggestedValues": [
            "segment", 
            "turn", 
            "second", 
            "frame"
          ],
          "allowedValues": [
            "segment",
            "segments",
            "turn",
            "turns",
            "second",
            "seconds",
            "frame",
            "frames"
          ]
        }, 
        {
          "default": 0, 
          "field": "preserveFields", 
          "type": "numeric", 
          "description": "If set to 1, preserves the field structure (and metadata, TODO!), of the input vector structure. If set to 0 (default) the output will only have fields with a single element.", 
          "allowedValues": [
            0, 
            1
          ]
        }
      ], 
      "component": "cFunctionals", 
      "readsFromLevels": [
        "reader.dmLevel"
      ], 
      "baseComponent": "cWinToVecProcessor"
    }, 
    {
      "readsFromLevels": [
        "reader.dmLevel"
      ], 
      "fields": [
        {
          "default": "smileoutput.lsvm", 
          "field": "filename", 
          "type": "string", 
          "description": "Output filename of libsvm formant file"
        }, 
        {
          "default": 0, 
          "field": "lag", 
          "type": "numeric", 
          "description": "output data <lag> frames behind"
        }, 
        {
          "default": 0, 
          "field": "append", 
          "type": "numeric", 
          "description": "Whether to append to existing file or not (1/0 = yes/no)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "timestamp", 
          "type": "numeric", 
          "description": "1 = print timestamp attribute (0 = no)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": "", 
          "field": "instanceBase", 
          "type": "string", 
          "description": "If not empty, print instance name attribute <instanceBase_Nr>"
        }, 
        {
          "default": "", 
          "field": "instanceName", 
          "type": "string", 
          "description": "If not empty, print instance name attribute <instanceName>"
        }, 
        {
          "default": "classX", 
          "field": "class", 
          "type": "string", 
          "description": "Optional definition of class-name strings (each element is the name of one class, i.e. if you have 7 classes, the array should have seven entries; the names will be mapped to class numbers internally, since the libsvm format requires numbers as class labels). This feature allows for passing ground-truth information by class name (using the targetStrAll or targetStr options) directly on the command-line and makes post-editing of feature files obsolete."
        }, 
        {
          "default": 0, 
          "field": "targetNum", 
          "type": "numeric", 
          "description": "Targets/Ground truths (as numbers/indicies) for each instance"
        }, 
        {
          "default": "classX", 
          "field": "targetStr", 
          "type": "string", 
          "description": "Targets/Ground truths (as strings) for each instance"
        }, 
        {
          "default": 0, 
          "field": "targetNumAll", 
          "type": "numeric", 
          "description": "Target/Ground truth (as numbers/indicies) for all instances"
        }, 
        {
          "default": "classX", 
          "field": "targetStrAll", 
          "type": "string", 
          "description": "Target/Ground truth (as strings) for all instances"
        }
      ], 
      "component": "cLibsvmSink", 
      "description": "This component writes data to a text file in LibSVM feature file format. For the 'on-the-fly' classification component see 'cLibsvmliveSink'.", 
      "baseComponent": "cDataSink"
    }, 
    {
      "fields": [
        {
          "default": "dataMemory", 
          "field": "dmInstance", 
          "type": "string", 
          "description": "The cDataMemory instance this writer shall connect to. This allows for complex configurations with multiple, independent data memories. For most applications the default 'dataMemory' should be reasonable. This is also the assumed default when automatically generating a configuration file."
        }, 
        {
          "default": null, 
          "field": "dmLevel", 
          "type": "string", 
          "description": "The data memory level this writer will write data to. You can specify any name here, this writer will register and create a level of this name in the dataMemory during initialisation of openSMILE. Please be aware of the fact that only one writer can write to a data memory level, therefore you are not allowed to use the same name again in a 'dmLevel' option of any other component in the same config."
        }, 
        {
          "field": "levelconf", 
          "type": "cDataMemoryLevel", 
          "description": "This structure specifies an optional configuration of this data memory level.\nIf this is given, it will overwrite any defaults or inherited values from input levels. For details see the help on the configuration type 'cDataMemoryLevel'."
        }
      ], 
      "component": "cDataWriter", 
      "description": ""
    }, 
    {
      "fields": [
        {
          "default": "dataMemory", 
          "field": "dmInstance", 
          "type": "string", 
          "description": "The name of the dataMemory instance this reader should connect to."
        }, 
        {
          "default": null, 
          "field": "dmLevel", 
          "typeHint": "dmLevel", 
          "type": "string", 
          "description": "The level in the data memory instance specified by 'dmInstance' which to read from. If this array element contains more than one element, this reader will read data from multiple input levels, and concattenate the data to generate a single frame/vector. It is a good practice to have unique field names in all levels that you wish to concatenate. Note: If reading from multiple levels, the reader can only return a successfully read frame, if data is available for reading on all input levels. If data is missing on one level, the reader cannot output data, even if data is present on the other levels.",
          "required": true
        }, 
        {
          "default": 0, 
          "field": "forceAsyncMerge", 
          "type": "numeric", 
          "description": "1/0 = yes/no : force framewise merging of levels with differing frame period, if multiple levels are specified in dmLevel", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "errorOnFullInputIncomplete", 
          "type": "numeric", 
          "description": "1/0 = yes/no : 1 = abort with an error if full input matrix reading is activated (frameSize=0 & frameStep=0 => frameMode=full) and beginning of matrix (curR) is not 0, (if this option is set to 0, only a warning is shown)", 
          "allowedValues": [
            0, 
            1
          ]
        }
      ], 
      "component": "cDataReader", 
      "description": ""
    }, 
    {
      "writesToLevels": [
        "writer.dmLevel"
      ], 
      "fields": [
        {
          "field": "writer", 
          "type": "cDataWriter", 
          "description": "The configuration of the cDataWriter subcomponent, which handles the dataMemory interface for data output"
        }, 
        {
          "default": 0, 
          "field": "buffersize", 
          "type": "numeric", 
          "description": "The buffer size for the output level in frames (this overwrites buffersize_sec)"
        }, 
        {
          "default": 0, 
          "field": "buffersize_sec", 
          "type": "numeric", 
          "description": "The buffer size for the output level in seconds"
        }, 
        {
          "default": 0, 
          "field": "blocksize", 
          "type": "numeric", 
          "description": "A size of data blocks to write at once, in frames (same as blocksizeW for source only components, this overwrites blocksize_sec, if set)"
        }, 
        {
          "default": 0, 
          "field": "blocksizeW", 
          "type": "numeric", 
          "description": "The size of data blocks to write in frames (this overwrites blocksize and blocksize_sec, if it is set) (this option is provided for compatibility only... it is exactly the same as 'blocksize')"
        }, 
        {
          "default": 0, 
          "field": "blocksize_sec", 
          "type": "numeric", 
          "description": "The size of data blocks to write at once, in seconds"
        }, 
        {
          "default": 0, 
          "field": "blocksizeW_sec", 
          "type": "numeric", 
          "description": "The size of data blocks to write at once, in seconds (this option overwrites blocksize_sec!) (this option is provided for compatibility only... it is exactly the same as 'blocksize')"
        }, 
        {
          "default": 0, 
          "field": "period", 
          "type": "numeric", 
          "description": "(optional) The period of the input frames (in seconds), if it cannot be determined from the input file format. (if set and != 0, this will overwrite any automatically set values, e.g. from samplerate and writer.levelconf etc. (NOTE: this behaviour also depends on the source component, whether it overwrites period in configureWriter() or whether it keeps the period if it is != 0.0))"
        }, 
        {
          "default": -1, 
          "field": "basePeriod", 
          "type": "numeric", 
          "description": "(optional) The base period of the input data (in seconds). The default -1.0 will force the code to use the value of period (unless overwritten by configureWriter().)"
        }
      ], 
      "component": "cDataSource", 
      "description": ""
    }, 
    {
      "fields": [
        {
          "field": "reader", 
          "type": "cDataReader", 
          "description": "The configuration of the cDataReader subcomponent, which handles the dataMemory interface for reading of input"
        }, 
        {
          "default": 0, 
          "field": "blocksize", 
          "type": "numeric", 
          "description": "The size of the data blocks to read at once, in frames (overwrites blocksize_sec, if set)"
        }, 
        {
          "default": 0, 
          "field": "blocksizeR", 
          "type": "numeric", 
          "description": "The size of the data blocks to read at once, in frames (this overwrites blocksize and blocksize_sec!) (this option is provided for compatibility only... it is exactly the same as 'blocksize')"
        }, 
        {
          "default": 0, 
          "field": "blocksize_sec", 
          "type": "numeric", 
          "description": "The size of the data blocks to read at once, in seconds"
        }, 
        {
          "default": 0, 
          "field": "blocksizeR_sec", 
          "type": "numeric", 
          "description": "The size of the data blocks to read at once, in seconds (this overwrites blocksize_sec!) (this option is provided for compatibility only... it is exactly the same as 'blocksize')"
        }, 
        {
          "default": 0, 
          "field": "errorOnNoOutput", 
          "type": "numeric", 
          "description": "1 = show an error message if no output was written by this sink during this run.", 
          "allowedValues": [
            0, 
            1
          ]
        }
      ], 
      "component": "cDataSink", 
      "description": "", 
      "readsFromLevels": [
        "reader.dmLevel"
      ]
    }, 
    {
      "writesToLevels": [
        "writer.dmLevel"
      ], 
      "fields": [
        {
          "field": "reader", 
          "type": "cDataReader", 
          "description": "The configuration of the cDataReader subcomponent, which handles the dataMemory interface for data input"
        }, 
        {
          "field": "writer", 
          "type": "cDataWriter", 
          "description": "The configuration of the cDataWriter subcomponent, which handles the dataMemory interface for data output"
        }, 
        {
          "default": 0, 
          "field": "buffersize", 
          "type": "numeric", 
          "description": "The buffer size for the output level in frames (default [0] = same as input level), this option overwrites 'buffersize_sec'"
        }, 
        {
          "default": 0, 
          "field": "buffersize_sec", 
          "type": "numeric", 
          "description": "The buffer size for the output level in seconds (default [0] = same as input level)"
        }, 
        {
          "default": 0, 
          "field": "blocksize", 
          "type": "numeric", 
          "description": "The size of data blocks to process in frames (this sets both blocksizeR and blocksizeW, and overwrites blocksize_sec)"
        }, 
        {
          "default": 0, 
          "field": "blocksizeR", 
          "type": "numeric", 
          "description": "The size of data blocks to read in frames (overwrites blocksize)"
        }, 
        {
          "default": 0, 
          "field": "blocksizeW", 
          "type": "numeric", 
          "description": "The size of data blocks to write in frames (overwrites blocksize)"
        }, 
        {
          "default": 0, 
          "field": "blocksize_sec", 
          "type": "numeric", 
          "description": "size of data blocks to process in seconds (this sets both blocksizeR_sec and blocksizeW_sec)"
        }, 
        {
          "default": 0, 
          "field": "blocksizeR_sec", 
          "type": "numeric", 
          "description": "size of data blocks to read in seconds (overwrites blocksize_sec!)"
        }, 
        {
          "default": 0, 
          "field": "blocksizeW_sec", 
          "type": "numeric", 
          "description": "size of data blocks to write in seconds (overwrites blocksize_sec!)"
        }, 
        {
          "default": null, 
          "field": "nameAppend", 
          "type": "string", 
          "description": "A string suffix to append to the input field names (default: empty)"
        }, 
        {
          "default": 1, 
          "field": "copyInputName", 
          "type": "numeric", 
          "description": "1 = copy the input name (and optionally append a suffix, see 'nameAppend' option), 0 = discard the input name and use only the 'nameAppend' string as new name.", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "EOIlevel", 
          "type": "numeric", 
          "description": "set the EOI counter threshold at which to act in EOI mode (for full input processing). Required e.g. for multi-level EOI chains to avoid running full input functionals/windows on incomplete first EOI iteration data."
        }
      ], 
      "component": "cDataProcessor", 
      "description": "", 
      "readsFromLevels": [
        "reader.dmLevel"
      ]
    }, 
    {
      "description": "", 
      "writesToLevels": [
        "writer.dmLevel"
      ], 
      "fields": [
        {
          "description": "1 = process each array field as one vector individually (and produce one output for each input array field). Only array fields (i.e. fields with more than one element) are processed if this is set. / 0 = process complete input frame as one vector, ignoring field/element structure", 
          "overridden": true, 
          "default": 0, 
          "allowedValues": [
            0, 
            1
          ], 
          "field": "processArrayFields", 
          "type": "numeric"
        }, 
        {
          "default": 620, 
          "field": "maxPitch", 
          "type": "numeric", 
          "description": "Maximum detectable pitch in Hz"
        }, 
        {
          "default": 52, 
          "field": "minPitch", 
          "type": "numeric", 
          "description": "Minimum detectable pitch in Hz"
        }, 
        {
          "default": 3, 
          "field": "nCandidates", 
          "type": "numeric", 
          "description": "The number of F0 candidates to output [1-20] (0 disables ouput of candidates AND their voicing probs.)"
        }, 
        {
          "default": 1, 
          "field": "scores", 
          "type": "numeric", 
          "description": "1/0 = on/off: output of F0 candidates scores, if available", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "voicing", 
          "type": "numeric", 
          "description": "1/0 = on/off: output of voicing probability for F0 candidates", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "F0C1", 
          "type": "numeric", 
          "description": "1/0 = on/off: output of raw best F0 candidate without thresholding in unvoiced segments", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "voicingC1", 
          "type": "numeric", 
          "description": "1/0 = on/off: output of output voicing (pseudo) probability for best candidate", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "F0raw", 
          "type": "numeric", 
          "description": "1/0 = on/off: output of raw F0 (best candidate), > 0 only for voiced segments (using voicingCutoff threshold)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "voicingClip", 
          "type": "numeric", 
          "description": "1/0 = on/off: output of voicing of raw F0 (best candidate), > 0 only for voiced segments (using voicingCutoff threshold)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "voicingCutoff", 
          "type": "numeric", 
          "description": "This sets the voicing (pseudo) probability threshold for pitch detection. Frames with voicing probability values above this threshold will be considered as voiced."
        }, 
        {
          "default": "Mag", 
          "field": "inputFieldSearch", 
          "type": "string", 
          "description": "A part of the name to find the pitch detectors input field by ('Mag' searches e.g. for *Mag*, and will match fftMag fields)"
        }, 
        {
          "default": 0, 
          "field": "octaveCorrection", 
          "type": "numeric", 
          "description": "If this pitch detector algorithm offers algorithm specific low-level octave correction, enable it", 
          "allowedValues": [
            0, 
            1
          ]
        }
      ], 
      "component": "cPitchBase", 
      "readsFromLevels": [
        "reader.dmLevel"
      ], 
      "baseComponent": "cVectorProcessor"
    }, 
    {
      "fields": [
        {
          "default": 1, 
          "field": "max", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of maximum value", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "min", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of minimum value", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "range", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of range (max-min)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "maxpos", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of position of maximum value (relative to the input segment length, in seconds, or in frames, see the 'norm' option or the 'masterTimeNorm' option of the cFunctionals parent component)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "minpos", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of position of minimum value (relative to the input segment length, in seconds, or in frames, see the 'norm' option or the 'masterTimeNorm' option of the cFunctionals parent component)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "amean", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of arithmetic mean", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "maxameandist", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of (max-arithmetic_mean)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "minameandist", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of (arithmetic_mean-min)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": "frames", 
          "field": "norm", 
          "type": "string", 
          "description": "This option specifies how this component should normalise times (if it generates output values related to durations):\n'segment' (or: 'turn') : normalise to the range 0..1, the result is the relative length wrt. to the segment length )\n'second'  (absolute time in seconds)\n'frame' (absolute time in number of frames of input level)", 
          "suggestedValues": [
            "segment", 
            "turn", 
            "second", 
            "frame"
          ],
          "allowedValues": [
            "segment",
            "segments",
            "turn",
            "turns",
            "second",
            "seconds",
            "frame",
            "frames"
          ]
        }
      ], 
      "component": "cFunctionalExtremes", 
      "description": ""
    }, 
    {
      "fields": [
        {
          "default": 1, 
          "field": "amean", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of arithmetic mean", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "absmean", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of arithmetic mean of absolute values", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "qmean", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of quadratic mean", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "nzamean", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of arithmetic mean (of non-zero values only)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "nzabsmean", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of arithmetic mean of absolute values (of non-zero values only)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "nzqmean", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of quadratic mean (of non-zero values only)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "nzgmean", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of geometric mean (of absolute values of non-zero values only)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "nnz", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of number of non-zero values (relative to the input segment length, in seconds, or in frames, see the 'norm' option or the 'masterTimeNorm' option of the cFunctionals parent component)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "flatness", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of contour flatness (ratio of geometric mean and absolute value arithmetic mean(absmean)))", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "posamean", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of arithmetic mean of positive values only (usually you would apply this to a differential signal to measure how much the original signal is rising)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "negamean", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of arithmetic mean of negative values only", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "posqmean", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of quadratic mean of positive values only", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "posrqmean", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of root of quadratic mean of positive values only", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "negqmean", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of quadratic mean of negative values only", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "negrqmean", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of root of quadratic mean of negative values only", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "rqmean", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of square root of quadratic mean", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "nzrqmean", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of square root of quadratic mean of non zero values", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": "frames", 
          "field": "norm", 
          "type": "string", 
          "description": "This option specifies how this component should normalise times (if it generates output values related to durations):\n'segment' (or: 'turn') : normalise to the range 0..1, the result is the relative length wrt. to the segment length )\n'second'  (absolute time in seconds)\n'frame' (absolute time in number of frames of input level)", 
          "suggestedValues": [
            "segment", 
            "turn", 
            "second", 
            "frame"
          ],
          "allowedValues": [
            "segment",
            "segments",
            "turn",
            "turns",
            "second",
            "seconds",
            "frame",
            "frames"
          ]
        }
      ], 
      "component": "cFunctionalMeans", 
      "description": ""
    }, 
    {
      "fields": [
        {
          "default": 1, 
          "field": "numPeaks", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of number of peaks [output name: numPeaks]", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "meanPeakDist", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of mean distance between peaks (relative to the input segment length, in seconds, or in frames, see the 'norm' option or the 'masterTimeNorm' option of the cFunctionals parent component) [output name: meanPeakDist]", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "peakMean", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of arithmetic mean of peaks [output name: peakMean]", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "peakMeanMeanDist", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of arithmetic mean of peaks - arithmetic mean of all values [output name: peakMeanMeanDist]", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "peakDistStddev", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of standard deviation of inter peak distances [output name: peakDistStddev]", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": "frames", 
          "field": "norm", 
          "type": "string", 
          "description": "This option specifies how this component should normalise times (if it generates output values related to durations):\n'segment' (or: 'turn') : normalise to the range 0..1, the result is the relative length wrt. to the segment length )\n'second'  (absolute time in seconds)\n'frame' (absolute time in number of frames of input level)", 
          "suggestedValues": [
            "segment", 
            "turn", 
            "second", 
            "frame"
          ],
          "allowedValues": [
            "segment",
            "segments",
            "turn",
            "turns",
            "second",
            "seconds",
            "frame",
            "frames"
          ]
        }, 
        {
          "default": 1, 
          "field": "overlapFlag", 
          "type": "numeric", 
          "description": "1/0=yes/no frames overlap (i.e. compute peaks locally only)", 
          "allowedValues": [
            0, 
            1
          ]
        }
      ], 
      "component": "cFunctionalPeaks", 
      "description": ""
    }, 
    {
      "fields": [
        {
          "default": 0, 
          "field": "numPeaks", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of number of peaks (if norm=segment or frame) and rate of peaks per time (1 second) if norm=second.", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "meanPeakDist", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of mean distance between peaks (relative to the input segment length, in seconds, or in frames, see the 'norm' option or the 'masterTimeNorm' option of the cFunctionals parent component)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "meanPeakDistDelta", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of mean difference between consecutive inter peak distances (relative to the input segment length, in seconds, or in frames, see the 'norm' option or the 'masterTimeNorm' option of the cFunctionals parent component) [NOT YET IMPLEMENTED!]", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "peakDistStddev", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of standard deviation of inter peak distances", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "peakRangeAbs", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of peak range (max peak value - min peak value)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "peakRangeRel", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of peak range (max peak value - min peak value) / arithmetic mean", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "peakMeanAbs", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of arithmetic mean of peaks (local maxima)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "peakMeanMeanDist", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of arithmetic mean of peaks - arithmetic mean of all values (mean of peaks to signal mean distance)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "peakMeanRel", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of arithmetic mean of peaks (local maxima) / arithmetic mean of all values (mean of peaks to signal mean ratio ~ peakMeanMeanRatio)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "ptpAmpMeanAbs", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of mean peak to peak (amplitude) difference", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "ptpAmpMeanRel", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of mean peak to peak (amplitude) difference / range of signal", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "ptpAmpStddevAbs", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of mean peak to peak (amplitude) standard deviation", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "ptpAmpStddevRel", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of mean peak to peak (amplitude) standard deviation / range of signal", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "minRangeAbs", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of local minima range (max minmum value - min minimum value)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "minRangeRel", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of local minima range (max minmum value - min minimum value) / arithmetic mean", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "minMeanAbs", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of arithmetic mean of local minima", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "minMeanMeanDist", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of arithmetic mean of local minima - arithmetic mean of all values", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "minMeanRel", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of arithmetic mean of local minima / arithmetic mean", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "mtmAmpMeanAbs", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of mean minimum to minimum (amplitude) difference", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "mtmAmpMeanRel", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of mean minimum to minimum (amplitude) difference / range of signal", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "mtmAmpStddevAbs", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of mean minimum to minimum (amplitude) standard deviation", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "mtmAmpStddevRel", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of mean minimum to minimum (amplitude) standard deviation / range of signal", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "meanRisingSlope", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of the mean of the rising slopes (rising slope is the slope of the line connecting a local minimum (or the beginning of input sample) with the following local maximum/peak or the end of input sample)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "maxRisingSlope", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of maximum rising slope", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "minRisingSlope", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of minimum rising slope", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "stddevRisingSlope", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of the standard deviation of the rising slopes", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "covRisingSlope", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of the coefficient of variation (std. dev. divided by arithmetic mean) of the rising slopes", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "meanFallingSlope", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of the mean of the falling slopes (falling slope is the slope of the line connecting a local maximum/peak (or the beginning of input sample) with the following local minimum (or the end of input sample))", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "maxFallingSlope", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of maximum falling slope.", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "minFallingSlope", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of minimum falling slope", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "stddevFallingSlope", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of the standard deviation of the falling slopes", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "covFallingSlope", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of the coefficient of variation (std. dev. divided by arithmetic mean) of the falling slopes", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": "frames", 
          "field": "norm", 
          "type": "string", 
          "description": "This option specifies how this component should normalise times (if it generates output values related to durations):\n'segment' (or: 'turn') : normalise to the range 0..1, the result is the relative length wrt. to the segment length )\n'second'  (absolute time in seconds)\n'frame' (absolute time in number of frames of input level)", 
          "suggestedValues": [
            "segment", 
            "turn", 
            "second", 
            "frame"
          ],
          "allowedValues": [
            "segment",
            "segments",
            "turn",
            "turns",
            "second",
            "seconds",
            "frame",
            "frames"
          ]
        }, 
        {
          "description": "1 = don't clear the peak list when a new segment is processed. This should never be used, unless you need compatibility with old (buggy!) behaviour. If you are using a config file with peak2 functionals from before 05. Sept. 2012, you need to enable this option to be compatible with old models and results.", 
          "default": 0, 
          "allowedValues": [
            0, 
            1
          ], 
          "field": "noClearPeakList", 
          "recommendedValue": 0, 
          "type": "numeric"
        }, 
        {
          "default": 0, 
          "field": "absThresh", 
          "type": "numeric", 
          "description": "Gives an absolute threshold for the minimum peak height. Use with caution, use only if you know what you are doing. If this option is not set, relThresh will be used."
        }, 
        {
          "default": 0.1, 
          "field": "relThresh", 
          "type": "numeric", 
          "description": "Gives the threshold relative to the input contour range, which is used to remove peaks and minimima below this threshold. Valid values: 0..1, a higher value will remove more peaks, while a lower value will keep more and less salient peaks. If not using dynRelThresh=1 you should use a default value of ~0.10 otherwise a default of ~0.35"
        }, 
        {
          "default": 0, 
          "field": "dynRelThresh", 
          "type": "numeric", 
          "description": "1/0 = enable disable dynamic relative threshold. Instead of converting the relThresh to an absolute threshold relThresh*range, the threshold is applied as: abs(a/b-1.0) < relThresh , where a is always larger than b.", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": null, 
          "field": "posDbgOutp", 
          "type": "string", 
          "description": "Filename for debug output of peak positions. The file will be created initially (unless 'posDbgAppend' is set to 1) and values for consecutive input frames will be appended, separated by a '---' marker line."
        }, 
        {
          "default": 0, 
          "field": "posDbgAppend", 
          "type": "numeric", 
          "description": "Append to debug ouptut file instead of overwriting it at startup. If the file does not exist, it will be created, even if this option is set to 1.", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "consoleDbg", 
          "type": "numeric", 
          "description": "Debug output of peak positions to console if no output file is given (an output file will override this option).", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "doRatioLimit", 
          "type": "numeric", 
          "description": "(1/0) = yes/no. Apply soft limiting of ratio features (mean relative etc.) in order to avoid high uncontrolled output values if the denominator is close to 0. For strict compatibility with pre 2.2 openSMILE releases (also release candidates 2.2rc1), set it to 0. Default in new versions is 1 (enabled).", 
          "allowedValues": [
            0, 
            1
          ]
        }
      ], 
      "component": "cFunctionalPeaks2", 
      "description": ""
    }, 
    {
      "fields": [
        {
          "default": 20, 
          "field": "maxNumSeg", 
          "type": "numeric", 
          "description": "Maximum number of segments to detect. Use growDynSegBuffer=1 to automatically increase this size if more segments are detected. Use norm=seconds or norm=frames in this time to avoid having inconsistent results."
        }, 
        {
          "default": "delta", 
          "field": "segmentationAlgorithm", 
          "type": "string", 
          "description": "Method to use for segmenting the input contour. Possible values are:\ndelta : new segments start when the signal changes more than 'rangeRelThreshold' when the current frame is compared to a running average computed over a length of ravgLng = Nin/(maxNumSeg/2) frames (Nin is the length of the input contour in frames).\n(m)(NA)relTh : segment boundaries each time the short term running average (over 3 frames) of the signal rises above predefined relative (to the signal range) value thresholds (NA version: don't use running average, use signal directly instead; m version: relative thresholds are relative to the arithmetic mean).\n(NA)absTh : segment boundaries each time the short-time running average (3 frames) of the signal rises above predefined absolute value thresholds (NA version: don't use running average, use signal values directly instead).\nchX : segments are regions of continuous input samples of value X and continuous segments of non-X samples, i.e. segment boundaries are at changes from X to non-X values.\nnonX : segment boundaries are at changes from X to non-X, but only non-X value sequences are considered as segments.\neqX : segment boundaries are at changes from X to non-X, but only equal to X value sequences are considered as segments.\nltX : segment boundaries are at changes from greater equal X to smaller X, but only smaller X sequences are considered as segments.\ngtX :  segment boundaries are at changes from smaller equal X to greater X, but only greater X sequences are considered as segments.\ngeqX :  segment boundaries are at changes from greater equal X to smaller X, but only greater equal X sequences are considered as segments.\nleqX : segment boundaries are at changes from smaller equal X to greater X, but only smaller equal X sequences are considered as segments.", 
          "allowedValues": [
            "delta", 
            "relTh", 
            "mrelTh", 
            "NArelTh", 
            "mNArelTh", 
            "absTh", 
            "NAabsTh", 
            "chX", 
            "nonX", 
            "eqX", 
            "ltX", 
            "gtX", 
            "geqX", 
            "leqX"
          ]
        }, 
        {
          "default": 0, 
          "field": "ravgLng", 
          "type": "numeric", 
          "description": "If set to a value > 0, forces the length of the running average window to this value (for the delta thresholding method)."
        }, 
        {
          "default": 0, 
          "field": "thresholds", 
          "type": "numeric", 
          "description": "An array of thresholds, used if 'segmentationAlgorithm' is set to either 'relTh' or 'absTh'. The values specified here are then either relative thresholds (relative to the range of the input), or absolute value thresholds."
        }, 
        {
          "default": 0, 
          "field": "X", 
          "type": "numeric", 
          "description": "The value of X for the 'chX','nonX','eqX','ltX','gtX','geqX', and 'leqX' segmentation methods/algorithms."
        }, 
        {
          "default": 0, 
          "field": "XisRel", 
          "type": "numeric", 
          "description": "1= X is a threshold relative to the range of the input / 0= X is an absolute valued threshold.", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0.2, 
          "field": "rangeRelThreshold", 
          "type": "numeric", 
          "description": "The segment threshold relative to the signal's range (max-min), when 'segmentationAlgorithm' is set to 'delta'."
        }, 
        {
          "default": 0, 
          "field": "numSegments", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of the number of segments (output is relative to maxNumSeg if norm=segment or the absolute value if norm=frames, and for norm=seconds the output is the number of segments per second)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "meanSegLen", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of the mean segment length (relative to the input segment length, in seconds, or in frames, see the 'norm' option or the 'masterTimeNorm' option of the cFunctionals parent component)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "maxSegLen", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of the maximum segment length (relative to the input segment length, in seconds, or in frames, see the 'norm' option or the 'masterTimeNorm' option of the cFunctionals parent component)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "minSegLen", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of the minimum segment length (relative to the input segment length, in seconds, or in frames, see the 'norm' option or the 'masterTimeNorm' option of the cFunctionals parent component)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "segLenStddev", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of the standard deviation of the segment lengths (relative to the input segment length, in seconds, or in frames, see the 'norm' option or the 'masterTimeNorm' option of the cFunctionals parent component)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": "segment", 
          "field": "norm", 
          "type": "string", 
          "description": "This option specifies how this component should normalise times (if it generates output values related to durations):\n'segment' (or: 'turn') : normalise to the range 0..1, the result is the relative length wrt. to the segment length )\n'second'  (absolute time in seconds)\n'frame' (absolute time in number of frames of input level)", 
          "suggestedValues": [
            "segment", 
            "turn", 
            "second", 
            "frame"
          ],
          "allowedValues": [
            "segment",
            "segments",
            "turn",
            "turns",
            "second",
            "seconds",
            "frame",
            "frames"
          ]
        }, 
        {
          "default": 0, 
          "field": "dbgPrint", 
          "type": "numeric", 
          "description": "1= enable debug output with segment boundary begin and end coordinates", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 3, 
          "field": "segMinLng", 
          "type": "numeric", 
          "description": "Minimum segment length in input level frames. The segmentation algorithms EqX, NonX, and ChX always use this value. The old (buggy) versions of these algorithms (if useOldBuggyChX = 1), never use this value, they instead compute it as InputLength/maxNumSeg - 1. All other algorithms compute the value segMinLng as inputLength/maxNumSeg if this option is not set explicitly, otherwise they use the value this option is set to (in this case it overrides maxNumSeg, i.e. the maximum number of segments that can be detected might differ from the value maxNumSeg is set to)."
        }, 
        {
          "default": 2, 
          "field": "pauseMinLng", 
          "type": "numeric", 
          "description": "Minimum length of a pause for the segmentation algorithms EqX and NonX in input level frames."
        }, 
        {
          "description": "1 = Use old buggy version of the ChX, EqX and NonX code (configs up to 12.06.2012); available only for compatibility. Do not use in new configs!", 
          "default": 0, 
          "allowedValues": [
            0, 
            1
          ], 
          "field": "useOldBuggyChX", 
          "recommendedValue": 0, 
          "type": "numeric"
        }, 
        {
          "default": 0, 
          "field": "growDynSegBuffer", 
          "type": "numeric", 
          "description": "1 = Dynamically grow the segment buffer (i.e. maxNumSeg = infinite) by maxNumSeg segments at a time if more segments are detected.", 
          "allowedValues": [
            0, 
            1
          ]
        }
      ], 
      "component": "cFunctionalSegments", 
      "description": ""
    }, 
    {
      "fields": [
        {
          "default": 0, 
          "field": "threshold", 
          "type": "numeric", 
          "description": "The absolute threshold used for onset/offset detection (i.e. the first onset will be where the input value is above the threshold for the first time)"
        }, 
        {
          "default": 0, 
          "field": "thresholdOnset", 
          "type": "numeric", 
          "description": "A separate threshold only for onset detection. This will override the 'threshold' option, if set"
        }, 
        {
          "default": 0, 
          "field": "thresholdOffset", 
          "type": "numeric", 
          "description": "A separate threshold only for offset detection. This will override the 'threshold' option, if set"
        }, 
        {
          "default": 0, 
          "field": "useAbsVal", 
          "type": "numeric", 
          "description": "1/0=yes/no : apply thresholds to absolute input value instead of original input value", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "onsetPos", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of relative position (relative to the input segment length, in seconds, or in frames, see the 'norm' option or the 'masterTimeNorm' option of the cFunctionals parent component) of first onset found [output name: onsetPos]", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "offsetPos", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of position of last offset found (relative to the input segment length, in seconds, or in frames, see the 'norm' option or the 'masterTimeNorm' option of the cFunctionals parent component) [output name: offsetPos]", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "numOnsets", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of the number of onsets found [output name: numOnsets]", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "numOffsets", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of the number of offsets found (this is usually redundant and the same as numOnsets, use this only for special applications where it may make sense to use it) [output name: numOffsets]", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "onsetRate", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of on-set rate, i.e. the number of onsets per second.", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": "segment", 
          "field": "norm", 
          "type": "string", 
          "description": "This option specifies how this component should normalise times (if it generates output values related to durations):\n'segment' (or: 'turn') : normalise to the range 0..1, the result is the relative length wrt. to the segment length )\n'second'  (absolute time in seconds)\n'frame' (absolute time in number of frames of input level)", 
          "suggestedValues": [
            "segment", 
            "turn", 
            "second", 
            "frame"
          ],
          "allowedValues": [
            "segment",
            "segments",
            "turn",
            "turns",
            "second",
            "seconds",
            "frame",
            "frames"
          ]
        }
      ], 
      "component": "cFunctionalOnset", 
      "description": ""
    }, 
    {
      "fields": [
        {
          "default": 1, 
          "field": "variance", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of variance", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "stddev", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of standard deviation", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "skewness", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of skewness", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "kurtosis", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of kurtosis", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "amean", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of arithmetic mean", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "stddevNorm", 
          "type": "numeric", 
          "description": "(2)/1/0=(enable compatible)/enable/disable output of standard deviation normalised to the absolute value of the arithmetic mean (stddev/abs(mean), also referred to as 'coefficient of variance'). NOTE: in older pre 2.2-final versions of openSMILE, this option computed stddev/mean without the abs() operation. To enable a behaviour compatible to this, set this option to the value 2."
        }, 
        {
          "default": 0, 
          "field": "doRatioLimit", 
          "type": "numeric", 
          "description": "(1/0) = yes/no. Apply soft limiting of stddevNorm ratio feature in order to avoid high uncontrolled output values if the denominator is close to 0. For strict compatibility with pre 2.2 openSMILE releases (also release candidates 2.2rc1), set it to 0 (current default)", 
          "allowedValues": [
            0, 
            1
          ]
        }
      ], 
      "component": "cFunctionalMoments", 
      "description": ""
    }, 
    {
      "fields": [
        {
          "default": 1, 
          "field": "zcr", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of zero crossing rate", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "mcr", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of mean crossing rate (the rate at which the signal crosses its arithmetic mean value (same as zcr for mean normalised signals)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "amean", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of arithmetic mean", 
          "allowedValues": [
            0, 
            1
          ]
        }
      ], 
      "component": "cFunctionalCrossings", 
      "description": ""
    }, 
    {
      "fields": [
        {
          "default": 0, 
          "field": "quartiles", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of all quartiles (overrides individual settings quartile1, quartile2, and quartile3)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "quartile1", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of quartile1 (0.25)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "quartile2", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of quartile2 (0.50)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "quartile3", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of quartile3 (0.75)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "iqr", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of all inter-quartile ranges (overrides individual settings iqr12, iqr23, and iqr13)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "iqr12", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of inter-quartile range 1-2 (quartile2-quartile1)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "iqr23", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of inter-quartile range 2-3 (quartile3-quartile2)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "iqr13", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of inter-quartile range 1-3 (quartile3-quartile1)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "iqq", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of all inter-quartile quotients (ratios) (overrides individual settings iqq12, iqq23, and iqq13)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "iqq12", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of inter-quartile quotient q1/q2", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "iqq23", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of inter-quartile quotient q2/q3", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "iqq13", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of inter-quartile quotient q1/q3", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0.9, 
          "field": "percentile", 
          "type": "numeric", 
          "description": "Array of p*100 percent percentiles to compute. p = 0..1. Array size indicates the number of total percentiles to compute (excluding quartiles), duplicate entries are not checked for and not removed  : percentile[n] = p (p=0..1)"
        }, 
        {
          "default": "0-1", 
          "field": "pctlrange", 
          "type": "string", 
          "description": "Array that specifies which inter percentile ranges to compute. A range is specified as 'n1-n2' (where n1 and n2 are the indicies of the percentiles as they appear in the percentile[] array, starting at 0 with the index of the first percentile)"
        }, 
        {
          "default": "0-1", 
          "field": "pctlquotient", 
          "type": "string", 
          "description": "Array that specifies which inter percentile quotients to compute. A quotient is specified as 'n1-n2' (where n1 and n2 are the indicies of the percentiles as they appear in the percentile[] array, starting at 0 with the index of the first percentile). The quotient is computed as n1/n2."
        }, 
        {
          "default": 1, 
          "field": "interp", 
          "type": "numeric", 
          "description": "If set to 1, percentile values will be linearly interpolated, instead of being rounded to the nearest index in the sorted array", 
          "allowedValues": [
            0, 
            1
          ]
        }
      ], 
      "component": "cFunctionalPercentiles", 
      "description": ""
    }, 
    {
      "fields": [
        {
          "default": 1, 
          "field": "linregc1", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of slope m (linear regression line)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "linregc2", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of offset t (linear regression line)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "linregerrA", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of linear error between contour and linear regression line", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "linregerrQ", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of quadratic error between contour and linear regression line", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "qregc1", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of quadratic regression coefficient 1 (a)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "qregc2", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of quadratic regression coefficient 2 (b)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "qregc3", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of quadratic regression coefficient 3 (c = offset)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "qregerrA", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of linear error between contour and quadratic regression line (parabola)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "qregerrQ", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of quadratic error between contour and quadratic regression line (parabola)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "centroid", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of centroid of contour (this is computed as a by-product of the regression coefficients).", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": "segment", 
          "field": "centroidNorm", 
          "type": "string", 
          "description": "normalise time-scale of centroid to time in seconds (seconds), frame index (frame), or relative segment percentage (segment).", 
          "allowedValues": [
            "seconds", 
            "frame", 
            "segment"
          ]
        }, 
        {
          "default": 1, 
          "field": "centroidUseAbsValues", 
          "type": "numeric", 
          "description": "1/0=enable/disable. Use absolute values when computing temporal centroid. Default in pre 2.2 versions was 0. In 2.2 the default changes to 1!", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "centroidRatioLimit", 
          "type": "numeric", 
          "description": "(1/0) = yes/no. Apply soft limiting of centroid to valid (segment range) in order to avoid high uncontrolled output values if the denominator (absolute mean of values) is close to 0. For strict compatibility with pre 2.2 openSMILE releases (also release candidates 2.2rc1), set it to 0. Default in new versions is 1 (enabled).", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "qregls", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of left slope of parabola (slope of the line from first point on the parabola at t=0 to the vertex).", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "qregrs", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of right slope of parabola (slope of the line from the vertex to the last point on the parabola at t=N).", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "qregx0", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of x coordinate of the parabola vertex (since for very flat parabolas this can be very large/small, it is clipped to range -Nin - +Nin ).", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "qregy0", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of y coordinate of the parabola vertex.", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "qregyr", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of y coordinate of the last point on the parabola (t=N).", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "qregy0nn", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of y coordinate of the parabola vertex. This value is unnormalised, regardless of value of normInput.", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "qregc3nn", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of y coordinate of the first point on the parabola (t=0). This value is unnormalised, regardless of value of normInput.", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "qregyrnn", 
          "type": "numeric", 
          "description": "1/0=enable/disable output of y coordinate of the last point on the parabola (t=N). This value is unnormalised, regardless of value of normInput.", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "normRegCoeff", 
          "type": "numeric", 
          "description": "If > 0, do normalisation of regression coefficients, slopes, and coordinates on the time scale.\nIf == 1 (segment relative scaling), the coefficients are scaled (multiplied by the contour length) so that a regression line or parabola approximating the contour can be plotted over an x-axis range from 0 to 1, i.e. this makes the coefficients independent of the contour length (a longer contour with a lower slope will then have the same 'm' (slope) linear regression coefficient as a shorter but steeper slope).\nIf == 2, normalisation of time scale to the units of seconds, i.e. slope is value_delta/second.\nNote: The unnormalised slope is value_delta/timestep."
        }, 
        {
          "default": 0, 
          "field": "normInputs", 
          "type": "numeric", 
          "description": "1/0=enable/disable normalisation of regression coefficients, coordinates, and regression errors on the value scale. If enabled all input values will be normalised to the range 0..1. Use this in conjunction with normRegCoeff.", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "description": "Set this to 1 (default) to output the (input lengthwise) unnormalised quadratic regression errors (if qregerr* == 1) for compatibility with older feature sets. In new setups you should always change from the default to 0 to enable the proper scaling of the quadratic error!", 
          "default": 1, 
          "allowedValues": [
            0, 
            1
          ], 
          "field": "oldBuggyQerr", 
          "recommendedValue": 0, 
          "type": "numeric"
        }, 
        {
          "default": 0, 
          "field": "doRatioLimit", 
          "type": "numeric", 
          "description": "(1/0) = yes/no. Apply soft limiting of ratio features (slopes etc.) in order to avoid high uncontrolled output values if the denominator is close to 0. For strict compatibility with pre 2.2 openSMILE releases (also release candidates 2.2rc1), set it to 0 (current default)", 
          "allowedValues": [
            0, 
            1
          ]
        }
      ], 
      "component": "cFunctionalRegression", 
      "description": ""
    }, 
    {
      "fields": [
        {
          "default": 0, 
          "field": "samplepos", 
          "type": "numeric", 
          "description": "Array of positions of samples to copy to the output. The size of this array determines the number of sample frames that will be passed to the output. The given positions must be in the range from 0 to 1, indicating the relative position whithin the input segment, where 0 is the beginning and 1 the end of the segment."
        }
      ], 
      "component": "cFunctionalSamples", 
      "description": ""
    }, 
    {
      "fields": [
        {
          "default": 1, 
          "field": "upleveltime25", 
          "type": "numeric", 
          "description": "(1/0=yes/no) compute time where signal is above 0.25*range", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "downleveltime25", 
          "type": "numeric", 
          "description": "(1/0=yes/no) compute time where signal is below 0.25*range", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "upleveltime50", 
          "type": "numeric", 
          "description": "(1/0=yes/no) compute time where signal is above 0.50*range", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "downleveltime50", 
          "type": "numeric", 
          "description": "(1/0=yes/no) compute time where signal is below 0.50*range", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "upleveltime75", 
          "type": "numeric", 
          "description": "(1/0=yes/no) compute time where signal is above 0.75*range", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "downleveltime75", 
          "type": "numeric", 
          "description": "(1/0=yes/no) compute time where signal is below 0.75*range", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "upleveltime90", 
          "type": "numeric", 
          "description": "(1/0=yes/no) compute time where signal is above 0.90*range", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "downleveltime90", 
          "type": "numeric", 
          "description": "(1/0=yes/no) compute time where signal is below 0.90*range", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "risetime", 
          "type": "numeric", 
          "description": "(1/0=yes/no) compute time where signal is rising", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "falltime", 
          "type": "numeric", 
          "description": "(1/0=yes/no) compute time where signal is falling", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "leftctime", 
          "type": "numeric", 
          "description": "(1/0=yes/no) compute time where signal has left curvature", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "rightctime", 
          "type": "numeric", 
          "description": "(1/0=yes/no) compute time where signal has right curvature", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "duration", 
          "type": "numeric", 
          "description": "(1/0=yes/no) compute duration time, in frames (or seconds, if (time)norm==seconds)", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0.9, 
          "field": "upleveltime", 
          "type": "numeric", 
          "description": "compute time where signal is above X*range : upleveltime[n]=X"
        }, 
        {
          "default": 0.9, 
          "field": "downleveltime", 
          "type": "numeric", 
          "description": "compute time where signal is below X*range : downleveltime[n]=X"
        }, 
        {
          "default": "segment", 
          "field": "norm", 
          "type": "string", 
          "description": "This option specifies how this component should normalise times (if it generates output values related to durations):\n'segment' (or: 'turn') : normalise to the range 0..1, the result is the relative length wrt. to the segment length )\n'second'  (absolute time in seconds)\n'frame' (absolute time in number of frames of input level)", 
          "suggestedValues": [
            "segment", 
            "turn", 
            "second", 
            "frame"
          ],
          "allowedValues": [
            "segment",
            "segments",
            "turn",
            "turns",
            "second",
            "seconds",
            "frame",
            "frames"
          ]
        }, 
        {
          "description": "If set to 1, enables the old (prior to version 1.0.0 , 07 May 2010) second normalisation code which erroneously divides by the number of input frames. The default is kept at 1 (enabled) in order to not break compatibility with old configuration files, however you are strongly encouraged to change this to 0 in any new configuration you write in order to get the times in actual (bug-free) seconds!", 
          "default": 1, 
          "allowedValues": [
            0, 
            1
          ], 
          "field": "buggySecNorm", 
          "recommendedValue": 0, 
          "type": "numeric"
        }, 
        {
          "default": 0, 
          "field": "useRobustPercentileRange", 
          "type": "numeric", 
          "description": "Estimate range based on low/high percentiles (set by the pctlRangeMargin option) instead of single max/min values.", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0.05, 
          "field": "pctlRangeMargin", 
          "type": "numeric", 
          "description": "Minimum percentile (and 1-x for maximum percentile) for range estimation with option useRobustPercentileRange. Valid range between > 0 and < 0.5, recommended: 0.02-0.10"
        }
      ], 
      "component": "cFunctionalTimes", 
      "description": ""
    }, 
    {
      "fields": [
        {
          "default": 1, 
          "field": "firstCoeff", 
          "type": "numeric", 
          "description": "The first DCT coefficient to compute (coefficient 0 corresponds to the DC component)"
        }, 
        {
          "default": 6, 
          "field": "lastCoeff", 
          "type": "numeric", 
          "description": "The last DCT coefficient to compute"
        }, 
        {
          "default": 6, 
          "field": "nCoeffs", 
          "type": "numeric", 
          "description": "An alternative option to lastCoeff (this option overwrites lastCoeff, if it is set): the number DCT coefficient to compute (lastCoeff = firstCoeff+nCoeffs-1)."
        }
      ], 
      "component": "cFunctionalDCT", 
      "description": ""
    }, 
    {
      "fields": [
        {
          "default": 0, 
          "field": "lpGain", 
          "type": "numeric", 
          "description": "Output of LP gain (1=yes / 0=no).", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "lpc", 
          "type": "numeric", 
          "description": "Output of LP coefficients (1=yes / 0=no).", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "firstCoeff", 
          "type": "numeric", 
          "description": "The first LP coefficient to compute. The first coefficient is coeff 0 (default)"
        }, 
        {
          "default": 5, 
          "field": "order", 
          "type": "numeric", 
          "description": "The order of the linear prediction (i.e. the max number of coefficients, starting at coefficient number 0)."
        }
      ], 
      "component": "cFunctionalLpc", 
      "description": ""
    }, 
    {
      "fields": [
        {
          "field": "instance", 
          "type": "cComponentManagerInst", 
          "description": "Associative array storing component list.\nArray indicies are the instance names."
        }, 
        {
          "default": 1, 
          "field": "printLevelStats", 
          "type": "numeric", 
          "description": "1 = print detailed information about data memory level configuration, 2 = print even more details (?)"
        }, 
        {
          "default": 0, 
          "field": "profiling", 
          "type": "numeric", 
          "description": "1 = collect per component instance run-time stats and show summary at end of processing.", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 1, 
          "field": "nThreads", 
          "type": "numeric", 
          "description": "number of threads to run (0=auto(=one thread per component), >0 = actual number of threads"
        }, 
        {
          "default": 0, 
          "field": "threadPriority", 
          "type": "numeric", 
          "description": "The default thread scheduling priority (multi-thread mode) or the priority of the single thread (single thread mode). 0 is normal priority (-15 is background/idle priority, +15 is time critical). This option is currently only supported on windows!"
        }, 
        {
          "default": 0, 
          "field": "execDebug", 
          "type": "numeric", 
          "description": "print summary of component run statistics to log for each tick", 
          "allowedValues": [
            0, 
            1
          ]
        }, 
        {
          "default": 0, 
          "field": "oldSingleIterationTickLoop", 
          "type": "numeric", 
          "description": "1 = run the old single iteration tick loop with a single EOI tick loop after the main tick loop. Use this for backwards compatibility for older configs with components such as fullinputMean.", 
          "allowedValues": [
            0, 
            1
          ]
        }
      ], 
      "component": "cComponentManager", 
      "description": ""
    },
    {
      "component": "cPortaudioWavplayer",
      "description": "This component can play wavefiles directly to a portaudio output device. Multiple wave files can be specified as inputs and they can be played via smile messages containing the index of the sample to play. Concurrent play requests will be discarded (TODO: mix the output). All wave files must have the same sampling rate.",
      "fields": [
        {
          "field": "monoMixdown",
          "description": "mix down all channels to 1 mono channel",
          "type": "numeric",
          "default": 0,
          "allowedValues": [
            0, 
            1
          ]
        },
        {
          "field": "device",
          "description": "PortAudio device to use (device number)",
          "type": "numeric",
          "default": -1
        },
        {
          "field": "listDevices",
          "description": "(1/0=yes/no) list available portaudio devices during initialisation phase",
          "type": "numeric",
          "default": 0,
          "allowedValues": [
            0, 
            1
          ]
        },
        {
          "field": "sampleRate",
          "description": "force output sample rate (0=determine sample rate from input level)",
          "type": "numeric",
          "default": 0
        },
        {
          "field": "wavefile",
          "description": "The filenames of the wavesample(s) to play (triggered via smile message or numbers read from the input level).",
          "type": "string",
          "default": null
        },
        {
          "field": "keyword",
          "description": "List of keywords or classnames (in same order as wave files)",
          "type": "string",
          "default": null
        },
        {
          "field": "indices",
          "description": "List of class indicies for classification results (same order as wave files)",
          "type": "numeric",
          "default": -1
        },
        {
          "field": "semaineCallbackRcpt",
          "description": "Reciepient of SEMAINE callback message for echo feedback supression (start speaking / stop speaking messages, i.e. when player starts playing/stops playing).",
          "type": "string",
          "default": null,
          "typeHint": "componentInstance"
        },
        {
          "field": "audioBuffersize",
          "description": "size of port audio playback buffer in samples (overwrites audioBuffersize_sec, if set)",
          "type": "numeric",
          "default": 1000
        }
      ],
      "baseComponent": "cDataSink"
    },
    {
      "component": "cPortaudioSource",
      "description": "This component handles live audio recording from the soundcard via the PortAudio library",
      "fields": [
        {
          "field": "monoMixdown",
          "description": "Mix down all recorded channels to 1 mono channel",
          "type": "numeric",
          "default": 0,
          "allowedValues": [
            0, 
            1
          ]
        },
        {
          "field": "device",
          "description": "PortAudio device to use (device number, see the option 'listDevices' to get information on device numbers)",
          "type": "numeric",
          "default": -1
        },
        {
          "field": "listDevices",
          "description": "If set to 1, openSMILE will list available portaudio devices during initialisation phase and exit immediately after that (you might get an error message on windows, which you can ignore).",
          "type": "numeric",
          "default": 0,
          "allowedValues": [
            0, 
            1
          ]
        },
        {
          "field": "sampleRate",
          "description": "The sampling rate to use for audio recording (if supported by device!)",
          "type": "numeric",
          "default": 16000
        },
        {
          "field": "channels",
          "description": "The number of channels to record (check your device's capabilities!",
          "type": "numeric",
          "default": 1
        },
        {
          "field": "selectChannel",
          "description": "Select only the specified channel from 'channels' that are recorded. Set to -1 to grab all channels.",
          "type": "numeric",
          "default": -1
        },
        {
          "field": "nBits",
          "description": "The number of bits per sample and channel",
          "type": "numeric",
          "default": 16
        },
        {
          "field": "nBPS",
          "description": "The number of bytes per sample and channel (0=determine automatically from nBits)",
          "type": "numeric",
          "default": 0
        },
        {
          "field": "audioBuffersize",
          "description": "The size of the portaudio recording buffer in samples (overwrites audioBuffersize_sec, if set)",
          "type": "numeric",
          "default": 0
        },
        {
          "field": "audioBuffersize_sec",
          "description": "size of the portaudio recording buffer in seconds. This value has influence on the system latency. Setting it too high might introduce a high latency. A too low value might lead to dropped samples and reduced performance.",
          "type": "numeric",
          "default": 0.05
        },
        {
          "field": "byteSwap",
          "description": "1 = swap bytes, big endian <-> little endian (usually not required)",
          "type": "numeric",
          "default": 0,
          "allowedValues": [
            0, 
            1
          ]
        }
      ],
      "baseComponent": "cDataSource",
      "writesToLevels": [
        "writer.dmLevel"
      ]
    },
    {
      "component": "cPortaudioSink",
      "description": "This component handles live audio playback via the PortAudio library",
      "fields": [
        {
          "field": "monoMixdown",
          "description": "mix down all channels to 1 mono channel",
          "type": "numeric",
          "default": 0,
          "allowedValues": [
            0, 
            1
          ]
        },
        {
          "field": "device",
          "description": "PortAudio device to use (device number)",
          "type": "numeric",
          "default": -1
        },
        {
          "field": "listDevices",
          "description": "(1/0=yes/no) list available portaudio devices during initialisation phase",
          "type": "numeric",
          "default": 0,
          "allowedValues": [
            0, 
            1
          ]
        },
        {
          "field": "sampleRate",
          "description": "force output sample rate (0=determine sample rate from input level)",
          "type": "numeric",
          "default": 0
        },
        {
          "field": "audioBuffersize",
          "description": "size of port audio recording buffer in samples (overwrites audioBuffersize_sec, if set)",
          "type": "numeric",
          "default": 1000
        },
        {
          "field": "audioBuffersize_sec",
          "description": "size of port audio recording buffer in seconds",
          "type": "numeric",
          "default": 0.05
        }
      ],
      "baseComponent": "cDataSink",
      "readsFromLevels": [
        "reader.dmLevel"
      ]
    },
    {
      "component": "cPortaudioDuplex",
      "description": "dataProcessor for full-duplex playback and recording of live audio using PortAudio library",
      "fields": [
        {
          "field": "monoMixdownPB",
          "description": "mix down all channels to 1 mono channel (for playback)",
          "type": "numeric",
          "default": 0,
          "allowedValues": [
            0, 
            1
          ]
        },
        {
          "field": "monoMixdownREC",
          "description": "mix down all channels to 1 mono channel (for recording)",
          "type": "numeric",
          "default": 0,
          "allowedValues": [
            0, 
            1
          ]
        },
        {
          "field": "device",
          "description": "PortAudio device to use (device number)",
          "type": "numeric",
          "default": -1
        },
        {
          "field": "listDevices",
          "description": "(1/0=yes/no) list available portaudio devices during initialisation phase",
          "type": "numeric",
          "default": 0,
          "allowedValues": [
            0, 
            1
          ]
        },
        {
          "field": "sampleRate",
          "description": "recording AND playback sample rate (WARNING: no sample rate conversion of input level data will be performed prior to playback!)",
          "type": "numeric",
          "default": 44100
        },
        {
          "field": "nBits",
          "description": "number of bits per sample and channel to use for playback (0=pass float values to portaudio)  [ NOT IMPLEMENTED YET ]",
          "type": "numeric",
          "default": 0
        },
        {
          "field": "channels",
          "description": "number of channels to record",
          "type": "numeric",
          "default": 1
        },
        {
          "field": "audioBuffersize",
          "description": "size of port audio playback&recording buffer in samples",
          "type": "numeric",
          "default": 1000
        },
        {
          "field": "audioBuffersize_sec",
          "description": "size of port audio playback&recording buffer in seconds",
          "type": "numeric",
          "default": 0.05
        }
      ],
      "baseComponent": "cDataProcessor",
      "readsFromLevels": [
        "reader.dmLevel"
      ],
      "writesToLevels": [
        "writer.dmLevel"
      ]
    },
    {
      "component": "cJuliusSink",
      "description": "keyword spotter using Julius decoder",
      "baseComponent": "cDataSink",
      "readsFromLevels": [
        "reader.dmLevel"
      ],
      "sendsMessagesToComponents": [
        "juliusResultRecp",
        "kwsResultRecp"
      ],
      "fields": [
        {
          "field": "configfile",
          "type": "string",
          "description": "Julius configfile to load (path is relative to smile executable)",
          "default": "kws.cfg"
        },
        {
          "field": "logfile",
          "type": "string",
          "description": "Julius logfile (default=(null) : no log file)",
          "default": null
        },
        {
          "field": "debug",
          "type": "numeric",
          "description": "1 = show julius debug log output, 0 = don't show",
          "default": 0,
          "allowedValues": [
            0,
            1
          ]
        },
        {
          "field": "preSil",
          "type": "numeric",
          "description": "extra (silence) amount of data at beginning of turn to keep (in seconds)",
          "default": 0.3
        },
        {
          "field": "postSil",
          "type": "numeric",
          "description": "extra (silence) amount of data at end of turn to keep (in seconds)",
          "default": 0.4
        },
        {
          "field": "nopass2",
          "type": "numeric",
          "description": "1 = do not perform pass2 (you must also set the '-1pass' option in the julius config file!)",
          "default": 0,
          "allowedValues": [
            0,
            1
          ]
        },
        {
          "field": "printResult",
          "type": "numeric",
          "description": "print output packages to console (1/0=yes/no)",
          "default": 1,
          "allowedValues": [
            0,
            1
          ]
        },
        {
          "field": "juliusResultRecp",
          "type": "string",
          "typeHint": "componentInstance", 
          "description": "component(s) to send 'juliusResult' messages to (use , to separate multiple recepients), leave blank (NULL) to not send any messages. The 'juliusResult' message contains the full julius result package, which includes the full word string, alignments (if available) and the word scores as well as am and lm scores.",
          "default": null
        },
        {
          "field": "kwsResultRecp",
          "type": "string",
          "typeHint": "componentInstance", 
          "description": "component(s) to send 'asrKeywordOutput' messages to (use , to separate multiple recepients), leave blank (NULL) to not send any messages. The keyword result package only contains selected keywords (given in 'keywordList') from the full julius result package.",
          "default": null
        },
        {
          "field": "keywordList",
          "type": "string",
          "description": "name of text file to load keyword list from. The file must contain the keywords (all uppercase) sorted in alphabetical order, each keyword on a line.",
          "default": null
        },
        {
          "field": "excludeWords",
          "type": "string",
          "description": "array of strings (words) to exclude from result packages. Typically you would use this to exclude sentence start and end marks such as <s> or </s>. The default is an empty list, i.e. nothing will be excluded.",
          "default": null
        },
        {
          "field": "noTurns",
          "type": "numeric",
          "description": "1 = don't use turn segmentation info, simply pass all available input data to julius (you can either do VAD with julius then, or use this feature in offline mode when you use presegmented turns) (0 = segment input based on cTurnDetector messages).",
          "default": 0,
          "allowedValues": [
            0,
            1
          ]
        },
        {
          "field": "offlineMode",
          "type": "numeric",
          "description": "1 = off-line evaluation mode (this changes the exit behaviour of the decoder; in online mode the decoder will always return 1 (busy) when decoding; in off-line mode it will return 0 if it is processing if not in the EOI processing loop. This option will also set maxTurnQue=0 (infinite).",
          "default": 0,
          "allowedValues": [
            0,
            1
          ]
        },
        {
          "field": "maxTurnQue",
          "type": "numeric",
          "description": "maximum number of speech turns to hold in que, set this to 0 (infinite) for offline evaluations, and 2 (or more) for online mode",
          "default": 2,
          "allowedValues": [
            0,
            1,
            2
          ]
        },
        {
          "field": "decoderThreadPriority",
          "type": "numeric",
          "description": "the thread priority of the decoder thread (currently only supported on windows), values -15 (idle) to 15 (real-time), while 0 is normal. This should be lower as or equal to the priority of the openSMILE main thread!",
          "default": 0
        }
      ]
    },
    {
      "component": "cOpenslesSource",
      "description": "This component reads opensl audio buffer input into datamemory.",
      "baseComponent": "cDataSource",
      "writesToLevels": [
        "writer.dmLevel"
      ],
      "fields": [
        {
          "field": "monoMixdown",
          "type": "numeric",
          "description": "Mix down all channels to 1 mono channel (1=on, 0=off)",
          "default": 1,
          "allowedValues": [
            0,
            1
          ]
        },
        {
          "field": "sampleRate",
          "type": "numeric",
          "description": "Set/force the sampling rate that is assigned to the input data.",
          "default": 16000
        },
        {
          "field": "channels",
          "type": "numeric",
          "description": "Set/force the number of input (recording) channels",
          "default": 1
        },
        {
          "field": "outFieldName",
          "type": "string",
          "description": "Set the name of the output field, containing the pcm data",
          "default": "pcm"
        },
        {
          "field": "nBits",
          "type": "numeric",
          "description": "The number of bits per sample and channel",
          "default": 16
        },
        {
          "field": "nBPS",
          "type": "numeric",
          "description": "The number of bytes per sample and channel (0=determine automatically from nBits)",
          "default": 0
        },
        {
          "field": "audioBuffersize",
          "type": "numeric",
          "description": "The size of the portaudio recording buffer in samples (overwrites audioBuffersize_sec, if set)",
          "default": 0
        },
        {
          "field": "audioBuffersize_sec",
          "type": "numeric",
          "description": "size of the portaudio recording buffer in seconds. This value has influence on the system latency. Setting it too high might introduce a high latency. A too low value might lead to dropped samples and reduced performance.",
          "default": 0.05
        },
        {
          "field": "agcEnabled",
          "type": "numeric",
          "description": "1/0 = enable automatic gain control for input audio",
          "default": 0,
          "allowedValues": [
            0,
            1
          ]
        },
        {
          "field": "agcTarget",
          "type": "numeric",
          "description": "Target peak level for AGC, if enabled.",
          "default": 0.5
        },
        {
          "field": "agcDebug",
          "type": "numeric",
          "description": "1/0 = enable agc debugging output to log.",
          "default": 0,
          "allowedValues": [
            0,
            1
          ]
        }
      ]
    },
    {
      "component": "cJniMessageInterface",
      "description": "Component for transferring smile component messages from native C to Java via JNI interface.",
      "fields": [
        {
          "field": "sendMessagesInTick",
          "type": "numeric",
          "description": "1/0 enable/disable sending of messages synchronized in tick(). If set to 0, a background thread will be started which will send messages from the queue in the background (NOT YET IMPLEMENTED).",
          "default": 1,
          "allowedValues": [
            0,
            1
          ]
        },
        {
          "field": "JNIcallbackClass",
          "type": "string",
          "description": "Fully qualified Java name of class in APP which handles callbacks. Must be changed to the app namespace and domain.",
          "default": "java/com/audeering/testapp01/SmileJNIcallbacks"
        },
        {
          "field": "JNIstringReceiverMethod",
          "type": "string",
          "description": "Name of method which receives string messages in JNIcallbackClass. Default should not need to be changed, if class wasn't changed.",
          "default": "receiveText"
        },
        {
          "field": "debugPrintJson",
          "type": "numeric",
          "description": "1 = debug print to smile log the formatted json before sending.",
          "default": 0,
          "allowedValues": [
            0,
            1
          ]
        }
      ]
    },
    {
      "component": "cOpenCVSource",
      "description": "Captures frames from either webcam or file stream, extracts a square region containing the face and creates a LBP, HSV and optical flow histogram.",
      "baseComponent": "cDataSource",
      "writesToLevels": [
        "writer.dmLevel"
      ],
      "fields": [
        {
          "field": "display",
          "type": "numeric",
          "description": "Show original and extracted video",
          "default": 1,
          "allowedValues": [
            0,
            1
          ]
        },
        {
          "field": "videoSource",
          "type": "string",
          "description": "Choose Video Source: WEBCAM or FILE",
          "default": "WEBCAM"       
        },
        {
          "field": "filename",
          "type": "string",
          "description": "Filename of video, if VideoSource = FILE",
          "default": ""       
        },
        {
          "field": "fps",
          "type": "numeric",
          "description": "Frames per second",
          "default": 30.0      
        },
        {
          "field": "face_cascade_path",
          "type": "string",
          "description": "Path to OpenCV face cascade xml file",
          "default": "/usr/share/opencv/data/lbpcascades/lbpcascade_frontalface.xml"     
        },
        {
          "field": "eyes_cascade_path",
          "type": "string",
          "description": "Path to OpenCV eyes cascade xml file",
          "default": "/usr/share/opencv/data/haarcascades/haarcascade_eye_tree_eyeglasses.xml"  
        },
        {
          "field": "extract_face",
          "type": "numeric",
          "description": "Extract face and eyes?",
          "default": 1,
          "allowedValues": [
            0,
            1
          ]       
        },
        {
          "field": "extract_hsv_histogram",
          "type": "numeric",
          "description": "Extract HSV histogram?",
          "default": 1,
          "allowedValues": [
            0,
            1
          ]       
        },
        {
          "field": "extract_lbp_histogram",
          "type": "numeric",
          "description": "Extract LBP histogram?",
          "default": 1,
          "allowedValues": [
            0,
            1
          ]       
        },
        {
          "field": "extract_optical_flow",
          "type": "numeric",
          "description": "Extract optical flow histogram?",
          "default": 1,
          "allowedValues": [
            0,
            1
          ]       
        },
        {
          "field": "include_face_features",
          "type": "numeric",
          "description": "Include face features (eye position + distance etc.) in feature vector?",
          "default": 0,
          "allowedValues": [
            0,
            1
          ]       
        },
        {
          "field": "ignore_invalid_frames",
          "type": "numeric",
          "description": "Ignore invalid frames (e.g. when no face is detected. Cave: Might lead to synchronisation errors.",
          "default": 1,
          "allowedValues": [
            0,
            1
          ]       
        },
        {
          "field": "face_width",
          "type": "numeric",
          "description": "Width/height of extracted face square",
          "default": 60       
        },
        {
          "field": "lbp_uniformpatterns",
          "type": "numeric",
          "description": "Use uniform patterns for LBP histogram",
          "default": 0,
          "allowedValues": [
            0,
            1
          ]       
        },
        {
          "field": "hsv_histogram_h_bins",
          "type": "numeric",
          "description": "HSV histogram: Hue bins",
          "default": 50       
        },
        {
          "field": "hsv_histogram_s_bins",
          "type": "numeric",
          "description": "HSV histogram: Saturation bins",
          "default": 50       
        },
        {
          "field": "hsv_histogram_v_bins",
          "type": "numeric",
          "description": "HSV histogram: Value bins",
          "default": 50       
        },
        {
          "field": "of_histogram_bins",
          "type": "numeric",
          "description": "Optical flow histogram: Bins",
          "default": 10       
        },
        {
          "field": "normalize_histograms",
          "type": "numeric",
          "description": "Normalize histograms (L1-norm)",
          "default": 0,
          "allowedValues": [
            0,
            1
          ]       
        },
        {
          "field": "of_histogram_max_flow",
          "type": "numeric",
          "description": "Optical flow histogram: Max flow",
          "default": 0.2       
        },
        {
          "field": "of_histogram_downsample",
          "type": "numeric",
          "description": "Optical flow histogram: Downsample",
          "default": 0.3       
        },
        {
          "field": "use_lbpc",
          "type": "numeric",
          "description": "Use LBP-C (circular LBP)",
          "default": 0,
          "allowedValues": [
            0,
            1
          ]       
        },
        {
          "field": "lbpc_radius",
          "type": "numeric",
          "description": "LBP-C radius",
          "default": 1       
        },
        {
          "field": "lbpc_points",
          "type": "numeric",
          "description": "LBP-C points (currently only 8 points supported)",
          "default": 8       
        }
      ]
    }
  ]
}